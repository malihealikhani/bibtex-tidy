(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = global || self, global.bibtexTidy = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var bibtexParse = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	   factory(exports) ;
	}(commonjsGlobal, (function (exports) {
	  var parser = /*
	   * Generated by PEG.js 0.10.0.
	   *
	   * http://pegjs.org/
	   */
	  (function() {

	    function peg$subclass(child, parent) {
	      function ctor() { this.constructor = child; }
	      ctor.prototype = parent.prototype;
	      child.prototype = new ctor();
	    }

	    function peg$SyntaxError(message, expected, found, location) {
	      this.message  = message;
	      this.expected = expected;
	      this.found    = found;
	      this.location = location;
	      this.name     = "SyntaxError";

	      if (typeof Error.captureStackTrace === "function") {
	        Error.captureStackTrace(this, peg$SyntaxError);
	      }
	    }

	    peg$subclass(peg$SyntaxError, Error);

	    peg$SyntaxError.buildMessage = function(expected, found) {
	      var DESCRIBE_EXPECTATION_FNS = {
	            literal: function(expectation) {
	              return "\"" + literalEscape(expectation.text) + "\"";
	            },

	            "class": function(expectation) {
	              var escapedParts = "",
	                  i;

	              for (i = 0; i < expectation.parts.length; i++) {
	                escapedParts += expectation.parts[i] instanceof Array
	                  ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
	                  : classEscape(expectation.parts[i]);
	              }

	              return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
	            },

	            any: function(expectation) {
	              return "any character";
	            },

	            end: function(expectation) {
	              return "end of input";
	            },

	            other: function(expectation) {
	              return expectation.description;
	            }
	          };

	      function hex(ch) {
	        return ch.charCodeAt(0).toString(16).toUpperCase();
	      }

	      function literalEscape(s) {
	        return s
	          .replace(/\\/g, '\\\\')
	          .replace(/"/g,  '\\"')
	          .replace(/\0/g, '\\0')
	          .replace(/\t/g, '\\t')
	          .replace(/\n/g, '\\n')
	          .replace(/\r/g, '\\r')
	          .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
	          .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
	      }

	      function classEscape(s) {
	        return s
	          .replace(/\\/g, '\\\\')
	          .replace(/\]/g, '\\]')
	          .replace(/\^/g, '\\^')
	          .replace(/-/g,  '\\-')
	          .replace(/\0/g, '\\0')
	          .replace(/\t/g, '\\t')
	          .replace(/\n/g, '\\n')
	          .replace(/\r/g, '\\r')
	          .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
	          .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
	      }

	      function describeExpectation(expectation) {
	        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
	      }

	      function describeExpected(expected) {
	        var descriptions = new Array(expected.length),
	            i, j;

	        for (i = 0; i < expected.length; i++) {
	          descriptions[i] = describeExpectation(expected[i]);
	        }

	        descriptions.sort();

	        if (descriptions.length > 0) {
	          for (i = 1, j = 1; i < descriptions.length; i++) {
	            if (descriptions[i - 1] !== descriptions[i]) {
	              descriptions[j] = descriptions[i];
	              j++;
	            }
	          }
	          descriptions.length = j;
	        }

	        switch (descriptions.length) {
	          case 1:
	            return descriptions[0];

	          case 2:
	            return descriptions[0] + " or " + descriptions[1];

	          default:
	            return descriptions.slice(0, -1).join(", ")
	              + ", or "
	              + descriptions[descriptions.length - 1];
	        }
	      }

	      function describeFound(found) {
	        return found ? "\"" + literalEscape(found) + "\"" : "end of input";
	      }

	      return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
	    };

	    function peg$parse(input, options) {
	      options = options !== void 0 ? options : {};

	      var peg$FAILED = {},

	          peg$startRuleFunctions = { START: peg$parseSTART },
	          peg$startRuleFunction  = peg$parseSTART,

	          peg$c0 = function(items) {
	                return items.reduce((memo, item) => {
	                  let last = memo[memo.length - 1];
	                  if (last && last.itemtype === 'comment' && item.itemtype === 'comment') {
	                    last.comment += item.comment; // merge comments together
	                  } else {
	                    memo.push(item);
	                  }
	                  return memo;
	                }, []); 
	              },
	          peg$c1 = peg$otherExpectation("preamble, entry, string, or comment"),
	          peg$c2 = function(preamble) { return { itemtype: 'preamble', ...preamble }; },
	          peg$c3 = function(keyval) { return { itemtype: 'string', ...keyval }; },
	          peg$c4 = function(entry) { return { itemtype: 'entry', ...entry }; },
	          peg$c5 = function(comment) { return { itemtype: 'comment', comment }; },
	          peg$c6 = peg$otherExpectation("preamble"),
	          peg$c7 = "@preamble",
	          peg$c8 = peg$literalExpectation("@preamble", true),
	          peg$c9 = "(",
	          peg$c10 = peg$literalExpectation("(", false),
	          peg$c11 = ")",
	          peg$c12 = peg$literalExpectation(")", false),
	          peg$c13 = function(value) { return { enclosed: 'parentheses', ...value }; },
	          peg$c14 = "{",
	          peg$c15 = peg$literalExpectation("{", false),
	          peg$c16 = "}",
	          peg$c17 = peg$literalExpectation("}", false),
	          peg$c18 = function(value) { return { enclosed: 'braces', ...value }; },
	          peg$c19 = function(value) { return { enclosed: 'parentheses', value, datatype: 'unenclosed', raw: value }; },
	          peg$c20 = function(value) { return { enclosed: 'braces', value, datatype: 'unenclosed', raw: value }; },
	          peg$c21 = function(value) { return value; },
	          peg$c22 = peg$otherExpectation("string"),
	          peg$c23 = "@string",
	          peg$c24 = peg$literalExpectation("@string", true),
	          peg$c25 = function(keyval) { return keyval; },
	          peg$c26 = peg$otherExpectation("comment"),
	          peg$c27 = /^[^@]/,
	          peg$c28 = peg$classExpectation(["@"], true, false),
	          peg$c29 = "@",
	          peg$c30 = peg$literalExpectation("@", false),
	          peg$c31 = "comment",
	          peg$c32 = peg$literalExpectation("comment", true),
	          peg$c33 = /^[^\n\r]/,
	          peg$c34 = peg$classExpectation(["\n", "\r"], true, false),
	          peg$c35 = /^[^A-Za-z0-9]/,
	          peg$c36 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"]], true, false),
	          peg$c37 = /^[^{(]/,
	          peg$c38 = peg$classExpectation(["{", "("], true, false),
	          peg$c39 = peg$otherExpectation("entry"),
	          peg$c40 = "preamble",
	          peg$c41 = peg$literalExpectation("preamble", true),
	          peg$c42 = "string",
	          peg$c43 = peg$literalExpectation("string", true),
	          peg$c44 = function(type, body) { return { enclosed: 'braces', ...body }; },
	          peg$c45 = function(type, body) { return { enclosed: 'parentheses', ...body }; },
	          peg$c46 = function(type, body) { return { type: type.toLowerCase(), ...body, raw: text() }; },
	          peg$c47 = ",",
	          peg$c48 = peg$literalExpectation(",", false),
	          peg$c49 = function(key) { return key; },
	          peg$c50 = function(key, first, assignment) { return assignment; },
	          peg$c51 = function(key, first, rest) { return [first, ...rest]; },
	          peg$c52 = function(key, fields) { return { key, fields: fields || [] }; },
	          peg$c53 = peg$otherExpectation("assignment"),
	          peg$c54 = "=",
	          peg$c55 = peg$literalExpectation("=", false),
	          peg$c56 = function(name, value) { return value; },
	          peg$c57 = function(name, value) { return { name, ...(value ? value : { value: null, datatype: 'null', raw: '' }) }; },
	          peg$c58 = peg$otherExpectation("expression"),
	          peg$c59 = "#",
	          peg$c60 = peg$literalExpectation("#", false),
	          peg$c61 = function(first, value) { return value; },
	          peg$c62 = function(first, rest) { return rest.length > 0 ? { value: [first, ...rest], datatype: 'concatinate', raw: text() } : first; },
	          peg$c63 = peg$otherExpectation("literal"),
	          peg$c64 = "\"",
	          peg$c65 = peg$literalExpectation("\"", false),
	          peg$c66 = function(value) { return { value, datatype: 'quoted',     raw: text() }; },
	          peg$c67 = function(value) { return { value, datatype: 'braced',     raw: text() }; },
	          peg$c68 = function(value) { return { value, datatype: 'number',     raw: text() }; },
	          peg$c69 = function(value) { return { value, datatype: 'identifier', raw: text() }; },
	          peg$c70 = peg$otherExpectation("identifier"),
	          peg$c71 = /^[^=#,{}()[\] \t\n\r]/,
	          peg$c72 = peg$classExpectation(["=", "#", ",", "{", "}", "(", ")", "[", "]", " ", "\t", "\n", "\r"], true, false),
	          peg$c73 = peg$otherExpectation("key for assignment"),
	          peg$c74 = /^[# ]/,
	          peg$c75 = peg$classExpectation(["#", " "], false, false),
	          peg$c76 = peg$otherExpectation("number"),
	          peg$c77 = /^[0-9]/,
	          peg$c78 = peg$classExpectation([["0", "9"]], false, false),
	          peg$c79 = function() { return parseInt(text(), 10); },
	          peg$c80 = peg$otherExpectation("braced value"),
	          peg$c81 = /^[^{}]/,
	          peg$c82 = peg$classExpectation(["{", "}"], true, false),
	          peg$c83 = peg$otherExpectation("quoted string"),
	          peg$c84 = /^[^"{]/,
	          peg$c85 = peg$classExpectation(["\"", "{"], true, false),
	          peg$c86 = "\\\\",
	          peg$c87 = peg$literalExpectation("\\\\", false),
	          peg$c88 = "\\{",
	          peg$c89 = peg$literalExpectation("\\{", false),
	          peg$c90 = "\\}",
	          peg$c91 = peg$literalExpectation("\\}", false),
	          peg$c92 = "\\\"",
	          peg$c93 = peg$literalExpectation("\\\"", false),
	          peg$c94 = peg$otherExpectation("whitespace"),
	          peg$c95 = /^[ \t\n\r]/,
	          peg$c96 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
	          peg$c97 = peg$otherExpectation("end of line"),
	          peg$c98 = "\n",
	          peg$c99 = peg$literalExpectation("\n", false),
	          peg$c100 = "\r\n",
	          peg$c101 = peg$literalExpectation("\r\n", false),
	          peg$c102 = "\r",
	          peg$c103 = peg$literalExpectation("\r", false),
	          peg$c104 = "\u2028",
	          peg$c105 = peg$literalExpectation("\u2028", false),
	          peg$c106 = "\u2029",
	          peg$c107 = peg$literalExpectation("\u2029", false),
	          peg$c108 = peg$anyExpectation(),

	          peg$currPos          = 0,
	          peg$savedPos         = 0,
	          peg$posDetailsCache  = [{ line: 1, column: 1 }],
	          peg$maxFailPos       = 0,
	          peg$maxFailExpected  = [],
	          peg$silentFails      = 0,

	          peg$result;

	      if ("startRule" in options) {
	        if (!(options.startRule in peg$startRuleFunctions)) {
	          throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	        }

	        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	      }

	      function text() {
	        return input.substring(peg$savedPos, peg$currPos);
	      }

	      function peg$literalExpectation(text, ignoreCase) {
	        return { type: "literal", text: text, ignoreCase: ignoreCase };
	      }

	      function peg$classExpectation(parts, inverted, ignoreCase) {
	        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
	      }

	      function peg$anyExpectation() {
	        return { type: "any" };
	      }

	      function peg$endExpectation() {
	        return { type: "end" };
	      }

	      function peg$otherExpectation(description) {
	        return { type: "other", description: description };
	      }

	      function peg$computePosDetails(pos) {
	        var details = peg$posDetailsCache[pos], p;

	        if (details) {
	          return details;
	        } else {
	          p = pos - 1;
	          while (!peg$posDetailsCache[p]) {
	            p--;
	          }

	          details = peg$posDetailsCache[p];
	          details = {
	            line:   details.line,
	            column: details.column
	          };

	          while (p < pos) {
	            if (input.charCodeAt(p) === 10) {
	              details.line++;
	              details.column = 1;
	            } else {
	              details.column++;
	            }

	            p++;
	          }

	          peg$posDetailsCache[pos] = details;
	          return details;
	        }
	      }

	      function peg$computeLocation(startPos, endPos) {
	        var startPosDetails = peg$computePosDetails(startPos),
	            endPosDetails   = peg$computePosDetails(endPos);

	        return {
	          start: {
	            offset: startPos,
	            line:   startPosDetails.line,
	            column: startPosDetails.column
	          },
	          end: {
	            offset: endPos,
	            line:   endPosDetails.line,
	            column: endPosDetails.column
	          }
	        };
	      }

	      function peg$fail(expected) {
	        if (peg$currPos < peg$maxFailPos) { return; }

	        if (peg$currPos > peg$maxFailPos) {
	          peg$maxFailPos = peg$currPos;
	          peg$maxFailExpected = [];
	        }

	        peg$maxFailExpected.push(expected);
	      }

	      function peg$buildStructuredError(expected, found, location) {
	        return new peg$SyntaxError(
	          peg$SyntaxError.buildMessage(expected, found),
	          expected,
	          found,
	          location
	        );
	      }

	      function peg$parseSTART() {
	        var s0, s1, s2;

	        s0 = peg$currPos;
	        s1 = [];
	        s2 = peg$parseITEM();
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$parseITEM();
	        }
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c0(s1);
	        }
	        s0 = s1;

	        return s0;
	      }

	      function peg$parseITEM() {
	        var s0, s1;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        s1 = peg$parsePREAMBLE();
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c2(s1);
	        }
	        s0 = s1;
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          s1 = peg$parseSTRING();
	          if (s1 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c3(s1);
	          }
	          s0 = s1;
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            s1 = peg$parseENTRY();
	            if (s1 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c4(s1);
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              s1 = peg$parseCOMMENT();
	              if (s1 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c5(s1);
	              }
	              s0 = s1;
	            }
	          }
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c1); }
	        }

	        return s0;
	      }

	      function peg$parsePREAMBLE() {
	        var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c7) {
	          s1 = input.substr(peg$currPos, 9);
	          peg$currPos += 9;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c8); }
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parse_();
	          if (s2 !== peg$FAILED) {
	            s3 = peg$currPos;
	            if (input.charCodeAt(peg$currPos) === 40) {
	              s4 = peg$c9;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c10); }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parse_();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseEXPRESSION();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parse_();
	                  if (s7 !== peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 41) {
	                      s8 = peg$c11;
	                      peg$currPos++;
	                    } else {
	                      s8 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c12); }
	                    }
	                    if (s8 !== peg$FAILED) {
	                      peg$savedPos = s3;
	                      s4 = peg$c13(s6);
	                      s3 = s4;
	                    } else {
	                      peg$currPos = s3;
	                      s3 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	            if (s3 === peg$FAILED) {
	              s3 = peg$currPos;
	              if (input.charCodeAt(peg$currPos) === 123) {
	                s4 = peg$c14;
	                peg$currPos++;
	              } else {
	                s4 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c15); }
	              }
	              if (s4 !== peg$FAILED) {
	                s5 = peg$parse_();
	                if (s5 !== peg$FAILED) {
	                  s6 = peg$parseEXPRESSION();
	                  if (s6 !== peg$FAILED) {
	                    s7 = peg$parse_();
	                    if (s7 !== peg$FAILED) {
	                      if (input.charCodeAt(peg$currPos) === 125) {
	                        s8 = peg$c16;
	                        peg$currPos++;
	                      } else {
	                        s8 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c17); }
	                      }
	                      if (s8 !== peg$FAILED) {
	                        peg$savedPos = s3;
	                        s4 = peg$c18(s6);
	                        s3 = s4;
	                      } else {
	                        peg$currPos = s3;
	                        s3 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s3;
	                      s3 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	              if (s3 === peg$FAILED) {
	                s3 = peg$currPos;
	                if (input.charCodeAt(peg$currPos) === 40) {
	                  s4 = peg$c9;
	                  peg$currPos++;
	                } else {
	                  s4 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c10); }
	                }
	                if (s4 !== peg$FAILED) {
	                  s5 = peg$parseBRACED();
	                  if (s5 !== peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 41) {
	                      s6 = peg$c11;
	                      peg$currPos++;
	                    } else {
	                      s6 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c12); }
	                    }
	                    if (s6 !== peg$FAILED) {
	                      peg$savedPos = s3;
	                      s4 = peg$c19(s5);
	                      s3 = s4;
	                    } else {
	                      peg$currPos = s3;
	                      s3 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	                if (s3 === peg$FAILED) {
	                  s3 = peg$currPos;
	                  if (input.charCodeAt(peg$currPos) === 123) {
	                    s4 = peg$c14;
	                    peg$currPos++;
	                  } else {
	                    s4 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c15); }
	                  }
	                  if (s4 !== peg$FAILED) {
	                    s5 = peg$parseBRACED();
	                    if (s5 !== peg$FAILED) {
	                      if (input.charCodeAt(peg$currPos) === 125) {
	                        s6 = peg$c16;
	                        peg$currPos++;
	                      } else {
	                        s6 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c17); }
	                      }
	                      if (s6 !== peg$FAILED) {
	                        peg$savedPos = s3;
	                        s4 = peg$c20(s5);
	                        s3 = s4;
	                      } else {
	                        peg$currPos = s3;
	                        s3 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s3;
	                      s3 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$FAILED;
	                  }
	                }
	              }
	            }
	            if (s3 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c21(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c6); }
	        }

	        return s0;
	      }

	      function peg$parseSTRING() {
	        var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c23) {
	          s1 = input.substr(peg$currPos, 7);
	          peg$currPos += 7;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c24); }
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parse_();
	          if (s2 !== peg$FAILED) {
	            s3 = peg$currPos;
	            if (input.charCodeAt(peg$currPos) === 40) {
	              s4 = peg$c9;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c10); }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parse_();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseASSIGNMENT();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parse_();
	                  if (s7 !== peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 41) {
	                      s8 = peg$c11;
	                      peg$currPos++;
	                    } else {
	                      s8 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c12); }
	                    }
	                    if (s8 !== peg$FAILED) {
	                      peg$savedPos = s3;
	                      s4 = peg$c25(s6);
	                      s3 = s4;
	                    } else {
	                      peg$currPos = s3;
	                      s3 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	            if (s3 === peg$FAILED) {
	              s3 = peg$currPos;
	              if (input.charCodeAt(peg$currPos) === 123) {
	                s4 = peg$c14;
	                peg$currPos++;
	              } else {
	                s4 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c15); }
	              }
	              if (s4 !== peg$FAILED) {
	                s5 = peg$parse_();
	                if (s5 !== peg$FAILED) {
	                  s6 = peg$parseASSIGNMENT();
	                  if (s6 !== peg$FAILED) {
	                    s7 = peg$parse_();
	                    if (s7 !== peg$FAILED) {
	                      if (input.charCodeAt(peg$currPos) === 125) {
	                        s8 = peg$c16;
	                        peg$currPos++;
	                      } else {
	                        s8 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c17); }
	                      }
	                      if (s8 !== peg$FAILED) {
	                        peg$savedPos = s3;
	                        s4 = peg$c25(s6);
	                        s3 = s4;
	                      } else {
	                        peg$currPos = s3;
	                        s3 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s3;
	                      s3 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            }
	            if (s3 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c25(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c22); }
	        }

	        return s0;
	      }

	      function peg$parseCOMMENT() {
	        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        s1 = [];
	        if (peg$c27.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c28); }
	        }
	        if (s2 !== peg$FAILED) {
	          while (s2 !== peg$FAILED) {
	            s1.push(s2);
	            if (peg$c27.test(input.charAt(peg$currPos))) {
	              s2 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s2 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c28); }
	            }
	          }
	        } else {
	          s1 = peg$FAILED;
	        }
	        if (s1 !== peg$FAILED) {
	          s0 = input.substring(s0, peg$currPos);
	        } else {
	          s0 = s1;
	        }
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          s1 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 64) {
	            s2 = peg$c29;
	            peg$currPos++;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c30); }
	          }
	          if (s2 !== peg$FAILED) {
	            s3 = peg$currPos;
	            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {
	              s4 = input.substr(peg$currPos, 7);
	              peg$currPos += 7;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c32); }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$currPos;
	              s6 = peg$parse_();
	              if (s6 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 123) {
	                  s7 = peg$c14;
	                  peg$currPos++;
	                } else {
	                  s7 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c15); }
	                }
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parseBRACED();
	                  if (s8 !== peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 125) {
	                      s9 = peg$c16;
	                      peg$currPos++;
	                    } else {
	                      s9 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c17); }
	                    }
	                    if (s9 !== peg$FAILED) {
	                      s6 = [s6, s7, s8, s9];
	                      s5 = s6;
	                    } else {
	                      peg$currPos = s5;
	                      s5 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	              if (s5 === peg$FAILED) {
	                s5 = peg$currPos;
	                s6 = [];
	                if (peg$c33.test(input.charAt(peg$currPos))) {
	                  s7 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s7 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c34); }
	                }
	                while (s7 !== peg$FAILED) {
	                  s6.push(s7);
	                  if (peg$c33.test(input.charAt(peg$currPos))) {
	                    s7 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s7 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c34); }
	                  }
	                }
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parseLINE_END();
	                  if (s7 !== peg$FAILED) {
	                    s6 = [s6, s7];
	                    s5 = s6;
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              }
	              if (s5 !== peg$FAILED) {
	                s4 = [s4, s5];
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	            if (s3 === peg$FAILED) {
	              s3 = [];
	              if (peg$c35.test(input.charAt(peg$currPos))) {
	                s4 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s4 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c36); }
	              }
	              if (s4 !== peg$FAILED) {
	                while (s4 !== peg$FAILED) {
	                  s3.push(s4);
	                  if (peg$c35.test(input.charAt(peg$currPos))) {
	                    s4 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s4 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c36); }
	                  }
	                }
	              } else {
	                s3 = peg$FAILED;
	              }
	              if (s3 === peg$FAILED) {
	                s3 = peg$currPos;
	                s4 = peg$parseIDENTIFIER();
	                if (s4 !== peg$FAILED) {
	                  s5 = peg$parse_();
	                  if (s5 !== peg$FAILED) {
	                    if (peg$c37.test(input.charAt(peg$currPos))) {
	                      s6 = input.charAt(peg$currPos);
	                      peg$currPos++;
	                    } else {
	                      s6 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c38); }
	                    }
	                    if (s6 !== peg$FAILED) {
	                      s4 = [s4, s5, s6];
	                      s3 = s4;
	                    } else {
	                      peg$currPos = s3;
	                      s3 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              }
	            }
	            if (s3 !== peg$FAILED) {
	              s2 = [s2, s3];
	              s1 = s2;
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	          if (s1 !== peg$FAILED) {
	            s0 = input.substring(s0, peg$currPos);
	          } else {
	            s0 = s1;
	          }
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c26); }
	        }

	        return s0;
	      }

	      function peg$parseENTRY() {
	        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 64) {
	          s1 = peg$c29;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c30); }
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$currPos;
	          peg$silentFails++;
	          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {
	            s3 = input.substr(peg$currPos, 7);
	            peg$currPos += 7;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c32); }
	          }
	          if (s3 === peg$FAILED) {
	            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c40) {
	              s3 = input.substr(peg$currPos, 8);
	              peg$currPos += 8;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c41); }
	            }
	            if (s3 === peg$FAILED) {
	              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c42) {
	                s3 = input.substr(peg$currPos, 6);
	                peg$currPos += 6;
	              } else {
	                s3 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c43); }
	              }
	            }
	          }
	          peg$silentFails--;
	          if (s3 === peg$FAILED) {
	            s2 = void 0;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	          if (s2 !== peg$FAILED) {
	            s3 = peg$parseIDENTIFIER();
	            if (s3 !== peg$FAILED) {
	              s4 = peg$parse_();
	              if (s4 !== peg$FAILED) {
	                s5 = peg$currPos;
	                if (input.charCodeAt(peg$currPos) === 123) {
	                  s6 = peg$c14;
	                  peg$currPos++;
	                } else {
	                  s6 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c15); }
	                }
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parse_();
	                  if (s7 !== peg$FAILED) {
	                    s8 = peg$parseENTRY_BODY();
	                    if (s8 !== peg$FAILED) {
	                      s9 = peg$parse_();
	                      if (s9 !== peg$FAILED) {
	                        if (input.charCodeAt(peg$currPos) === 125) {
	                          s10 = peg$c16;
	                          peg$currPos++;
	                        } else {
	                          s10 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c17); }
	                        }
	                        if (s10 !== peg$FAILED) {
	                          peg$savedPos = s5;
	                          s6 = peg$c44(s3, s8);
	                          s5 = s6;
	                        } else {
	                          peg$currPos = s5;
	                          s5 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s5;
	                        s5 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s5;
	                      s5 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	                if (s5 === peg$FAILED) {
	                  s5 = peg$currPos;
	                  if (input.charCodeAt(peg$currPos) === 40) {
	                    s6 = peg$c9;
	                    peg$currPos++;
	                  } else {
	                    s6 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
	                  }
	                  if (s6 !== peg$FAILED) {
	                    s7 = peg$parse_();
	                    if (s7 !== peg$FAILED) {
	                      s8 = peg$parseENTRY_BODY();
	                      if (s8 !== peg$FAILED) {
	                        s9 = peg$parse_();
	                        if (s9 !== peg$FAILED) {
	                          if (input.charCodeAt(peg$currPos) === 41) {
	                            s10 = peg$c11;
	                            peg$currPos++;
	                          } else {
	                            s10 = peg$FAILED;
	                            if (peg$silentFails === 0) { peg$fail(peg$c12); }
	                          }
	                          if (s10 !== peg$FAILED) {
	                            peg$savedPos = s5;
	                            s6 = peg$c45(s3, s8);
	                            s5 = s6;
	                          } else {
	                            peg$currPos = s5;
	                            s5 = peg$FAILED;
	                          }
	                        } else {
	                          peg$currPos = s5;
	                          s5 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s5;
	                        s5 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s5;
	                      s5 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$FAILED;
	                  }
	                }
	                if (s5 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c46(s3, s5);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c39); }
	        }

	        return s0;
	      }

	      function peg$parseENTRY_BODY() {
	        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

	        s0 = peg$currPos;
	        s1 = peg$currPos;
	        s2 = peg$parseIDENTIFIER();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parse_();
	          if (s3 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 44) {
	              s4 = peg$c47;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c48); }
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s1;
	              s2 = peg$c49(s2);
	              s1 = s2;
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	        if (s1 === peg$FAILED) {
	          s1 = null;
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parse_();
	          if (s2 !== peg$FAILED) {
	            s3 = peg$currPos;
	            s4 = peg$parseASSIGNMENT();
	            if (s4 !== peg$FAILED) {
	              s5 = [];
	              s6 = peg$currPos;
	              s7 = peg$parse_();
	              if (s7 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 44) {
	                  s8 = peg$c47;
	                  peg$currPos++;
	                } else {
	                  s8 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c48); }
	                }
	                if (s8 !== peg$FAILED) {
	                  s9 = peg$parse_();
	                  if (s9 !== peg$FAILED) {
	                    s10 = peg$parseASSIGNMENT();
	                    if (s10 !== peg$FAILED) {
	                      peg$savedPos = s6;
	                      s7 = peg$c50(s1, s4, s10);
	                      s6 = s7;
	                    } else {
	                      peg$currPos = s6;
	                      s6 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s6;
	                    s6 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s6;
	                  s6 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s6;
	                s6 = peg$FAILED;
	              }
	              while (s6 !== peg$FAILED) {
	                s5.push(s6);
	                s6 = peg$currPos;
	                s7 = peg$parse_();
	                if (s7 !== peg$FAILED) {
	                  if (input.charCodeAt(peg$currPos) === 44) {
	                    s8 = peg$c47;
	                    peg$currPos++;
	                  } else {
	                    s8 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c48); }
	                  }
	                  if (s8 !== peg$FAILED) {
	                    s9 = peg$parse_();
	                    if (s9 !== peg$FAILED) {
	                      s10 = peg$parseASSIGNMENT();
	                      if (s10 !== peg$FAILED) {
	                        peg$savedPos = s6;
	                        s7 = peg$c50(s1, s4, s10);
	                        s6 = s7;
	                      } else {
	                        peg$currPos = s6;
	                        s6 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s6;
	                      s6 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s6;
	                    s6 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s6;
	                  s6 = peg$FAILED;
	                }
	              }
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s3;
	                s4 = peg$c51(s1, s4, s5);
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	            if (s3 === peg$FAILED) {
	              s3 = null;
	            }
	            if (s3 !== peg$FAILED) {
	              s4 = peg$parse_();
	              if (s4 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 44) {
	                  s5 = peg$c47;
	                  peg$currPos++;
	                } else {
	                  s5 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c48); }
	                }
	                if (s5 === peg$FAILED) {
	                  s5 = null;
	                }
	                if (s5 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c52(s1, s3);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }

	        return s0;
	      }

	      function peg$parseASSIGNMENT() {
	        var s0, s1, s2, s3, s4, s5, s6;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        s1 = peg$parseIDENTIFIER_LEFT();
	        if (s1 !== peg$FAILED) {
	          s2 = peg$currPos;
	          s3 = peg$parse_();
	          if (s3 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 61) {
	              s4 = peg$c54;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c55); }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parse_();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseEXPRESSION();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s2;
	                  s3 = peg$c56(s1, s6);
	                  s2 = s3;
	                } else {
	                  peg$currPos = s2;
	                  s2 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s2;
	                s2 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	          if (s2 === peg$FAILED) {
	            s2 = null;
	          }
	          if (s2 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c57(s1, s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c53); }
	        }

	        return s0;
	      }

	      function peg$parseEXPRESSION() {
	        var s0, s1, s2, s3, s4, s5, s6, s7;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        s1 = peg$parseLITERAL();
	        if (s1 !== peg$FAILED) {
	          s2 = [];
	          s3 = peg$currPos;
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 35) {
	              s5 = peg$c59;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c60); }
	            }
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parse_();
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parseLITERAL();
	                if (s7 !== peg$FAILED) {
	                  peg$savedPos = s3;
	                  s4 = peg$c61(s1, s7);
	                  s3 = s4;
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          while (s3 !== peg$FAILED) {
	            s2.push(s3);
	            s3 = peg$currPos;
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 35) {
	                s5 = peg$c59;
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c60); }
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parse_();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parseLITERAL();
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s3;
	                    s4 = peg$c61(s1, s7);
	                    s3 = s4;
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          }
	          if (s2 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c62(s1, s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c58); }
	        }

	        return s0;
	      }

	      function peg$parseLITERAL() {
	        var s0, s1, s2, s3;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 34) {
	          s1 = peg$c64;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c65); }
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parseQUOTED();
	          if (s2 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 34) {
	              s3 = peg$c64;
	              peg$currPos++;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c65); }
	            }
	            if (s3 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c66(s2);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 123) {
	            s1 = peg$c14;
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c15); }
	          }
	          if (s1 !== peg$FAILED) {
	            s2 = peg$parseBRACED();
	            if (s2 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 125) {
	                s3 = peg$c16;
	                peg$currPos++;
	              } else {
	                s3 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c17); }
	              }
	              if (s3 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c67(s2);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            s1 = peg$parseNUMBER();
	            if (s1 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c68(s1);
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              s1 = peg$parseIDENTIFIER();
	              if (s1 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c69(s1);
	              }
	              s0 = s1;
	            }
	          }
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c63); }
	        }

	        return s0;
	      }

	      function peg$parseIDENTIFIER() {
	        var s0, s1, s2;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        s1 = [];
	        if (peg$c71.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c72); }
	        }
	        if (s2 !== peg$FAILED) {
	          while (s2 !== peg$FAILED) {
	            s1.push(s2);
	            if (peg$c71.test(input.charAt(peg$currPos))) {
	              s2 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s2 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c72); }
	            }
	          }
	        } else {
	          s1 = peg$FAILED;
	        }
	        if (s1 !== peg$FAILED) {
	          s0 = input.substring(s0, peg$currPos);
	        } else {
	          s0 = s1;
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c70); }
	        }

	        return s0;
	      }

	      function peg$parseIDENTIFIER_LEFT() {
	        var s0, s1, s2, s3, s4, s5;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        s1 = peg$currPos;
	        s2 = peg$parseIDENTIFIER();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          s4 = [];
	          if (peg$c74.test(input.charAt(peg$currPos))) {
	            s5 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c75); }
	          }
	          if (s5 !== peg$FAILED) {
	            while (s5 !== peg$FAILED) {
	              s4.push(s5);
	              if (peg$c74.test(input.charAt(peg$currPos))) {
	                s5 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c75); }
	              }
	            }
	          } else {
	            s4 = peg$FAILED;
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseIDENTIFIER_LEFT();
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s2 = [s2, s3];
	            s1 = s2;
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	        if (s1 !== peg$FAILED) {
	          s0 = input.substring(s0, peg$currPos);
	        } else {
	          s0 = s1;
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c73); }
	        }

	        return s0;
	      }

	      function peg$parseNUMBER() {
	        var s0, s1, s2;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        s1 = [];
	        if (peg$c77.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c78); }
	        }
	        if (s2 !== peg$FAILED) {
	          while (s2 !== peg$FAILED) {
	            s1.push(s2);
	            if (peg$c77.test(input.charAt(peg$currPos))) {
	              s2 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s2 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c78); }
	            }
	          }
	        } else {
	          s1 = peg$FAILED;
	        }
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c79();
	        }
	        s0 = s1;
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c76); }
	        }

	        return s0;
	      }

	      function peg$parseBRACED() {
	        var s0, s1, s2, s3, s4, s5, s6, s7;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        s1 = peg$currPos;
	        s2 = [];
	        s3 = peg$parseESCAPED_CHAR();
	        if (s3 === peg$FAILED) {
	          if (peg$c81.test(input.charAt(peg$currPos))) {
	            s3 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c82); }
	          }
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$parseESCAPED_CHAR();
	          if (s3 === peg$FAILED) {
	            if (peg$c81.test(input.charAt(peg$currPos))) {
	              s3 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c82); }
	            }
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 123) {
	            s4 = peg$c14;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c15); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseBRACED();
	            if (s5 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 125) {
	                s6 = peg$c16;
	                peg$currPos++;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c17); }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parseBRACED();
	                if (s7 !== peg$FAILED) {
	                  s4 = [s4, s5, s6, s7];
	                  s3 = s4;
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s2 = [s2, s3];
	            s1 = s2;
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	        if (s1 !== peg$FAILED) {
	          s0 = input.substring(s0, peg$currPos);
	        } else {
	          s0 = s1;
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c80); }
	        }

	        return s0;
	      }

	      function peg$parseQUOTED() {
	        var s0, s1, s2, s3, s4, s5, s6, s7;

	        peg$silentFails++;
	        s0 = peg$currPos;
	        s1 = peg$currPos;
	        s2 = [];
	        s3 = peg$parseESCAPED_CHAR();
	        if (s3 === peg$FAILED) {
	          if (peg$c84.test(input.charAt(peg$currPos))) {
	            s3 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c85); }
	          }
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$parseESCAPED_CHAR();
	          if (s3 === peg$FAILED) {
	            if (peg$c84.test(input.charAt(peg$currPos))) {
	              s3 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c85); }
	            }
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 123) {
	            s4 = peg$c14;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c15); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$currPos;
	            s6 = peg$parseBRACED();
	            if (s6 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 125) {
	                s7 = peg$c16;
	                peg$currPos++;
	              } else {
	                s7 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c17); }
	              }
	              if (s7 !== peg$FAILED) {
	                s6 = [s6, s7];
	                s5 = s6;
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	            if (s5 === peg$FAILED) {
	              s5 = null;
	            }
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parseQUOTED();
	              if (s6 !== peg$FAILED) {
	                s4 = [s4, s5, s6];
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s2 = [s2, s3];
	            s1 = s2;
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	        if (s1 !== peg$FAILED) {
	          s0 = input.substring(s0, peg$currPos);
	        } else {
	          s0 = s1;
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c83); }
	        }

	        return s0;
	      }

	      function peg$parseESCAPED_CHAR() {
	        var s0;

	        if (input.substr(peg$currPos, 2) === peg$c86) {
	          s0 = peg$c86;
	          peg$currPos += 2;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c87); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.substr(peg$currPos, 2) === peg$c88) {
	            s0 = peg$c88;
	            peg$currPos += 2;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c89); }
	          }
	          if (s0 === peg$FAILED) {
	            if (input.substr(peg$currPos, 2) === peg$c90) {
	              s0 = peg$c90;
	              peg$currPos += 2;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c91); }
	            }
	            if (s0 === peg$FAILED) {
	              if (input.substr(peg$currPos, 2) === peg$c92) {
	                s0 = peg$c92;
	                peg$currPos += 2;
	              } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c93); }
	              }
	            }
	          }
	        }

	        return s0;
	      }

	      function peg$parse_() {
	        var s0, s1;

	        peg$silentFails++;
	        s0 = [];
	        if (peg$c95.test(input.charAt(peg$currPos))) {
	          s1 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c96); }
	        }
	        while (s1 !== peg$FAILED) {
	          s0.push(s1);
	          if (peg$c95.test(input.charAt(peg$currPos))) {
	            s1 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c96); }
	          }
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c94); }
	        }

	        return s0;
	      }

	      function peg$parseLINE_END() {
	        var s0, s1;

	        peg$silentFails++;
	        if (input.charCodeAt(peg$currPos) === 10) {
	          s0 = peg$c98;
	          peg$currPos++;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c99); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.substr(peg$currPos, 2) === peg$c100) {
	            s0 = peg$c100;
	            peg$currPos += 2;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c101); }
	          }
	          if (s0 === peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 13) {
	              s0 = peg$c102;
	              peg$currPos++;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c103); }
	            }
	            if (s0 === peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 8232) {
	                s0 = peg$c104;
	                peg$currPos++;
	              } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c105); }
	              }
	              if (s0 === peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 8233) {
	                  s0 = peg$c106;
	                  peg$currPos++;
	                } else {
	                  s0 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c107); }
	                }
	                if (s0 === peg$FAILED) {
	                  s0 = peg$currPos;
	                  peg$silentFails++;
	                  if (input.length > peg$currPos) {
	                    s1 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c108); }
	                  }
	                  peg$silentFails--;
	                  if (s1 === peg$FAILED) {
	                    s0 = void 0;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                }
	              }
	            }
	          }
	        }
	        peg$silentFails--;
	        if (s0 === peg$FAILED) {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c97); }
	        }

	        return s0;
	      }

	      peg$result = peg$startRuleFunction();

	      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	        return peg$result;
	      } else {
	        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	          peg$fail(peg$endExpectation());
	        }

	        throw peg$buildStructuredError(
	          peg$maxFailExpected,
	          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
	          peg$maxFailPos < input.length
	            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
	            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
	        );
	      }
	    }

	    return {
	      SyntaxError: peg$SyntaxError,
	      parse:       peg$parse
	    };
	  })();

	  /* jshint node: true, esversion: 6, unused: true */

	  const STRINGS = {
	  	jan: 'January',
	  	feb: 'February',
	  	mar: 'March',
	  	apr: 'April',
	  	may: 'May',
	  	jun: 'June',
	  	jul: 'July',
	  	aug: 'August',
	  	sep: 'September',
	  	oct: 'October',
	  	nov: 'November',
	  	dec: 'December',
	  };

	  const parse = str => parser.parse(str);

	  const stripMatchingBraces = str => { // remove matching curly braces, excluding escaped braces
	  	while(str.match(/(^|[^\\])\{.*?([^\\])\}/s)) {
	  		str = str.replace(/(^|[^\\])\{(.*?)([^\\])\}/s, '$1$2$3');
	  	}
	  	return str;
	  };

	  const entries = str => {
	  	let items = parse(str),
	  		entries = [],
	  		strings = { ... STRINGS},
	  		evaluate = (datatype, value) => {
	  			if (datatype === 'number') {
	  				return value;
	  			} else if (datatype === 'quoted' || datatype === 'braced') {
	  				return stripMatchingBraces(value)
	  					.replace(/\\(["'%@{}()_])/g, '$1'); // unescape characters
	  			} else if (datatype === 'identifier') {
	  				return strings[value] || '';
	  			} else if (datatype === 'concatinate') {
	  				return value.map(({ datatype, value }) => evaluate(datatype, value)).join('');
	  			} else if (datatype === 'null') {
	  				return null;
	  			}
	  		};
	  	for (let item of items) {
	  		if (item.itemtype === 'string') {
	  			strings[item.name] = evaluate(item.datatype, item.value);
	  		} else if (item.itemtype === 'entry') {
	  			let entry = { key: item.key, type: item.type };
	  			for (let field of item.fields) {
	  				entry[field.name.toUpperCase()] = evaluate(field.datatype, field.value);
	  			}
	  			entries.push(entry);
	  		}
	  	}
	  	return entries;
	  };

	  var index = { parse, entries };

	  exports.parse = parse;
	  exports.entries = entries;
	  exports.default = index;

	  Object.defineProperty(exports, '__esModule', { value: true });

	})));
	});

	var parser = unwrapExports(bibtexParse);

	var unicode = [ [ /([^\\]|^)\u{0023}/gu,
	    "$1\\#" ],
	  [ /([^\\]|^)\u{0024}/gu,
	    "$1\\$" ],
	  [ /([^\\]|^)\u{0025}/gu,
	    "$1\\%" ],
	  [ /([^\\]|^)\u{0026}/gu,
	    "$1\\&" ],
	  [ /([^\\]|^)\u{0027}/gu,
	    "$1'" ],
	  [ /([^\\]|^)\u{0040}/gu,
	    "$1\\@" ],
	  [ /([^\\]|^)\u{002A}/gu,
	    "$1\\textasteriskcentered" ],
	  [ /([^\\]|^)\u{005E}/gu,
	    "$1\\^{}" ],
	  [ /([^\\]|^)\u{005F}/gu,
	    "$1\\_" ],
	  [ /([^\\]|^)\u{007C}/gu,
	    "$1\\vert{}" ],
	  [ /([^\\]|^)\u{00A0}/gu,
	    "$1~" ],
	  [ /([^\\]|^)\u{00A1}/gu,
	    "$1\\textexclamdown{}" ],
	  [ /([^\\]|^)\u{00A2}/gu,
	    "$1\\textcent{}" ],
	  [ /([^\\]|^)\u{00A3}/gu,
	    "$1\\textsterling{}" ],
	  [ /([^\\]|^)\u{00A4}/gu,
	    "$1\\textcurrency{}" ],
	  [ /([^\\]|^)\u{00A5}/gu,
	    "$1\\textyen{}" ],
	  [ /([^\\]|^)\u{00A6}/gu,
	    "$1\\textbrokenbar{}" ],
	  [ /([^\\]|^)\u{00A7}/gu,
	    "$1\\textsection{}" ],
	  [ /([^\\]|^)\u{00A8}/gu,
	    "$1\\textasciidieresis{}" ],
	  [ /([^\\]|^)\u{00A9}/gu,
	    "$1\\textcopyright{}" ],
	  [ /([^\\]|^)\u{00AA}/gu,
	    "$1\\textordfeminine{}" ],
	  [ /([^\\]|^)\u{00AB}/gu,
	    "$1\\guillemotleft{}" ],
	  [ /([^\\]|^)\u{00AC}/gu,
	    "$1\\lnot{}" ],
	  [ /([^\\]|^)\u{00AD}/gu,
	    "$1\\-" ],
	  [ /([^\\]|^)\u{00AE}/gu,
	    "$1\\textregistered{}" ],
	  [ /([^\\]|^)\u{00AF}/gu,
	    "$1\\textasciimacron{}" ],
	  [ /([^\\]|^)\u{00B0}/gu,
	    "$1\\textdegree{}" ],
	  [ /([^\\]|^)\u{00B1}/gu,
	    "$1\\pm{}" ],
	  [ /([^\\]|^)\u{00B2}/gu,
	    "$1\\ensuremath{^2}" ],
	  [ /([^\\]|^)\u{00B3}/gu,
	    "$1\\ensuremath{^3}" ],
	  [ /([^\\]|^)\u{00B4}/gu,
	    "$1\\textasciiacute{}" ],
	  [ /([^\\]|^)\u{00B5}/gu,
	    "$1\\mathrm{\\mu}" ],
	  [ /([^\\]|^)\u{00B6}/gu,
	    "$1\\textparagraph{}" ],
	  [ /([^\\]|^)\u{00B7}/gu,
	    "$1\\cdot{}" ],
	  [ /([^\\]|^)\u{00B8}/gu,
	    "$1\\c{}" ],
	  [ /([^\\]|^)\u{00B9}/gu,
	    "$1\\ensuremath{^1}" ],
	  [ /([^\\]|^)\u{00BA}/gu,
	    "$1\\textordmasculine{}" ],
	  [ /([^\\]|^)\u{00BB}/gu,
	    "$1\\guillemotright{}" ],
	  [ /([^\\]|^)\u{00BC}/gu,
	    "$1\\textonequarter{}" ],
	  [ /([^\\]|^)\u{00BD}/gu,
	    "$1\\textonehalf{}" ],
	  [ /([^\\]|^)\u{00BE}/gu,
	    "$1\\textthreequarters{}" ],
	  [ /([^\\]|^)\u{00BF}/gu,
	    "$1\\textquestiondown{}" ],
	  [ /([^\\]|^)\u{00C0}/gu,
	    "$1\\`{A}" ],
	  [ /([^\\]|^)\u{00C1}/gu,
	    "$1\\'{A}" ],
	  [ /([^\\]|^)\u{00C2}/gu,
	    "$1\\^{A}" ],
	  [ /([^\\]|^)\u{00C3}/gu,
	    "$1\\~{A}" ],
	  [ /([^\\]|^)\u{00C4}/gu,
	    "$1\\\"{A}" ],
	  [ /([^\\]|^)\u{00C5}/gu,
	    "$1\\AA{}" ],
	  [ /([^\\]|^)\u{00C6}/gu,
	    "$1\\AE{}" ],
	  [ /([^\\]|^)\u{00C7}/gu,
	    "$1\\c{C}" ],
	  [ /([^\\]|^)\u{00C8}/gu,
	    "$1\\`{E}" ],
	  [ /([^\\]|^)\u{00C9}/gu,
	    "$1\\'{E}" ],
	  [ /([^\\]|^)\u{00CA}/gu,
	    "$1\\^{E}" ],
	  [ /([^\\]|^)\u{00CB}/gu,
	    "$1\\\"{E}" ],
	  [ /([^\\]|^)\u{00CC}/gu,
	    "$1\\`{I}" ],
	  [ /([^\\]|^)\u{00CD}/gu,
	    "$1\\'{I}" ],
	  [ /([^\\]|^)\u{00CE}/gu,
	    "$1\\^{I}" ],
	  [ /([^\\]|^)\u{00CF}/gu,
	    "$1\\\"{I}" ],
	  [ /([^\\]|^)\u{00D0}/gu,
	    "$1\\DH{}" ],
	  [ /([^\\]|^)\u{00D1}/gu,
	    "$1\\~{N}" ],
	  [ /([^\\]|^)\u{00D2}/gu,
	    "$1\\`{O}" ],
	  [ /([^\\]|^)\u{00D3}/gu,
	    "$1\\'{O}" ],
	  [ /([^\\]|^)\u{00D4}/gu,
	    "$1\\^{O}" ],
	  [ /([^\\]|^)\u{00D5}/gu,
	    "$1\\~{O}" ],
	  [ /([^\\]|^)\u{00D6}/gu,
	    "$1\\\"{O}" ],
	  [ /([^\\]|^)\u{00D7}/gu,
	    "$1\\texttimes{}" ],
	  [ /([^\\]|^)\u{00D8}/gu,
	    "$1\\O{}" ],
	  [ /([^\\]|^)\u{00D9}/gu,
	    "$1\\`{U}" ],
	  [ /([^\\]|^)\u{00DA}/gu,
	    "$1\\'{U}" ],
	  [ /([^\\]|^)\u{00DB}/gu,
	    "$1\\^{U}" ],
	  [ /([^\\]|^)\u{00DC}/gu,
	    "$1\\\"{U}" ],
	  [ /([^\\]|^)\u{00DD}/gu,
	    "$1\\'{Y}" ],
	  [ /([^\\]|^)\u{00DE}/gu,
	    "$1\\TH{}" ],
	  [ /([^\\]|^)\u{00DF}/gu,
	    "$1\\ss{}" ],
	  [ /([^\\]|^)\u{00E0}/gu,
	    "$1\\`{a}" ],
	  [ /([^\\]|^)\u{00E1}/gu,
	    "$1\\'{a}" ],
	  [ /([^\\]|^)\u{00E2}/gu,
	    "$1\\^{a}" ],
	  [ /([^\\]|^)\u{00E3}/gu,
	    "$1\\~{a}" ],
	  [ /([^\\]|^)\u{00E4}/gu,
	    "$1\\\"{a}" ],
	  [ /([^\\]|^)\u{00E5}/gu,
	    "$1\\aa{}" ],
	  [ /([^\\]|^)\u{00E6}/gu,
	    "$1\\ae{}" ],
	  [ /([^\\]|^)\u{00E7}/gu,
	    "$1\\c{c}" ],
	  [ /([^\\]|^)\u{00E8}/gu,
	    "$1\\`{e}" ],
	  [ /([^\\]|^)\u{00E9}/gu,
	    "$1\\'{e}" ],
	  [ /([^\\]|^)\u{00EA}/gu,
	    "$1\\^{e}" ],
	  [ /([^\\]|^)\u{00EB}/gu,
	    "$1\\\"{e}" ],
	  [ /([^\\]|^)\u{00EC}/gu,
	    "$1\\`{\\i}" ],
	  [ /([^\\]|^)\u{00ED}/gu,
	    "$1\\'{\\i}" ],
	  [ /([^\\]|^)\u{00EE}/gu,
	    "$1\\^{\\i}" ],
	  [ /([^\\]|^)\u{00EF}/gu,
	    "$1\\\"{\\i}" ],
	  [ /([^\\]|^)\u{00F0}/gu,
	    "$1\\dh{}" ],
	  [ /([^\\]|^)\u{00F1}/gu,
	    "$1\\~{n}" ],
	  [ /([^\\]|^)\u{00F2}/gu,
	    "$1\\`{o}" ],
	  [ /([^\\]|^)\u{00F3}/gu,
	    "$1\\'{o}" ],
	  [ /([^\\]|^)\u{00F4}/gu,
	    "$1\\^{o}" ],
	  [ /([^\\]|^)\u{00F5}/gu,
	    "$1\\~{o}" ],
	  [ /([^\\]|^)\u{00F6}/gu,
	    "$1\\\"{o}" ],
	  [ /([^\\]|^)\u{00F7}/gu,
	    "$1\\div{}" ],
	  [ /([^\\]|^)\u{00F8}/gu,
	    "$1\\o{}" ],
	  [ /([^\\]|^)\u{00F9}/gu,
	    "$1\\`{u}" ],
	  [ /([^\\]|^)\u{00FA}/gu,
	    "$1\\'{u}" ],
	  [ /([^\\]|^)\u{00FB}/gu,
	    "$1\\^{u}" ],
	  [ /([^\\]|^)\u{00FC}/gu,
	    "$1\\\"{u}" ],
	  [ /([^\\]|^)\u{00FD}/gu,
	    "$1\\'{y}" ],
	  [ /([^\\]|^)\u{00FE}/gu,
	    "$1\\th{}" ],
	  [ /([^\\]|^)\u{00FF}/gu,
	    "$1\\\"{y}" ],
	  [ /([^\\]|^)\u{0100}/gu,
	    "$1\\={A}" ],
	  [ /([^\\]|^)\u{0101}/gu,
	    "$1\\={a}" ],
	  [ /([^\\]|^)\u{0102}/gu,
	    "$1\\u{A}" ],
	  [ /([^\\]|^)\u{0103}/gu,
	    "$1\\u{a}" ],
	  [ /([^\\]|^)\u{0104}/gu,
	    "$1\\k{A}" ],
	  [ /([^\\]|^)\u{0105}/gu,
	    "$1\\k{a}" ],
	  [ /([^\\]|^)\u{0106}/gu,
	    "$1\\'{C}" ],
	  [ /([^\\]|^)\u{0107}/gu,
	    "$1\\'{c}" ],
	  [ /([^\\]|^)\u{0108}/gu,
	    "$1\\^{C}" ],
	  [ /([^\\]|^)\u{0109}/gu,
	    "$1\\^{c}" ],
	  [ /([^\\]|^)\u{010A}/gu,
	    "$1\\.{C}" ],
	  [ /([^\\]|^)\u{010B}/gu,
	    "$1\\.{c}" ],
	  [ /([^\\]|^)\u{010C}/gu,
	    "$1\\v{C}" ],
	  [ /([^\\]|^)\u{010D}/gu,
	    "$1\\v{c}" ],
	  [ /([^\\]|^)\u{010E}/gu,
	    "$1\\v{D}" ],
	  [ /([^\\]|^)\u{010F}/gu,
	    "$1\\v{d}" ],
	  [ /([^\\]|^)\u{0110}/gu,
	    "$1\\DJ{}" ],
	  [ /([^\\]|^)\u{0111}/gu,
	    "$1\\dj{}" ],
	  [ /([^\\]|^)\u{0112}/gu,
	    "$1\\={E}" ],
	  [ /([^\\]|^)\u{0113}/gu,
	    "$1\\={e}" ],
	  [ /([^\\]|^)\u{0114}/gu,
	    "$1\\u{E}" ],
	  [ /([^\\]|^)\u{0115}/gu,
	    "$1\\u{e}" ],
	  [ /([^\\]|^)\u{0116}/gu,
	    "$1\\.{E}" ],
	  [ /([^\\]|^)\u{0117}/gu,
	    "$1\\.{e}" ],
	  [ /([^\\]|^)\u{0118}/gu,
	    "$1\\k{E}" ],
	  [ /([^\\]|^)\u{0119}/gu,
	    "$1\\k{e}" ],
	  [ /([^\\]|^)\u{011A}/gu,
	    "$1\\v{E}" ],
	  [ /([^\\]|^)\u{011B}/gu,
	    "$1\\v{e}" ],
	  [ /([^\\]|^)\u{011C}/gu,
	    "$1\\^{G}" ],
	  [ /([^\\]|^)\u{011D}/gu,
	    "$1\\^{g}" ],
	  [ /([^\\]|^)\u{011E}/gu,
	    "$1\\u{G}" ],
	  [ /([^\\]|^)\u{011F}/gu,
	    "$1\\u{g}" ],
	  [ /([^\\]|^)\u{0120}/gu,
	    "$1\\.{G}" ],
	  [ /([^\\]|^)\u{0121}/gu,
	    "$1\\.{g}" ],
	  [ /([^\\]|^)\u{0122}/gu,
	    "$1\\c{G}" ],
	  [ /([^\\]|^)\u{0123}/gu,
	    "$1\\c{g}" ],
	  [ /([^\\]|^)\u{0124}/gu,
	    "$1\\^{H}" ],
	  [ /([^\\]|^)\u{0125}/gu,
	    "$1\\^{h}" ],
	  [ /([^\\]|^)\u{0126}/gu,
	    "$1{\\fontencoding{LELA}\\selectfont\\char40}" ],
	  [ /([^\\]|^)\u{0127}/gu,
	    "$1\\Elzxh{}" ],
	  [ /([^\\]|^)\u{0128}/gu,
	    "$1\\~{I}" ],
	  [ /([^\\]|^)\u{0129}/gu,
	    "$1\\~{\\i}" ],
	  [ /([^\\]|^)\u{012A}/gu,
	    "$1\\={I}" ],
	  [ /([^\\]|^)\u{012B}/gu,
	    "$1\\={\\i}" ],
	  [ /([^\\]|^)\u{012C}/gu,
	    "$1\\u{I}" ],
	  [ /([^\\]|^)\u{012D}/gu,
	    "$1\\u{\\i}" ],
	  [ /([^\\]|^)\u{012E}/gu,
	    "$1\\k{I}" ],
	  [ /([^\\]|^)\u{012F}/gu,
	    "$1\\k{i}" ],
	  [ /([^\\]|^)\u{0130}/gu,
	    "$1\\.{I}" ],
	  [ /([^\\]|^)\u{0131}/gu,
	    "$1\\i{}" ],
	  [ /([^\\]|^)\u{0132}/gu,
	    "$1IJ" ],
	  [ /([^\\]|^)\u{0133}/gu,
	    "$1ij" ],
	  [ /([^\\]|^)\u{0134}/gu,
	    "$1\\^{J}" ],
	  [ /([^\\]|^)\u{0135}/gu,
	    "$1\\^{\\j}" ],
	  [ /([^\\]|^)\u{0136}/gu,
	    "$1\\c{K}" ],
	  [ /([^\\]|^)\u{0137}/gu,
	    "$1\\c{k}" ],
	  [ /([^\\]|^)\u{0138}/gu,
	    "$1{\\fontencoding{LELA}\\selectfont\\char91}" ],
	  [ /([^\\]|^)\u{0139}/gu,
	    "$1\\'{L}" ],
	  [ /([^\\]|^)\u{013A}/gu,
	    "$1\\'{l}" ],
	  [ /([^\\]|^)\u{013B}/gu,
	    "$1\\c{L}" ],
	  [ /([^\\]|^)\u{013C}/gu,
	    "$1\\c{l}" ],
	  [ /([^\\]|^)\u{013D}/gu,
	    "$1\\v{L}" ],
	  [ /([^\\]|^)\u{013E}/gu,
	    "$1\\v{l}" ],
	  [ /([^\\]|^)\u{013F}/gu,
	    "$1{\\fontencoding{LELA}\\selectfont\\char201}" ],
	  [ /([^\\]|^)\u{0140}/gu,
	    "$1{\\fontencoding{LELA}\\selectfont\\char202}" ],
	  [ /([^\\]|^)\u{0141}/gu,
	    "$1\\L{}" ],
	  [ /([^\\]|^)\u{0142}/gu,
	    "$1\\l{}" ],
	  [ /([^\\]|^)\u{0143}/gu,
	    "$1\\'{N}" ],
	  [ /([^\\]|^)\u{0144}/gu,
	    "$1\\'{n}" ],
	  [ /([^\\]|^)\u{0145}/gu,
	    "$1\\c{N}" ],
	  [ /([^\\]|^)\u{0146}/gu,
	    "$1\\c{n}" ],
	  [ /([^\\]|^)\u{0147}/gu,
	    "$1\\v{N}" ],
	  [ /([^\\]|^)\u{0148}/gu,
	    "$1\\v{n}" ],
	  [ /([^\\]|^)\u{0149}/gu,
	    "$1'n" ],
	  [ /([^\\]|^)\u{014A}/gu,
	    "$1\\NG{}" ],
	  [ /([^\\]|^)\u{014B}/gu,
	    "$1\\ng{}" ],
	  [ /([^\\]|^)\u{014C}/gu,
	    "$1\\={O}" ],
	  [ /([^\\]|^)\u{014D}/gu,
	    "$1\\={o}" ],
	  [ /([^\\]|^)\u{014E}/gu,
	    "$1\\u{O}" ],
	  [ /([^\\]|^)\u{014F}/gu,
	    "$1\\u{o}" ],
	  [ /([^\\]|^)\u{0150}/gu,
	    "$1\\H{O}" ],
	  [ /([^\\]|^)\u{0151}/gu,
	    "$1\\H{o}" ],
	  [ /([^\\]|^)\u{0152}/gu,
	    "$1\\OE{}" ],
	  [ /([^\\]|^)\u{0153}/gu,
	    "$1\\oe{}" ],
	  [ /([^\\]|^)\u{0154}/gu,
	    "$1\\'{R}" ],
	  [ /([^\\]|^)\u{0155}/gu,
	    "$1\\'{r}" ],
	  [ /([^\\]|^)\u{0156}/gu,
	    "$1\\c{R}" ],
	  [ /([^\\]|^)\u{0157}/gu,
	    "$1\\c{r}" ],
	  [ /([^\\]|^)\u{0158}/gu,
	    "$1\\v{R}" ],
	  [ /([^\\]|^)\u{0159}/gu,
	    "$1\\v{r}" ],
	  [ /([^\\]|^)\u{015A}/gu,
	    "$1\\'{S}" ],
	  [ /([^\\]|^)\u{015B}/gu,
	    "$1\\'{s}" ],
	  [ /([^\\]|^)\u{015C}/gu,
	    "$1\\^{S}" ],
	  [ /([^\\]|^)\u{015D}/gu,
	    "$1\\^{s}" ],
	  [ /([^\\]|^)\u{015E}/gu,
	    "$1\\c{S}" ],
	  [ /([^\\]|^)\u{015F}/gu,
	    "$1\\c{s}" ],
	  [ /([^\\]|^)\u{0160}/gu,
	    "$1\\v{S}" ],
	  [ /([^\\]|^)\u{0161}/gu,
	    "$1\\v{s}" ],
	  [ /([^\\]|^)\u{0162}/gu,
	    "$1\\c{T}" ],
	  [ /([^\\]|^)\u{0163}/gu,
	    "$1\\c{t}" ],
	  [ /([^\\]|^)\u{0164}/gu,
	    "$1\\v{T}" ],
	  [ /([^\\]|^)\u{0165}/gu,
	    "$1\\v{t}" ],
	  [ /([^\\]|^)\u{0166}/gu,
	    "$1{\\fontencoding{LELA}\\selectfont\\char47}" ],
	  [ /([^\\]|^)\u{0167}/gu,
	    "$1{\\fontencoding{LELA}\\selectfont\\char63}" ],
	  [ /([^\\]|^)\u{0168}/gu,
	    "$1\\~{U}" ],
	  [ /([^\\]|^)\u{0169}/gu,
	    "$1\\~{u}" ],
	  [ /([^\\]|^)\u{016A}/gu,
	    "$1\\={U}" ],
	  [ /([^\\]|^)\u{016B}/gu,
	    "$1\\={u}" ],
	  [ /([^\\]|^)\u{016C}/gu,
	    "$1\\u{U}" ],
	  [ /([^\\]|^)\u{016D}/gu,
	    "$1\\u{u}" ],
	  [ /([^\\]|^)\u{016E}/gu,
	    "$1\\r{U}" ],
	  [ /([^\\]|^)\u{016F}/gu,
	    "$1\\r{u}" ],
	  [ /([^\\]|^)\u{0170}/gu,
	    "$1\\H{U}" ],
	  [ /([^\\]|^)\u{0171}/gu,
	    "$1\\H{u}" ],
	  [ /([^\\]|^)\u{0172}/gu,
	    "$1\\k{U}" ],
	  [ /([^\\]|^)\u{0173}/gu,
	    "$1\\k{u}" ],
	  [ /([^\\]|^)\u{0174}/gu,
	    "$1\\^{W}" ],
	  [ /([^\\]|^)\u{0175}/gu,
	    "$1\\^{w}" ],
	  [ /([^\\]|^)\u{0176}/gu,
	    "$1\\^{Y}" ],
	  [ /([^\\]|^)\u{0177}/gu,
	    "$1\\^{y}" ],
	  [ /([^\\]|^)\u{0178}/gu,
	    "$1\\\"{Y}" ],
	  [ /([^\\]|^)\u{0179}/gu,
	    "$1\\'{Z}" ],
	  [ /([^\\]|^)\u{017A}/gu,
	    "$1\\'{z}" ],
	  [ /([^\\]|^)\u{017B}/gu,
	    "$1\\.{Z}" ],
	  [ /([^\\]|^)\u{017C}/gu,
	    "$1\\.{z}" ],
	  [ /([^\\]|^)\u{017D}/gu,
	    "$1\\v{Z}" ],
	  [ /([^\\]|^)\u{017E}/gu,
	    "$1\\v{z}" ],
	  [ /([^\\]|^)\u{0195}/gu,
	    "$1\\texthvlig{}" ],
	  [ /([^\\]|^)\u{019E}/gu,
	    "$1\\textnrleg{}" ],
	  [ /([^\\]|^)\u{01AA}/gu,
	    "$1\\eth{}" ],
	  [ /([^\\]|^)\u{01BA}/gu,
	    "$1{\\fontencoding{LELA}\\selectfont\\char195}" ],
	  [ /([^\\]|^)\u{01C2}/gu,
	    "$1\\textdoublepipe{}" ],
	  [ /([^\\]|^)\u{01F5}/gu,
	    "$1\\'{g}" ],
	  [ /([^\\]|^)\u{0250}/gu,
	    "$1\\Elztrna{}" ],
	  [ /([^\\]|^)\u{0252}/gu,
	    "$1\\Elztrnsa{}" ],
	  [ /([^\\]|^)\u{0254}/gu,
	    "$1\\Elzopeno{}" ],
	  [ /([^\\]|^)\u{0256}/gu,
	    "$1\\Elzrtld{}" ],
	  [ /([^\\]|^)\u{0258}/gu,
	    "$1{\\fontencoding{LEIP}\\selectfont\\char61}" ],
	  [ /([^\\]|^)\u{0259}/gu,
	    "$1\\Elzschwa{}" ],
	  [ /([^\\]|^)\u{025B}/gu,
	    "$1\\varepsilon{}" ],
	  [ /([^\\]|^)\u{0263}/gu,
	    "$1\\Elzpgamma{}" ],
	  [ /([^\\]|^)\u{0264}/gu,
	    "$1\\Elzpbgam{}" ],
	  [ /([^\\]|^)\u{0265}/gu,
	    "$1\\Elztrnh{}" ],
	  [ /([^\\]|^)\u{026C}/gu,
	    "$1\\Elzbtdl{}" ],
	  [ /([^\\]|^)\u{026D}/gu,
	    "$1\\Elzrtll{}" ],
	  [ /([^\\]|^)\u{026F}/gu,
	    "$1\\Elztrnm{}" ],
	  [ /([^\\]|^)\u{0270}/gu,
	    "$1\\Elztrnmlr{}" ],
	  [ /([^\\]|^)\u{0271}/gu,
	    "$1\\Elzltlmr{}" ],
	  [ /([^\\]|^)\u{0272}/gu,
	    "$1\\Elzltln{}" ],
	  [ /([^\\]|^)\u{0273}/gu,
	    "$1\\Elzrtln{}" ],
	  [ /([^\\]|^)\u{0277}/gu,
	    "$1\\Elzclomeg{}" ],
	  [ /([^\\]|^)\u{0278}/gu,
	    "$1\\textphi{}" ],
	  [ /([^\\]|^)\u{0279}/gu,
	    "$1\\Elztrnr{}" ],
	  [ /([^\\]|^)\u{027A}/gu,
	    "$1\\Elztrnrl{}" ],
	  [ /([^\\]|^)\u{027B}/gu,
	    "$1\\Elzrttrnr{}" ],
	  [ /([^\\]|^)\u{027C}/gu,
	    "$1\\Elzrl{}" ],
	  [ /([^\\]|^)\u{027D}/gu,
	    "$1\\Elzrtlr{}" ],
	  [ /([^\\]|^)\u{027E}/gu,
	    "$1\\Elzfhr{}" ],
	  [ /([^\\]|^)\u{027F}/gu,
	    "$1{\\fontencoding{LEIP}\\selectfont\\char202}" ],
	  [ /([^\\]|^)\u{0282}/gu,
	    "$1\\Elzrtls{}" ],
	  [ /([^\\]|^)\u{0283}/gu,
	    "$1\\Elzesh{}" ],
	  [ /([^\\]|^)\u{0287}/gu,
	    "$1\\Elztrnt{}" ],
	  [ /([^\\]|^)\u{0288}/gu,
	    "$1\\Elzrtlt{}" ],
	  [ /([^\\]|^)\u{028A}/gu,
	    "$1\\Elzpupsil{}" ],
	  [ /([^\\]|^)\u{028B}/gu,
	    "$1\\Elzpscrv{}" ],
	  [ /([^\\]|^)\u{028C}/gu,
	    "$1\\Elzinvv{}" ],
	  [ /([^\\]|^)\u{028D}/gu,
	    "$1\\Elzinvw{}" ],
	  [ /([^\\]|^)\u{028E}/gu,
	    "$1\\Elztrny{}" ],
	  [ /([^\\]|^)\u{0290}/gu,
	    "$1\\Elzrtlz{}" ],
	  [ /([^\\]|^)\u{0292}/gu,
	    "$1\\Elzyogh{}" ],
	  [ /([^\\]|^)\u{0294}/gu,
	    "$1\\Elzglst{}" ],
	  [ /([^\\]|^)\u{0295}/gu,
	    "$1\\Elzreglst{}" ],
	  [ /([^\\]|^)\u{0296}/gu,
	    "$1\\Elzinglst{}" ],
	  [ /([^\\]|^)\u{029E}/gu,
	    "$1\\textturnk{}" ],
	  [ /([^\\]|^)\u{02A4}/gu,
	    "$1\\Elzdyogh{}" ],
	  [ /([^\\]|^)\u{02A7}/gu,
	    "$1\\Elztesh{}" ],
	  [ /([^\\]|^)\u{02C7}/gu,
	    "$1\\textasciicaron{}" ],
	  [ /([^\\]|^)\u{02C8}/gu,
	    "$1\\Elzverts{}" ],
	  [ /([^\\]|^)\u{02CC}/gu,
	    "$1\\Elzverti{}" ],
	  [ /([^\\]|^)\u{02D0}/gu,
	    "$1\\Elzlmrk{}" ],
	  [ /([^\\]|^)\u{02D1}/gu,
	    "$1\\Elzhlmrk{}" ],
	  [ /([^\\]|^)\u{02D2}/gu,
	    "$1\\Elzsbrhr{}" ],
	  [ /([^\\]|^)\u{02D3}/gu,
	    "$1\\Elzsblhr{}" ],
	  [ /([^\\]|^)\u{02D4}/gu,
	    "$1\\Elzrais{}" ],
	  [ /([^\\]|^)\u{02D5}/gu,
	    "$1\\Elzlow{}" ],
	  [ /([^\\]|^)\u{02D8}/gu,
	    "$1\\textasciibreve{}" ],
	  [ /([^\\]|^)\u{02D9}/gu,
	    "$1\\textperiodcentered{}" ],
	  [ /([^\\]|^)\u{02DA}/gu,
	    "$1\\r{}" ],
	  [ /([^\\]|^)\u{02DB}/gu,
	    "$1\\k{}" ],
	  [ /([^\\]|^)\u{02DC}/gu,
	    "$1\\texttildelow{}" ],
	  [ /([^\\]|^)\u{02DD}/gu,
	    "$1\\H{}" ],
	  [ /([^\\]|^)\u{02E5}/gu,
	    "$1\\tone{55}" ],
	  [ /([^\\]|^)\u{02E6}/gu,
	    "$1\\tone{44}" ],
	  [ /([^\\]|^)\u{02E7}/gu,
	    "$1\\tone{33}" ],
	  [ /([^\\]|^)\u{02E8}/gu,
	    "$1\\tone{22}" ],
	  [ /([^\\]|^)\u{02E9}/gu,
	    "$1\\tone{11}" ],
	  [ /([^\\]|^)\u{0300}/gu,
	    "$1\\`" ],
	  [ /([^\\]|^)\u{0301}/gu,
	    "$1\\'" ],
	  [ /([^\\]|^)\u{0302}/gu,
	    "$1\\^" ],
	  [ /([^\\]|^)\u{0303}/gu,
	    "$1\\~" ],
	  [ /([^\\]|^)\u{0304}/gu,
	    "$1\\=" ],
	  [ /([^\\]|^)\u{0306}/gu,
	    "$1\\u" ],
	  [ /([^\\]|^)\u{0307}/gu,
	    "$1\\." ],
	  [ /([^\\]|^)\u{0308}/gu,
	    "$1\\\"" ],
	  [ /([^\\]|^)\u{030A}/gu,
	    "$1\\r" ],
	  [ /([^\\]|^)\u{030B}/gu,
	    "$1\\H" ],
	  [ /([^\\]|^)\u{030C}/gu,
	    "$1\\v" ],
	  [ /([^\\]|^)\u{030F}/gu,
	    "$1\\cyrchar\\C" ],
	  [ /([^\\]|^)\u{0311}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char177}" ],
	  [ /([^\\]|^)\u{0318}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char184}" ],
	  [ /([^\\]|^)\u{0319}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char185}" ],
	  [ /([^\\]|^)\u{0321}/gu,
	    "$1\\Elzpalh{}" ],
	  [ /([^\\]|^)\u{0322}/gu,
	    "$1\\Elzrh{}" ],
	  [ /([^\\]|^)\u{0327}/gu,
	    "$1\\c" ],
	  [ /([^\\]|^)\u{0328}/gu,
	    "$1\\k" ],
	  [ /([^\\]|^)\u{032A}/gu,
	    "$1\\Elzsbbrg{}" ],
	  [ /([^\\]|^)\u{032B}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char203}" ],
	  [ /([^\\]|^)\u{032F}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char207}" ],
	  [ /([^\\]|^)\u{0335}/gu,
	    "$1\\Elzxl{}" ],
	  [ /([^\\]|^)\u{0336}/gu,
	    "$1\\Elzbar{}" ],
	  [ /([^\\]|^)\u{0337}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char215}" ],
	  [ /([^\\]|^)\u{0338}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char216}" ],
	  [ /([^\\]|^)\u{033A}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char218}" ],
	  [ /([^\\]|^)\u{033B}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char219}" ],
	  [ /([^\\]|^)\u{033C}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char220}" ],
	  [ /([^\\]|^)\u{033D}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char221}" ],
	  [ /([^\\]|^)\u{0361}/gu,
	    "$1{\\fontencoding{LECO}\\selectfont\\char225}" ],
	  [ /([^\\]|^)\u{0386}/gu,
	    "$1\\'{A}" ],
	  [ /([^\\]|^)\u{0388}/gu,
	    "$1\\'{E}" ],
	  [ /([^\\]|^)\u{0389}/gu,
	    "$1\\'{H}" ],
	  [ /([^\\]|^)\u{038A}/gu,
	    "$1\\'{}{I}" ],
	  [ /([^\\]|^)\u{038C}/gu,
	    "$1\\'{}O" ],
	  [ /([^\\]|^)\u{038E}/gu,
	    "$1\\mathrm{'Y}" ],
	  [ /([^\\]|^)\u{038F}/gu,
	    "$1\\mathrm{'\\Omega}" ],
	  [ /([^\\]|^)\u{0390}/gu,
	    "$1\\acute{\\ddot{\\iota}}" ],
	  [ /([^\\]|^)\u{0391}/gu,
	    "$1\\ensuremath{\\Alpha}" ],
	  [ /([^\\]|^)\u{0392}/gu,
	    "$1\\ensuremath{\\Beta}" ],
	  [ /([^\\]|^)\u{0393}/gu,
	    "$1\\ensuremath{\\Gamma}" ],
	  [ /([^\\]|^)\u{0394}/gu,
	    "$1\\ensuremath{\\Delta}" ],
	  [ /([^\\]|^)\u{0395}/gu,
	    "$1\\ensuremath{\\Epsilon}" ],
	  [ /([^\\]|^)\u{0396}/gu,
	    "$1\\ensuremath{\\Zeta}" ],
	  [ /([^\\]|^)\u{0397}/gu,
	    "$1\\ensuremath{\\Eta}" ],
	  [ /([^\\]|^)\u{0398}/gu,
	    "$1\\ensuremath{\\Theta}" ],
	  [ /([^\\]|^)\u{0399}/gu,
	    "$1\\ensuremath{\\Iota}" ],
	  [ /([^\\]|^)\u{039A}/gu,
	    "$1\\ensuremath{\\Kappa}" ],
	  [ /([^\\]|^)\u{039B}/gu,
	    "$1\\ensuremath{\\Lambda}" ],
	  [ /([^\\]|^)\u{039E}/gu,
	    "$1\\ensuremath{\\Xi}" ],
	  [ /([^\\]|^)\u{03A0}/gu,
	    "$1\\ensuremath{\\Pi}" ],
	  [ /([^\\]|^)\u{03A1}/gu,
	    "$1\\ensuremath{\\Rho}" ],
	  [ /([^\\]|^)\u{03A3}/gu,
	    "$1\\ensuremath{\\Sigma}" ],
	  [ /([^\\]|^)\u{03A4}/gu,
	    "$1\\ensuremath{\\Tau}" ],
	  [ /([^\\]|^)\u{03A5}/gu,
	    "$1\\ensuremath{\\Upsilon}" ],
	  [ /([^\\]|^)\u{03A6}/gu,
	    "$1\\ensuremath{\\Phi}" ],
	  [ /([^\\]|^)\u{03A7}/gu,
	    "$1\\ensuremath{\\Chi}" ],
	  [ /([^\\]|^)\u{03A8}/gu,
	    "$1\\ensuremath{\\Psi}" ],
	  [ /([^\\]|^)\u{03A9}/gu,
	    "$1\\ensuremath{\\Omega}" ],
	  [ /([^\\]|^)\u{03AA}/gu,
	    "$1\\mathrm{\\ddot{I}}" ],
	  [ /([^\\]|^)\u{03AB}/gu,
	    "$1\\mathrm{\\ddot{Y}}" ],
	  [ /([^\\]|^)\u{03AC}/gu,
	    "$1\\'{$\\alpha$}" ],
	  [ /([^\\]|^)\u{03AD}/gu,
	    "$1\\acute{\\epsilon}" ],
	  [ /([^\\]|^)\u{03AE}/gu,
	    "$1\\acute{\\eta}" ],
	  [ /([^\\]|^)\u{03AF}/gu,
	    "$1\\acute{\\iota}" ],
	  [ /([^\\]|^)\u{03B0}/gu,
	    "$1\\acute{\\ddot{\\upsilon}}" ],
	  [ /([^\\]|^)\u{03B1}/gu,
	    "$1\\ensuremath{\\alpha}" ],
	  [ /([^\\]|^)\u{03B2}/gu,
	    "$1\\ensuremath{\\beta}" ],
	  [ /([^\\]|^)\u{03B3}/gu,
	    "$1\\ensuremath{\\gamma}" ],
	  [ /([^\\]|^)\u{03B4}/gu,
	    "$1\\ensuremath{\\delta}" ],
	  [ /([^\\]|^)\u{03B5}/gu,
	    "$1\\ensuremath{\\epsilon}" ],
	  [ /([^\\]|^)\u{03B6}/gu,
	    "$1\\ensuremath{\\zeta}" ],
	  [ /([^\\]|^)\u{03B7}/gu,
	    "$1\\ensuremath{\\eta}" ],
	  [ /([^\\]|^)\u{03B8}/gu,
	    "$1\\texttheta{}" ],
	  [ /([^\\]|^)\u{03B9}/gu,
	    "$1\\ensuremath{\\iota}" ],
	  [ /([^\\]|^)\u{03BA}/gu,
	    "$1\\ensuremath{\\kappa}" ],
	  [ /([^\\]|^)\u{03BB}/gu,
	    "$1\\ensuremath{\\lambda}" ],
	  [ /([^\\]|^)\u{03BC}/gu,
	    "$1\\ensuremath{\\mu}" ],
	  [ /([^\\]|^)\u{03BD}/gu,
	    "$1\\ensuremath{\\nu}" ],
	  [ /([^\\]|^)\u{03BE}/gu,
	    "$1\\ensuremath{\\xi}" ],
	  [ /([^\\]|^)\u{03C0}/gu,
	    "$1\\ensuremath{\\pi}" ],
	  [ /([^\\]|^)\u{03C1}/gu,
	    "$1\\ensuremath{\\rho}" ],
	  [ /([^\\]|^)\u{03C2}/gu,
	    "$1\\ensuremath{\\varsigma}" ],
	  [ /([^\\]|^)\u{03C3}/gu,
	    "$1\\ensuremath{\\sigma}" ],
	  [ /([^\\]|^)\u{03C4}/gu,
	    "$1\\ensuremath{\\tau}" ],
	  [ /([^\\]|^)\u{03C5}/gu,
	    "$1\\ensuremath{\\upsilon}" ],
	  [ /([^\\]|^)\u{03C6}/gu,
	    "$1\\ensuremath{\\varphi}" ],
	  [ /([^\\]|^)\u{03C7}/gu,
	    "$1\\ensuremath{\\chi}" ],
	  [ /([^\\]|^)\u{03C8}/gu,
	    "$1\\ensuremath{\\psi}" ],
	  [ /([^\\]|^)\u{03C9}/gu,
	    "$1\\ensuremath{\\omega}" ],
	  [ /([^\\]|^)\u{03CA}/gu,
	    "$1\\ensuremath{\\ddot{\\iota}}" ],
	  [ /([^\\]|^)\u{03CB}/gu,
	    "$1\\ensuremath{\\ddot{\\upsilon}}" ],
	  [ /([^\\]|^)\u{03CC}/gu,
	    "$1\\'{o}" ],
	  [ /([^\\]|^)\u{03CD}/gu,
	    "$1\\acute{\\upsilon}" ],
	  [ /([^\\]|^)\u{03CE}/gu,
	    "$1\\acute{\\omega}" ],
	  [ /([^\\]|^)\u{03D0}/gu,
	    "$1\\Pisymbol{ppi022}{87}" ],
	  [ /([^\\]|^)\u{03D1}/gu,
	    "$1\\textvartheta{}" ],
	  [ /([^\\]|^)\u{03D2}/gu,
	    "$1\\ensuremath{\\Upsilon}" ],
	  [ /([^\\]|^)\u{03D5}/gu,
	    "$1\\ensuremath{\\phi}" ],
	  [ /([^\\]|^)\u{03D6}/gu,
	    "$1\\ensuremath{\\varpi}" ],
	  [ /([^\\]|^)\u{03DA}/gu,
	    "$1\\Stigma{}" ],
	  [ /([^\\]|^)\u{03DC}/gu,
	    "$1\\Digamma{}" ],
	  [ /([^\\]|^)\u{03DD}/gu,
	    "$1\\digamma{}" ],
	  [ /([^\\]|^)\u{03DE}/gu,
	    "$1\\Koppa{}" ],
	  [ /([^\\]|^)\u{03E0}/gu,
	    "$1\\Sampi{}" ],
	  [ /([^\\]|^)\u{03F0}/gu,
	    "$1\\varkappa{}" ],
	  [ /([^\\]|^)\u{03F1}/gu,
	    "$1\\varrho{}" ],
	  [ /([^\\]|^)\u{03F4}/gu,
	    "$1\\textTheta{}" ],
	  [ /([^\\]|^)\u{03F6}/gu,
	    "$1\\backepsilon{}" ],
	  [ /([^\\]|^)\u{0401}/gu,
	    "$1\\cyrchar\\CYRYO{}" ],
	  [ /([^\\]|^)\u{0402}/gu,
	    "$1\\cyrchar\\CYRDJE{}" ],
	  [ /([^\\]|^)\u{0403}/gu,
	    "$1\\cyrchar{\\'\\CYRG}" ],
	  [ /([^\\]|^)\u{0404}/gu,
	    "$1\\cyrchar\\CYRIE{}" ],
	  [ /([^\\]|^)\u{0405}/gu,
	    "$1\\cyrchar\\CYRDZE{}" ],
	  [ /([^\\]|^)\u{0406}/gu,
	    "$1\\cyrchar\\CYRII{}" ],
	  [ /([^\\]|^)\u{0407}/gu,
	    "$1\\cyrchar\\CYRYI{}" ],
	  [ /([^\\]|^)\u{0408}/gu,
	    "$1\\cyrchar\\CYRJE{}" ],
	  [ /([^\\]|^)\u{0409}/gu,
	    "$1\\cyrchar\\CYRLJE{}" ],
	  [ /([^\\]|^)\u{040A}/gu,
	    "$1\\cyrchar\\CYRNJE{}" ],
	  [ /([^\\]|^)\u{040B}/gu,
	    "$1\\cyrchar\\CYRTSHE{}" ],
	  [ /([^\\]|^)\u{040C}/gu,
	    "$1\\cyrchar{\\'\\CYRK}" ],
	  [ /([^\\]|^)\u{040E}/gu,
	    "$1\\cyrchar\\CYRUSHRT{}" ],
	  [ /([^\\]|^)\u{040F}/gu,
	    "$1\\cyrchar\\CYRDZHE{}" ],
	  [ /([^\\]|^)\u{0410}/gu,
	    "$1\\cyrchar\\CYRA{}" ],
	  [ /([^\\]|^)\u{0411}/gu,
	    "$1\\cyrchar\\CYRB{}" ],
	  [ /([^\\]|^)\u{0412}/gu,
	    "$1\\cyrchar\\CYRV{}" ],
	  [ /([^\\]|^)\u{0413}/gu,
	    "$1\\cyrchar\\CYRG{}" ],
	  [ /([^\\]|^)\u{0414}/gu,
	    "$1\\cyrchar\\CYRD{}" ],
	  [ /([^\\]|^)\u{0415}/gu,
	    "$1\\cyrchar\\CYRE{}" ],
	  [ /([^\\]|^)\u{0416}/gu,
	    "$1\\cyrchar\\CYRZH{}" ],
	  [ /([^\\]|^)\u{0417}/gu,
	    "$1\\cyrchar\\CYRZ{}" ],
	  [ /([^\\]|^)\u{0418}/gu,
	    "$1\\cyrchar\\CYRI{}" ],
	  [ /([^\\]|^)\u{0419}/gu,
	    "$1\\cyrchar\\CYRISHRT{}" ],
	  [ /([^\\]|^)\u{041A}/gu,
	    "$1\\cyrchar\\CYRK{}" ],
	  [ /([^\\]|^)\u{041B}/gu,
	    "$1\\cyrchar\\CYRL{}" ],
	  [ /([^\\]|^)\u{041C}/gu,
	    "$1\\cyrchar\\CYRM{}" ],
	  [ /([^\\]|^)\u{041D}/gu,
	    "$1\\cyrchar\\CYRN{}" ],
	  [ /([^\\]|^)\u{041E}/gu,
	    "$1\\cyrchar\\CYRO{}" ],
	  [ /([^\\]|^)\u{041F}/gu,
	    "$1\\cyrchar\\CYRP{}" ],
	  [ /([^\\]|^)\u{0420}/gu,
	    "$1\\cyrchar\\CYRR{}" ],
	  [ /([^\\]|^)\u{0421}/gu,
	    "$1\\cyrchar\\CYRS{}" ],
	  [ /([^\\]|^)\u{0422}/gu,
	    "$1\\cyrchar\\CYRT{}" ],
	  [ /([^\\]|^)\u{0423}/gu,
	    "$1\\cyrchar\\CYRU{}" ],
	  [ /([^\\]|^)\u{0424}/gu,
	    "$1\\cyrchar\\CYRF{}" ],
	  [ /([^\\]|^)\u{0425}/gu,
	    "$1\\cyrchar\\CYRH{}" ],
	  [ /([^\\]|^)\u{0426}/gu,
	    "$1\\cyrchar\\CYRC{}" ],
	  [ /([^\\]|^)\u{0427}/gu,
	    "$1\\cyrchar\\CYRCH{}" ],
	  [ /([^\\]|^)\u{0428}/gu,
	    "$1\\cyrchar\\CYRSH{}" ],
	  [ /([^\\]|^)\u{0429}/gu,
	    "$1\\cyrchar\\CYRSHCH{}" ],
	  [ /([^\\]|^)\u{042A}/gu,
	    "$1\\cyrchar\\CYRHRDSN{}" ],
	  [ /([^\\]|^)\u{042B}/gu,
	    "$1\\cyrchar\\CYRERY{}" ],
	  [ /([^\\]|^)\u{042C}/gu,
	    "$1\\cyrchar\\CYRSFTSN{}" ],
	  [ /([^\\]|^)\u{042D}/gu,
	    "$1\\cyrchar\\CYREREV{}" ],
	  [ /([^\\]|^)\u{042E}/gu,
	    "$1\\cyrchar\\CYRYU{}" ],
	  [ /([^\\]|^)\u{042F}/gu,
	    "$1\\cyrchar\\CYRYA{}" ],
	  [ /([^\\]|^)\u{0430}/gu,
	    "$1\\cyrchar\\cyra{}" ],
	  [ /([^\\]|^)\u{0431}/gu,
	    "$1\\cyrchar\\cyrb{}" ],
	  [ /([^\\]|^)\u{0432}/gu,
	    "$1\\cyrchar\\cyrv{}" ],
	  [ /([^\\]|^)\u{0433}/gu,
	    "$1\\cyrchar\\cyrg{}" ],
	  [ /([^\\]|^)\u{0434}/gu,
	    "$1\\cyrchar\\cyrd{}" ],
	  [ /([^\\]|^)\u{0435}/gu,
	    "$1\\cyrchar\\cyre{}" ],
	  [ /([^\\]|^)\u{0436}/gu,
	    "$1\\cyrchar\\cyrzh{}" ],
	  [ /([^\\]|^)\u{0437}/gu,
	    "$1\\cyrchar\\cyrz{}" ],
	  [ /([^\\]|^)\u{0438}/gu,
	    "$1\\cyrchar\\cyri{}" ],
	  [ /([^\\]|^)\u{0439}/gu,
	    "$1\\cyrchar\\cyrishrt{}" ],
	  [ /([^\\]|^)\u{043A}/gu,
	    "$1\\cyrchar\\cyrk{}" ],
	  [ /([^\\]|^)\u{043B}/gu,
	    "$1\\cyrchar\\cyrl{}" ],
	  [ /([^\\]|^)\u{043C}/gu,
	    "$1\\cyrchar\\cyrm{}" ],
	  [ /([^\\]|^)\u{043D}/gu,
	    "$1\\cyrchar\\cyrn{}" ],
	  [ /([^\\]|^)\u{043E}/gu,
	    "$1\\cyrchar\\cyro{}" ],
	  [ /([^\\]|^)\u{043F}/gu,
	    "$1\\cyrchar\\cyrp{}" ],
	  [ /([^\\]|^)\u{0440}/gu,
	    "$1\\cyrchar\\cyrr{}" ],
	  [ /([^\\]|^)\u{0441}/gu,
	    "$1\\cyrchar\\cyrs{}" ],
	  [ /([^\\]|^)\u{0442}/gu,
	    "$1\\cyrchar\\cyrt{}" ],
	  [ /([^\\]|^)\u{0443}/gu,
	    "$1\\cyrchar\\cyru{}" ],
	  [ /([^\\]|^)\u{0444}/gu,
	    "$1\\cyrchar\\cyrf{}" ],
	  [ /([^\\]|^)\u{0445}/gu,
	    "$1\\cyrchar\\cyrh{}" ],
	  [ /([^\\]|^)\u{0446}/gu,
	    "$1\\cyrchar\\cyrc{}" ],
	  [ /([^\\]|^)\u{0447}/gu,
	    "$1\\cyrchar\\cyrch{}" ],
	  [ /([^\\]|^)\u{0448}/gu,
	    "$1\\cyrchar\\cyrsh{}" ],
	  [ /([^\\]|^)\u{0449}/gu,
	    "$1\\cyrchar\\cyrshch{}" ],
	  [ /([^\\]|^)\u{044A}/gu,
	    "$1\\cyrchar\\cyrhrdsn{}" ],
	  [ /([^\\]|^)\u{044B}/gu,
	    "$1\\cyrchar\\cyrery{}" ],
	  [ /([^\\]|^)\u{044C}/gu,
	    "$1\\cyrchar\\cyrsftsn{}" ],
	  [ /([^\\]|^)\u{044D}/gu,
	    "$1\\cyrchar\\cyrerev{}" ],
	  [ /([^\\]|^)\u{044E}/gu,
	    "$1\\cyrchar\\cyryu{}" ],
	  [ /([^\\]|^)\u{044F}/gu,
	    "$1\\cyrchar\\cyrya{}" ],
	  [ /([^\\]|^)\u{0451}/gu,
	    "$1\\cyrchar\\cyryo{}" ],
	  [ /([^\\]|^)\u{0452}/gu,
	    "$1\\cyrchar\\cyrdje{}" ],
	  [ /([^\\]|^)\u{0453}/gu,
	    "$1\\cyrchar{\\'\\cyrg}" ],
	  [ /([^\\]|^)\u{0454}/gu,
	    "$1\\cyrchar\\cyrie{}" ],
	  [ /([^\\]|^)\u{0455}/gu,
	    "$1\\cyrchar\\cyrdze{}" ],
	  [ /([^\\]|^)\u{0456}/gu,
	    "$1\\cyrchar\\cyrii{}" ],
	  [ /([^\\]|^)\u{0457}/gu,
	    "$1\\cyrchar\\cyryi{}" ],
	  [ /([^\\]|^)\u{0458}/gu,
	    "$1\\cyrchar\\cyrje{}" ],
	  [ /([^\\]|^)\u{0459}/gu,
	    "$1\\cyrchar\\cyrlje{}" ],
	  [ /([^\\]|^)\u{045A}/gu,
	    "$1\\cyrchar\\cyrnje{}" ],
	  [ /([^\\]|^)\u{045B}/gu,
	    "$1\\cyrchar\\cyrtshe{}" ],
	  [ /([^\\]|^)\u{045C}/gu,
	    "$1\\cyrchar{\\'\\cyrk}" ],
	  [ /([^\\]|^)\u{045E}/gu,
	    "$1\\cyrchar\\cyrushrt{}" ],
	  [ /([^\\]|^)\u{045F}/gu,
	    "$1\\cyrchar\\cyrdzhe{}" ],
	  [ /([^\\]|^)\u{0460}/gu,
	    "$1\\cyrchar\\CYROMEGA{}" ],
	  [ /([^\\]|^)\u{0461}/gu,
	    "$1\\cyrchar\\cyromega{}" ],
	  [ /([^\\]|^)\u{0462}/gu,
	    "$1\\cyrchar\\CYRYAT{}" ],
	  [ /([^\\]|^)\u{0464}/gu,
	    "$1\\cyrchar\\CYRIOTE{}" ],
	  [ /([^\\]|^)\u{0465}/gu,
	    "$1\\cyrchar\\cyriote{}" ],
	  [ /([^\\]|^)\u{0466}/gu,
	    "$1\\cyrchar\\CYRLYUS{}" ],
	  [ /([^\\]|^)\u{0467}/gu,
	    "$1\\cyrchar\\cyrlyus{}" ],
	  [ /([^\\]|^)\u{0468}/gu,
	    "$1\\cyrchar\\CYRIOTLYUS{}" ],
	  [ /([^\\]|^)\u{0469}/gu,
	    "$1\\cyrchar\\cyriotlyus{}" ],
	  [ /([^\\]|^)\u{046A}/gu,
	    "$1\\cyrchar\\CYRBYUS{}" ],
	  [ /([^\\]|^)\u{046C}/gu,
	    "$1\\cyrchar\\CYRIOTBYUS{}" ],
	  [ /([^\\]|^)\u{046D}/gu,
	    "$1\\cyrchar\\cyriotbyus{}" ],
	  [ /([^\\]|^)\u{046E}/gu,
	    "$1\\cyrchar\\CYRKSI{}" ],
	  [ /([^\\]|^)\u{046F}/gu,
	    "$1\\cyrchar\\cyrksi{}" ],
	  [ /([^\\]|^)\u{0470}/gu,
	    "$1\\cyrchar\\CYRPSI{}" ],
	  [ /([^\\]|^)\u{0471}/gu,
	    "$1\\cyrchar\\cyrpsi{}" ],
	  [ /([^\\]|^)\u{0472}/gu,
	    "$1\\cyrchar\\CYRFITA{}" ],
	  [ /([^\\]|^)\u{0474}/gu,
	    "$1\\cyrchar\\CYRIZH{}" ],
	  [ /([^\\]|^)\u{0478}/gu,
	    "$1\\cyrchar\\CYRUK{}" ],
	  [ /([^\\]|^)\u{0479}/gu,
	    "$1\\cyrchar\\cyruk{}" ],
	  [ /([^\\]|^)\u{047A}/gu,
	    "$1\\cyrchar\\CYROMEGARND{}" ],
	  [ /([^\\]|^)\u{047B}/gu,
	    "$1\\cyrchar\\cyromegarnd{}" ],
	  [ /([^\\]|^)\u{047C}/gu,
	    "$1\\cyrchar\\CYROMEGATITLO{}" ],
	  [ /([^\\]|^)\u{047D}/gu,
	    "$1\\cyrchar\\cyromegatitlo{}" ],
	  [ /([^\\]|^)\u{047E}/gu,
	    "$1\\cyrchar\\CYROT{}" ],
	  [ /([^\\]|^)\u{047F}/gu,
	    "$1\\cyrchar\\cyrot{}" ],
	  [ /([^\\]|^)\u{0480}/gu,
	    "$1\\cyrchar\\CYRKOPPA{}" ],
	  [ /([^\\]|^)\u{0481}/gu,
	    "$1\\cyrchar\\cyrkoppa{}" ],
	  [ /([^\\]|^)\u{0482}/gu,
	    "$1\\cyrchar\\cyrthousands{}" ],
	  [ /([^\\]|^)\u{0488}/gu,
	    "$1\\cyrchar\\cyrhundredthousands{}" ],
	  [ /([^\\]|^)\u{0489}/gu,
	    "$1\\cyrchar\\cyrmillions{}" ],
	  [ /([^\\]|^)\u{048C}/gu,
	    "$1\\cyrchar\\CYRSEMISFTSN{}" ],
	  [ /([^\\]|^)\u{048D}/gu,
	    "$1\\cyrchar\\cyrsemisftsn{}" ],
	  [ /([^\\]|^)\u{048E}/gu,
	    "$1\\cyrchar\\CYRRTICK{}" ],
	  [ /([^\\]|^)\u{048F}/gu,
	    "$1\\cyrchar\\cyrrtick{}" ],
	  [ /([^\\]|^)\u{0490}/gu,
	    "$1\\cyrchar\\CYRGUP{}" ],
	  [ /([^\\]|^)\u{0491}/gu,
	    "$1\\cyrchar\\cyrgup{}" ],
	  [ /([^\\]|^)\u{0492}/gu,
	    "$1\\cyrchar\\CYRGHCRS{}" ],
	  [ /([^\\]|^)\u{0493}/gu,
	    "$1\\cyrchar\\cyrghcrs{}" ],
	  [ /([^\\]|^)\u{0494}/gu,
	    "$1\\cyrchar\\CYRGHK{}" ],
	  [ /([^\\]|^)\u{0495}/gu,
	    "$1\\cyrchar\\cyrghk{}" ],
	  [ /([^\\]|^)\u{0496}/gu,
	    "$1\\cyrchar\\CYRZHDSC{}" ],
	  [ /([^\\]|^)\u{0497}/gu,
	    "$1\\cyrchar\\cyrzhdsc{}" ],
	  [ /([^\\]|^)\u{0498}/gu,
	    "$1\\cyrchar\\CYRZDSC{}" ],
	  [ /([^\\]|^)\u{0499}/gu,
	    "$1\\cyrchar\\cyrzdsc{}" ],
	  [ /([^\\]|^)\u{049A}/gu,
	    "$1\\cyrchar\\CYRKDSC{}" ],
	  [ /([^\\]|^)\u{049B}/gu,
	    "$1\\cyrchar\\cyrkdsc{}" ],
	  [ /([^\\]|^)\u{049C}/gu,
	    "$1\\cyrchar\\CYRKVCRS{}" ],
	  [ /([^\\]|^)\u{049D}/gu,
	    "$1\\cyrchar\\cyrkvcrs{}" ],
	  [ /([^\\]|^)\u{049E}/gu,
	    "$1\\cyrchar\\CYRKHCRS{}" ],
	  [ /([^\\]|^)\u{049F}/gu,
	    "$1\\cyrchar\\cyrkhcrs{}" ],
	  [ /([^\\]|^)\u{04A0}/gu,
	    "$1\\cyrchar\\CYRKBEAK{}" ],
	  [ /([^\\]|^)\u{04A1}/gu,
	    "$1\\cyrchar\\cyrkbeak{}" ],
	  [ /([^\\]|^)\u{04A2}/gu,
	    "$1\\cyrchar\\CYRNDSC{}" ],
	  [ /([^\\]|^)\u{04A3}/gu,
	    "$1\\cyrchar\\cyrndsc{}" ],
	  [ /([^\\]|^)\u{04A4}/gu,
	    "$1\\cyrchar\\CYRNG{}" ],
	  [ /([^\\]|^)\u{04A5}/gu,
	    "$1\\cyrchar\\cyrng{}" ],
	  [ /([^\\]|^)\u{04A6}/gu,
	    "$1\\cyrchar\\CYRPHK{}" ],
	  [ /([^\\]|^)\u{04A7}/gu,
	    "$1\\cyrchar\\cyrphk{}" ],
	  [ /([^\\]|^)\u{04A8}/gu,
	    "$1\\cyrchar\\CYRABHHA{}" ],
	  [ /([^\\]|^)\u{04A9}/gu,
	    "$1\\cyrchar\\cyrabhha{}" ],
	  [ /([^\\]|^)\u{04AA}/gu,
	    "$1\\cyrchar\\CYRSDSC{}" ],
	  [ /([^\\]|^)\u{04AB}/gu,
	    "$1\\cyrchar\\cyrsdsc{}" ],
	  [ /([^\\]|^)\u{04AC}/gu,
	    "$1\\cyrchar\\CYRTDSC{}" ],
	  [ /([^\\]|^)\u{04AD}/gu,
	    "$1\\cyrchar\\cyrtdsc{}" ],
	  [ /([^\\]|^)\u{04AE}/gu,
	    "$1\\cyrchar\\CYRY{}" ],
	  [ /([^\\]|^)\u{04AF}/gu,
	    "$1\\cyrchar\\cyry{}" ],
	  [ /([^\\]|^)\u{04B0}/gu,
	    "$1\\cyrchar\\CYRYHCRS{}" ],
	  [ /([^\\]|^)\u{04B1}/gu,
	    "$1\\cyrchar\\cyryhcrs{}" ],
	  [ /([^\\]|^)\u{04B2}/gu,
	    "$1\\cyrchar\\CYRHDSC{}" ],
	  [ /([^\\]|^)\u{04B3}/gu,
	    "$1\\cyrchar\\cyrhdsc{}" ],
	  [ /([^\\]|^)\u{04B4}/gu,
	    "$1\\cyrchar\\CYRTETSE{}" ],
	  [ /([^\\]|^)\u{04B5}/gu,
	    "$1\\cyrchar\\cyrtetse{}" ],
	  [ /([^\\]|^)\u{04B6}/gu,
	    "$1\\cyrchar\\CYRCHRDSC{}" ],
	  [ /([^\\]|^)\u{04B7}/gu,
	    "$1\\cyrchar\\cyrchrdsc{}" ],
	  [ /([^\\]|^)\u{04B8}/gu,
	    "$1\\cyrchar\\CYRCHVCRS{}" ],
	  [ /([^\\]|^)\u{04B9}/gu,
	    "$1\\cyrchar\\cyrchvcrs{}" ],
	  [ /([^\\]|^)\u{04BA}/gu,
	    "$1\\cyrchar\\CYRSHHA{}" ],
	  [ /([^\\]|^)\u{04BB}/gu,
	    "$1\\cyrchar\\cyrshha{}" ],
	  [ /([^\\]|^)\u{04BC}/gu,
	    "$1\\cyrchar\\CYRABHCH{}" ],
	  [ /([^\\]|^)\u{04BD}/gu,
	    "$1\\cyrchar\\cyrabhch{}" ],
	  [ /([^\\]|^)\u{04BE}/gu,
	    "$1\\cyrchar\\CYRABHCHDSC{}" ],
	  [ /([^\\]|^)\u{04BF}/gu,
	    "$1\\cyrchar\\cyrabhchdsc{}" ],
	  [ /([^\\]|^)\u{04C0}/gu,
	    "$1\\cyrchar\\CYRpalochka{}" ],
	  [ /([^\\]|^)\u{04C3}/gu,
	    "$1\\cyrchar\\CYRKHK{}" ],
	  [ /([^\\]|^)\u{04C4}/gu,
	    "$1\\cyrchar\\cyrkhk{}" ],
	  [ /([^\\]|^)\u{04C7}/gu,
	    "$1\\cyrchar\\CYRNHK{}" ],
	  [ /([^\\]|^)\u{04C8}/gu,
	    "$1\\cyrchar\\cyrnhk{}" ],
	  [ /([^\\]|^)\u{04CB}/gu,
	    "$1\\cyrchar\\CYRCHLDSC{}" ],
	  [ /([^\\]|^)\u{04CC}/gu,
	    "$1\\cyrchar\\cyrchldsc{}" ],
	  [ /([^\\]|^)\u{04D4}/gu,
	    "$1\\cyrchar\\CYRAE{}" ],
	  [ /([^\\]|^)\u{04D5}/gu,
	    "$1\\cyrchar\\cyrae{}" ],
	  [ /([^\\]|^)\u{04D8}/gu,
	    "$1\\cyrchar\\CYRSCHWA{}" ],
	  [ /([^\\]|^)\u{04D9}/gu,
	    "$1\\cyrchar\\cyrschwa{}" ],
	  [ /([^\\]|^)\u{04E0}/gu,
	    "$1\\cyrchar\\CYRABHDZE{}" ],
	  [ /([^\\]|^)\u{04E1}/gu,
	    "$1\\cyrchar\\cyrabhdze{}" ],
	  [ /([^\\]|^)\u{04E8}/gu,
	    "$1\\cyrchar\\CYROTLD{}" ],
	  [ /([^\\]|^)\u{04E9}/gu,
	    "$1\\cyrchar\\cyrotld{}" ],
	  [ /([^\\]|^)\u{2002}/gu,
	    "$1\\hspace{0.6em}" ],
	  [ /([^\\]|^)\u{2003}/gu,
	    "$1\\hspace{1em}" ],
	  [ /([^\\]|^)\u{2004}/gu,
	    "$1\\hspace{0.33em}" ],
	  [ /([^\\]|^)\u{2005}/gu,
	    "$1\\hspace{0.25em}" ],
	  [ /([^\\]|^)\u{2006}/gu,
	    "$1\\hspace{0.166em}" ],
	  [ /([^\\]|^)\u{2007}/gu,
	    "$1\\hphantom{0}" ],
	  [ /([^\\]|^)\u{2008}/gu,
	    "$1\\hphantom{,}" ],
	  [ /([^\\]|^)\u{2009}/gu,
	    "$1\\hspace{0.167em}" ],
	  [ /([^\\]|^)\u{200A}/gu,
	    "$1\\mkern1mu{}" ],
	  [ /([^\\]|^)\u{2010}/gu,
	    "$1-" ],
	  [ /([^\\]|^)\u{2014}/gu,
	    "$1--" ],
	  [ /([^\\]|^)\u{2015}/gu,
	    "$1\\rule{1em}{1pt}" ],
	  [ /([^\\]|^)\u{2016}/gu,
	    "$1\\Vert{}" ],
	  [ /([^\\]|^)\u{2018}/gu,
	    "$1`" ],
	  [ /([^\\]|^)\u{2019}/gu,
	    "$1'" ],
	  [ /([^\\]|^)\u{201B}/gu,
	    "$1\\Elzreapos{}" ],
	  [ /([^\\]|^)\u{201C}/gu,
	    "$1``" ],
	  [ /([^\\]|^)\u{201D}/gu,
	    "$1''" ],
	  [ /([^\\]|^)\u{201E}/gu,
	    "$1,," ],
	  [ /([^\\]|^)\u{2020}/gu,
	    "$1\\textdagger{}" ],
	  [ /([^\\]|^)\u{2021}/gu,
	    "$1\\textdaggerdbl{}" ],
	  [ /([^\\]|^)\u{2022}/gu,
	    "$1\\textbullet{}" ],
	  [ /([^\\]|^)\u{2025}/gu,
	    "$1.." ],
	  [ /([^\\]|^)\u{2026}/gu,
	    "$1\\ldots{}" ],
	  [ /([^\\]|^)\u{2030}/gu,
	    "$1\\textperthousand{}" ],
	  [ /([^\\]|^)\u{2031}/gu,
	    "$1\\textpertenthousand{}" ],
	  [ /([^\\]|^)\u{2032}/gu,
	    "$1\\ensuremath{'}" ],
	  [ /([^\\]|^)\u{2033}/gu,
	    "$1\\ensuremath{''}" ],
	  [ /([^\\]|^)\u{2034}/gu,
	    "$1\\ensuremath{'''}" ],
	  [ /([^\\]|^)\u{2035}/gu,
	    "$1\\backprime{}" ],
	  [ /([^\\]|^)\u{2039}/gu,
	    "$1\\guilsinglleft{}" ],
	  [ /([^\\]|^)\u{203A}/gu,
	    "$1\\guilsinglright{}" ],
	  [ /([^\\]|^)\u{2057}/gu,
	    "$1''''" ],
	  [ /([^\\]|^)\u{205F}/gu,
	    "$1\\mkern4mu{}" ],
	  [ /([^\\]|^)\u{2060}/gu,
	    "$1\\nolinebreak{}" ],
	  [ /([^\\]|^)\u{20A7}/gu,
	    "$1\\ensuremath{\\Elzpes}" ],
	  [ /([^\\]|^)\u{20AC}/gu,
	    "$1\\mbox{\\texteuro}{}" ],
	  [ /([^\\]|^)\u{20DB}/gu,
	    "$1\\dddot{}" ],
	  [ /([^\\]|^)\u{20DC}/gu,
	    "$1\\ddddot{}" ],
	  [ /([^\\]|^)\u{2102}/gu,
	    "$1\\mathbb{C}" ],
	  [ /([^\\]|^)\u{210A}/gu,
	    "$1\\mathscr{g}" ],
	  [ /([^\\]|^)\u{210B}/gu,
	    "$1\\mathscr{H}" ],
	  [ /([^\\]|^)\u{210C}/gu,
	    "$1\\mathfrak{H}" ],
	  [ /([^\\]|^)\u{210D}/gu,
	    "$1\\mathbb{H}" ],
	  [ /([^\\]|^)\u{210F}/gu,
	    "$1\\hslash{}" ],
	  [ /([^\\]|^)\u{2110}/gu,
	    "$1\\mathscr{I}" ],
	  [ /([^\\]|^)\u{2111}/gu,
	    "$1\\mathfrak{I}" ],
	  [ /([^\\]|^)\u{2112}/gu,
	    "$1\\mathscr{L}" ],
	  [ /([^\\]|^)\u{2113}/gu,
	    "$1\\mathscr{l}" ],
	  [ /([^\\]|^)\u{2115}/gu,
	    "$1\\mathbb{N}" ],
	  [ /([^\\]|^)\u{2116}/gu,
	    "$1\\cyrchar\\textnumero{}" ],
	  [ /([^\\]|^)\u{2118}/gu,
	    "$1\\wp{}" ],
	  [ /([^\\]|^)\u{2119}/gu,
	    "$1\\mathbb{P}" ],
	  [ /([^\\]|^)\u{211A}/gu,
	    "$1\\mathbb{Q}" ],
	  [ /([^\\]|^)\u{211B}/gu,
	    "$1\\mathscr{R}" ],
	  [ /([^\\]|^)\u{211C}/gu,
	    "$1\\mathfrak{R}" ],
	  [ /([^\\]|^)\u{211D}/gu,
	    "$1\\mathbb{R}" ],
	  [ /([^\\]|^)\u{211E}/gu,
	    "$1\\Elzxrat{}" ],
	  [ /([^\\]|^)\u{2122}/gu,
	    "$1\\texttrademark{}" ],
	  [ /([^\\]|^)\u{2124}/gu,
	    "$1\\mathbb{Z}" ],
	  [ /([^\\]|^)\u{2126}/gu,
	    "$1\\Omega{}" ],
	  [ /([^\\]|^)\u{2127}/gu,
	    "$1\\mho{}" ],
	  [ /([^\\]|^)\u{2128}/gu,
	    "$1\\mathfrak{Z}" ],
	  [ /([^\\]|^)\u{2129}/gu,
	    "$1\\ElsevierGlyph{2129}" ],
	  [ /([^\\]|^)\u{212B}/gu,
	    "$1\\AA{}" ],
	  [ /([^\\]|^)\u{212C}/gu,
	    "$1\\mathscr{B}" ],
	  [ /([^\\]|^)\u{212D}/gu,
	    "$1\\mathfrak{C}" ],
	  [ /([^\\]|^)\u{212F}/gu,
	    "$1\\mathscr{e}" ],
	  [ /([^\\]|^)\u{2130}/gu,
	    "$1\\mathscr{E}" ],
	  [ /([^\\]|^)\u{2131}/gu,
	    "$1\\mathscr{F}" ],
	  [ /([^\\]|^)\u{2133}/gu,
	    "$1\\mathscr{M}" ],
	  [ /([^\\]|^)\u{2134}/gu,
	    "$1\\mathscr{o}" ],
	  [ /([^\\]|^)\u{2135}/gu,
	    "$1\\aleph{}" ],
	  [ /([^\\]|^)\u{2136}/gu,
	    "$1\\beth{}" ],
	  [ /([^\\]|^)\u{2137}/gu,
	    "$1\\gimel{}" ],
	  [ /([^\\]|^)\u{2138}/gu,
	    "$1\\daleth{}" ],
	  [ /([^\\]|^)\u{2153}/gu,
	    "$1\\textfrac{1}{3}" ],
	  [ /([^\\]|^)\u{2154}/gu,
	    "$1\\textfrac{2}{3}" ],
	  [ /([^\\]|^)\u{2155}/gu,
	    "$1\\textfrac{1}{5}" ],
	  [ /([^\\]|^)\u{2156}/gu,
	    "$1\\textfrac{2}{5}" ],
	  [ /([^\\]|^)\u{2157}/gu,
	    "$1\\textfrac{3}{5}" ],
	  [ /([^\\]|^)\u{2158}/gu,
	    "$1\\textfrac{4}{5}" ],
	  [ /([^\\]|^)\u{2159}/gu,
	    "$1\\textfrac{1}{6}" ],
	  [ /([^\\]|^)\u{215A}/gu,
	    "$1\\textfrac{5}{6}" ],
	  [ /([^\\]|^)\u{215B}/gu,
	    "$1\\textfrac{1}{8}" ],
	  [ /([^\\]|^)\u{215C}/gu,
	    "$1\\textfrac{3}{8}" ],
	  [ /([^\\]|^)\u{215D}/gu,
	    "$1\\textfrac{5}{8}" ],
	  [ /([^\\]|^)\u{215E}/gu,
	    "$1\\textfrac{7}{8}" ],
	  [ /([^\\]|^)\u{2190}/gu,
	    "$1\\leftarrow{}" ],
	  [ /([^\\]|^)\u{2191}/gu,
	    "$1\\uparrow{}" ],
	  [ /([^\\]|^)\u{2192}/gu,
	    "$1\\rightarrow{}" ],
	  [ /([^\\]|^)\u{2193}/gu,
	    "$1\\downarrow{}" ],
	  [ /([^\\]|^)\u{2194}/gu,
	    "$1\\leftrightarrow{}" ],
	  [ /([^\\]|^)\u{2195}/gu,
	    "$1\\updownarrow{}" ],
	  [ /([^\\]|^)\u{2196}/gu,
	    "$1\\nwarrow{}" ],
	  [ /([^\\]|^)\u{2197}/gu,
	    "$1\\nearrow{}" ],
	  [ /([^\\]|^)\u{2198}/gu,
	    "$1\\searrow{}" ],
	  [ /([^\\]|^)\u{2199}/gu,
	    "$1\\swarrow{}" ],
	  [ /([^\\]|^)\u{219A}/gu,
	    "$1\\nleftarrow{}" ],
	  [ /([^\\]|^)\u{219B}/gu,
	    "$1\\nrightarrow{}" ],
	  [ /([^\\]|^)\u{219C}/gu,
	    "$1\\arrowwaveright{}" ],
	  [ /([^\\]|^)\u{219D}/gu,
	    "$1\\arrowwaveright{}" ],
	  [ /([^\\]|^)\u{219E}/gu,
	    "$1\\twoheadleftarrow{}" ],
	  [ /([^\\]|^)\u{21A0}/gu,
	    "$1\\twoheadrightarrow{}" ],
	  [ /([^\\]|^)\u{21A2}/gu,
	    "$1\\leftarrowtail{}" ],
	  [ /([^\\]|^)\u{21A3}/gu,
	    "$1\\rightarrowtail{}" ],
	  [ /([^\\]|^)\u{21A6}/gu,
	    "$1\\mapsto{}" ],
	  [ /([^\\]|^)\u{21A9}/gu,
	    "$1\\hookleftarrow{}" ],
	  [ /([^\\]|^)\u{21AA}/gu,
	    "$1\\hookrightarrow{}" ],
	  [ /([^\\]|^)\u{21AB}/gu,
	    "$1\\looparrowleft{}" ],
	  [ /([^\\]|^)\u{21AC}/gu,
	    "$1\\looparrowright{}" ],
	  [ /([^\\]|^)\u{21AD}/gu,
	    "$1\\leftrightsquigarrow{}" ],
	  [ /([^\\]|^)\u{21AE}/gu,
	    "$1\\nleftrightarrow{}" ],
	  [ /([^\\]|^)\u{21B0}/gu,
	    "$1\\Lsh{}" ],
	  [ /([^\\]|^)\u{21B1}/gu,
	    "$1\\Rsh{}" ],
	  [ /([^\\]|^)\u{21B3}/gu,
	    "$1\\ElsevierGlyph{21B3}" ],
	  [ /([^\\]|^)\u{21B6}/gu,
	    "$1\\curvearrowleft{}" ],
	  [ /([^\\]|^)\u{21B7}/gu,
	    "$1\\curvearrowright{}" ],
	  [ /([^\\]|^)\u{21BA}/gu,
	    "$1\\circlearrowleft{}" ],
	  [ /([^\\]|^)\u{21BB}/gu,
	    "$1\\circlearrowright{}" ],
	  [ /([^\\]|^)\u{21BC}/gu,
	    "$1\\leftharpoonup{}" ],
	  [ /([^\\]|^)\u{21BD}/gu,
	    "$1\\leftharpoondown{}" ],
	  [ /([^\\]|^)\u{21BE}/gu,
	    "$1\\upharpoonright{}" ],
	  [ /([^\\]|^)\u{21BF}/gu,
	    "$1\\upharpoonleft{}" ],
	  [ /([^\\]|^)\u{21C0}/gu,
	    "$1\\rightharpoonup{}" ],
	  [ /([^\\]|^)\u{21C1}/gu,
	    "$1\\rightharpoondown{}" ],
	  [ /([^\\]|^)\u{21C2}/gu,
	    "$1\\downharpoonright{}" ],
	  [ /([^\\]|^)\u{21C3}/gu,
	    "$1\\downharpoonleft{}" ],
	  [ /([^\\]|^)\u{21C4}/gu,
	    "$1\\rightleftarrows{}" ],
	  [ /([^\\]|^)\u{21C5}/gu,
	    "$1\\dblarrowupdown{}" ],
	  [ /([^\\]|^)\u{21C6}/gu,
	    "$1\\leftrightarrows{}" ],
	  [ /([^\\]|^)\u{21C7}/gu,
	    "$1\\leftleftarrows{}" ],
	  [ /([^\\]|^)\u{21C8}/gu,
	    "$1\\upuparrows{}" ],
	  [ /([^\\]|^)\u{21C9}/gu,
	    "$1\\rightrightarrows{}" ],
	  [ /([^\\]|^)\u{21CA}/gu,
	    "$1\\downdownarrows{}" ],
	  [ /([^\\]|^)\u{21CB}/gu,
	    "$1\\leftrightharpoons{}" ],
	  [ /([^\\]|^)\u{21CC}/gu,
	    "$1\\rightleftharpoons{}" ],
	  [ /([^\\]|^)\u{21CD}/gu,
	    "$1\\nLeftarrow{}" ],
	  [ /([^\\]|^)\u{21CE}/gu,
	    "$1\\nLeftrightarrow{}" ],
	  [ /([^\\]|^)\u{21CF}/gu,
	    "$1\\nRightarrow{}" ],
	  [ /([^\\]|^)\u{21D0}/gu,
	    "$1\\Leftarrow{}" ],
	  [ /([^\\]|^)\u{21D1}/gu,
	    "$1\\Uparrow{}" ],
	  [ /([^\\]|^)\u{21D2}/gu,
	    "$1\\Rightarrow{}" ],
	  [ /([^\\]|^)\u{21D3}/gu,
	    "$1\\Downarrow{}" ],
	  [ /([^\\]|^)\u{21D4}/gu,
	    "$1\\Leftrightarrow{}" ],
	  [ /([^\\]|^)\u{21D5}/gu,
	    "$1\\Updownarrow{}" ],
	  [ /([^\\]|^)\u{21DA}/gu,
	    "$1\\Lleftarrow{}" ],
	  [ /([^\\]|^)\u{21DB}/gu,
	    "$1\\Rrightarrow{}" ],
	  [ /([^\\]|^)\u{21DD}/gu,
	    "$1\\rightsquigarrow{}" ],
	  [ /([^\\]|^)\u{21F5}/gu,
	    "$1\\DownArrowUpArrow{}" ],
	  [ /([^\\]|^)\u{2200}/gu,
	    "$1\\forall{}" ],
	  [ /([^\\]|^)\u{2201}/gu,
	    "$1\\complement{}" ],
	  [ /([^\\]|^)\u{2202}/gu,
	    "$1\\partial{}" ],
	  [ /([^\\]|^)\u{2203}/gu,
	    "$1\\exists{}" ],
	  [ /([^\\]|^)\u{2204}/gu,
	    "$1\\nexists{}" ],
	  [ /([^\\]|^)\u{2205}/gu,
	    "$1\\varnothing{}" ],
	  [ /([^\\]|^)\u{2207}/gu,
	    "$1\\nabla{}" ],
	  [ /([^\\]|^)\u{2208}/gu,
	    "$1\\in{}" ],
	  [ /([^\\]|^)\u{2209}/gu,
	    "$1\\not\\in{}" ],
	  [ /([^\\]|^)\u{220B}/gu,
	    "$1\\ni{}" ],
	  [ /([^\\]|^)\u{220C}/gu,
	    "$1\\not\\ni{}" ],
	  [ /([^\\]|^)\u{220F}/gu,
	    "$1\\prod{}" ],
	  [ /([^\\]|^)\u{2210}/gu,
	    "$1\\coprod{}" ],
	  [ /([^\\]|^)\u{2211}/gu,
	    "$1\\sum{}" ],
	  [ /([^\\]|^)\u{2213}/gu,
	    "$1\\mp{}" ],
	  [ /([^\\]|^)\u{2214}/gu,
	    "$1\\dotplus{}" ],
	  [ /([^\\]|^)\u{2216}/gu,
	    "$1\\setminus{}" ],
	  [ /([^\\]|^)\u{2217}/gu,
	    "$1{_\\ast}" ],
	  [ /([^\\]|^)\u{2218}/gu,
	    "$1\\circ{}" ],
	  [ /([^\\]|^)\u{2219}/gu,
	    "$1\\bullet{}" ],
	  [ /([^\\]|^)\u{221A}/gu,
	    "$1\\surd{}" ],
	  [ /([^\\]|^)\u{221D}/gu,
	    "$1\\propto{}" ],
	  [ /([^\\]|^)\u{221E}/gu,
	    "$1\\infty{}" ],
	  [ /([^\\]|^)\u{221F}/gu,
	    "$1\\rightangle{}" ],
	  [ /([^\\]|^)\u{2220}/gu,
	    "$1\\angle{}" ],
	  [ /([^\\]|^)\u{2221}/gu,
	    "$1\\measuredangle{}" ],
	  [ /([^\\]|^)\u{2222}/gu,
	    "$1\\sphericalangle{}" ],
	  [ /([^\\]|^)\u{2223}/gu,
	    "$1\\mid{}" ],
	  [ /([^\\]|^)\u{2224}/gu,
	    "$1\\nmid{}" ],
	  [ /([^\\]|^)\u{2225}/gu,
	    "$1\\parallel{}" ],
	  [ /([^\\]|^)\u{2226}/gu,
	    "$1\\nparallel{}" ],
	  [ /([^\\]|^)\u{2227}/gu,
	    "$1\\wedge{}" ],
	  [ /([^\\]|^)\u{2228}/gu,
	    "$1\\vee{}" ],
	  [ /([^\\]|^)\u{2229}/gu,
	    "$1\\cap{}" ],
	  [ /([^\\]|^)\u{222A}/gu,
	    "$1\\cup{}" ],
	  [ /([^\\]|^)\u{222B}/gu,
	    "$1\\int{}" ],
	  [ /([^\\]|^)\u{222C}/gu,
	    "$1\\int\\!\\int{}" ],
	  [ /([^\\]|^)\u{222D}/gu,
	    "$1\\int\\!\\int\\!\\int{}" ],
	  [ /([^\\]|^)\u{222E}/gu,
	    "$1\\oint{}" ],
	  [ /([^\\]|^)\u{222F}/gu,
	    "$1\\surfintegral{}" ],
	  [ /([^\\]|^)\u{2230}/gu,
	    "$1\\volintegral{}" ],
	  [ /([^\\]|^)\u{2231}/gu,
	    "$1\\clwintegral{}" ],
	  [ /([^\\]|^)\u{2232}/gu,
	    "$1\\ElsevierGlyph{2232}" ],
	  [ /([^\\]|^)\u{2233}/gu,
	    "$1\\ElsevierGlyph{2233}" ],
	  [ /([^\\]|^)\u{2234}/gu,
	    "$1\\therefore{}" ],
	  [ /([^\\]|^)\u{2235}/gu,
	    "$1\\because{}" ],
	  [ /([^\\]|^)\u{2237}/gu,
	    "$1\\Colon{}" ],
	  [ /([^\\]|^)\u{2238}/gu,
	    "$1\\ElsevierGlyph{2238}" ],
	  [ /([^\\]|^)\u{223A}/gu,
	    "$1\\mathbin{{:}\\!\\!{-}\\!\\!{:}}" ],
	  [ /([^\\]|^)\u{223B}/gu,
	    "$1\\homothetic{}" ],
	  [ /([^\\]|^)\u{223C}/gu,
	    "$1\\sim{}" ],
	  [ /([^\\]|^)\u{223D}/gu,
	    "$1\\backsim{}" ],
	  [ /([^\\]|^)\u{223E}/gu,
	    "$1\\lazysinv{}" ],
	  [ /([^\\]|^)\u{2240}/gu,
	    "$1\\wr{}" ],
	  [ /([^\\]|^)\u{2241}/gu,
	    "$1\\not\\sim{}" ],
	  [ /([^\\]|^)\u{2242}/gu,
	    "$1\\ElsevierGlyph{2242}" ],
	  [ /([^\\]|^)\u{2243}/gu,
	    "$1\\simeq{}" ],
	  [ /([^\\]|^)\u{2244}/gu,
	    "$1\\not\\simeq{}" ],
	  [ /([^\\]|^)\u{2245}/gu,
	    "$1\\cong{}" ],
	  [ /([^\\]|^)\u{2246}/gu,
	    "$1\\approxnotequal{}" ],
	  [ /([^\\]|^)\u{2247}/gu,
	    "$1\\not\\cong{}" ],
	  [ /([^\\]|^)\u{2248}/gu,
	    "$1\\approx{}" ],
	  [ /([^\\]|^)\u{2249}/gu,
	    "$1\\not\\approx{}" ],
	  [ /([^\\]|^)\u{224A}/gu,
	    "$1\\approxeq{}" ],
	  [ /([^\\]|^)\u{224B}/gu,
	    "$1\\tildetrpl{}" ],
	  [ /([^\\]|^)\u{224C}/gu,
	    "$1\\allequal{}" ],
	  [ /([^\\]|^)\u{224D}/gu,
	    "$1\\asymp{}" ],
	  [ /([^\\]|^)\u{224E}/gu,
	    "$1\\Bumpeq{}" ],
	  [ /([^\\]|^)\u{224F}/gu,
	    "$1\\bumpeq{}" ],
	  [ /([^\\]|^)\u{2250}/gu,
	    "$1\\doteq{}" ],
	  [ /([^\\]|^)\u{2251}/gu,
	    "$1\\doteqdot{}" ],
	  [ /([^\\]|^)\u{2252}/gu,
	    "$1\\fallingdotseq{}" ],
	  [ /([^\\]|^)\u{2253}/gu,
	    "$1\\risingdotseq{}" ],
	  [ /([^\\]|^)\u{2254}/gu,
	    "$1:=" ],
	  [ /([^\\]|^)\u{2255}/gu,
	    "$1=:" ],
	  [ /([^\\]|^)\u{2256}/gu,
	    "$1\\eqcirc{}" ],
	  [ /([^\\]|^)\u{2257}/gu,
	    "$1\\circeq{}" ],
	  [ /([^\\]|^)\u{2259}/gu,
	    "$1\\estimates{}" ],
	  [ /([^\\]|^)\u{225A}/gu,
	    "$1\\ElsevierGlyph{225A}" ],
	  [ /([^\\]|^)\u{225B}/gu,
	    "$1\\starequal{}" ],
	  [ /([^\\]|^)\u{225C}/gu,
	    "$1\\triangleq{}" ],
	  [ /([^\\]|^)\u{225F}/gu,
	    "$1\\ElsevierGlyph{225F}" ],
	  [ /([^\\]|^)\u{2260}/gu,
	    "$1\\not =" ],
	  [ /([^\\]|^)\u{2261}/gu,
	    "$1\\equiv{}" ],
	  [ /([^\\]|^)\u{2262}/gu,
	    "$1\\not\\equiv{}" ],
	  [ /([^\\]|^)\u{2264}/gu,
	    "$1\\leq{}" ],
	  [ /([^\\]|^)\u{2265}/gu,
	    "$1\\geq{}" ],
	  [ /([^\\]|^)\u{2266}/gu,
	    "$1\\leqq{}" ],
	  [ /([^\\]|^)\u{2267}/gu,
	    "$1\\geqq{}" ],
	  [ /([^\\]|^)\u{2268}/gu,
	    "$1\\lneqq{}" ],
	  [ /([^\\]|^)\u{2269}/gu,
	    "$1\\gneqq{}" ],
	  [ /([^\\]|^)\u{226A}/gu,
	    "$1\\ll{}" ],
	  [ /([^\\]|^)\u{226B}/gu,
	    "$1\\gg{}" ],
	  [ /([^\\]|^)\u{226C}/gu,
	    "$1\\between{}" ],
	  [ /([^\\]|^)\u{226D}/gu,
	    "$1\\not\\kern-0.3em\\times{}" ],
	  [ /([^\\]|^)\u{226E}/gu,
	    "$1\\not&lt;" ],
	  [ /([^\\]|^)\u{226F}/gu,
	    "$1\\not&gt;" ],
	  [ /([^\\]|^)\u{2270}/gu,
	    "$1\\not\\leq{}" ],
	  [ /([^\\]|^)\u{2271}/gu,
	    "$1\\not\\geq{}" ],
	  [ /([^\\]|^)\u{2272}/gu,
	    "$1\\lessequivlnt{}" ],
	  [ /([^\\]|^)\u{2273}/gu,
	    "$1\\greaterequivlnt{}" ],
	  [ /([^\\]|^)\u{2274}/gu,
	    "$1\\ElsevierGlyph{2274}" ],
	  [ /([^\\]|^)\u{2275}/gu,
	    "$1\\ElsevierGlyph{2275}" ],
	  [ /([^\\]|^)\u{2276}/gu,
	    "$1\\lessgtr{}" ],
	  [ /([^\\]|^)\u{2277}/gu,
	    "$1\\gtrless{}" ],
	  [ /([^\\]|^)\u{2278}/gu,
	    "$1\\notlessgreater{}" ],
	  [ /([^\\]|^)\u{2279}/gu,
	    "$1\\notgreaterless{}" ],
	  [ /([^\\]|^)\u{227A}/gu,
	    "$1\\prec{}" ],
	  [ /([^\\]|^)\u{227B}/gu,
	    "$1\\succ{}" ],
	  [ /([^\\]|^)\u{227C}/gu,
	    "$1\\preccurlyeq{}" ],
	  [ /([^\\]|^)\u{227D}/gu,
	    "$1\\succcurlyeq{}" ],
	  [ /([^\\]|^)\u{227E}/gu,
	    "$1\\precapprox{}" ],
	  [ /([^\\]|^)\u{227F}/gu,
	    "$1\\succapprox{}" ],
	  [ /([^\\]|^)\u{2280}/gu,
	    "$1\\not\\prec{}" ],
	  [ /([^\\]|^)\u{2281}/gu,
	    "$1\\not\\succ{}" ],
	  [ /([^\\]|^)\u{2282}/gu,
	    "$1\\subset{}" ],
	  [ /([^\\]|^)\u{2283}/gu,
	    "$1\\supset{}" ],
	  [ /([^\\]|^)\u{2284}/gu,
	    "$1\\not\\subset{}" ],
	  [ /([^\\]|^)\u{2285}/gu,
	    "$1\\not\\supset{}" ],
	  [ /([^\\]|^)\u{2286}/gu,
	    "$1\\subseteq{}" ],
	  [ /([^\\]|^)\u{2287}/gu,
	    "$1\\supseteq{}" ],
	  [ /([^\\]|^)\u{2288}/gu,
	    "$1\\not\\subseteq{}" ],
	  [ /([^\\]|^)\u{2289}/gu,
	    "$1\\not\\supseteq{}" ],
	  [ /([^\\]|^)\u{228A}/gu,
	    "$1\\subsetneq{}" ],
	  [ /([^\\]|^)\u{228B}/gu,
	    "$1\\supsetneq{}" ],
	  [ /([^\\]|^)\u{228E}/gu,
	    "$1\\uplus{}" ],
	  [ /([^\\]|^)\u{228F}/gu,
	    "$1\\sqsubset{}" ],
	  [ /([^\\]|^)\u{2290}/gu,
	    "$1\\sqsupset{}" ],
	  [ /([^\\]|^)\u{2291}/gu,
	    "$1\\sqsubseteq{}" ],
	  [ /([^\\]|^)\u{2292}/gu,
	    "$1\\sqsupseteq{}" ],
	  [ /([^\\]|^)\u{2293}/gu,
	    "$1\\sqcap{}" ],
	  [ /([^\\]|^)\u{2294}/gu,
	    "$1\\sqcup{}" ],
	  [ /([^\\]|^)\u{2295}/gu,
	    "$1\\oplus{}" ],
	  [ /([^\\]|^)\u{2296}/gu,
	    "$1\\ominus{}" ],
	  [ /([^\\]|^)\u{2297}/gu,
	    "$1\\otimes{}" ],
	  [ /([^\\]|^)\u{2298}/gu,
	    "$1\\oslash{}" ],
	  [ /([^\\]|^)\u{2299}/gu,
	    "$1\\odot{}" ],
	  [ /([^\\]|^)\u{229A}/gu,
	    "$1\\circledcirc{}" ],
	  [ /([^\\]|^)\u{229B}/gu,
	    "$1\\circledast{}" ],
	  [ /([^\\]|^)\u{229D}/gu,
	    "$1\\circleddash{}" ],
	  [ /([^\\]|^)\u{229E}/gu,
	    "$1\\boxplus{}" ],
	  [ /([^\\]|^)\u{229F}/gu,
	    "$1\\boxminus{}" ],
	  [ /([^\\]|^)\u{22A0}/gu,
	    "$1\\boxtimes{}" ],
	  [ /([^\\]|^)\u{22A1}/gu,
	    "$1\\boxdot{}" ],
	  [ /([^\\]|^)\u{22A2}/gu,
	    "$1\\vdash{}" ],
	  [ /([^\\]|^)\u{22A3}/gu,
	    "$1\\dashv{}" ],
	  [ /([^\\]|^)\u{22A4}/gu,
	    "$1\\top{}" ],
	  [ /([^\\]|^)\u{22A5}/gu,
	    "$1\\perp{}" ],
	  [ /([^\\]|^)\u{22A7}/gu,
	    "$1\\truestate{}" ],
	  [ /([^\\]|^)\u{22A8}/gu,
	    "$1\\forcesextra{}" ],
	  [ /([^\\]|^)\u{22A9}/gu,
	    "$1\\Vdash{}" ],
	  [ /([^\\]|^)\u{22AA}/gu,
	    "$1\\Vvdash{}" ],
	  [ /([^\\]|^)\u{22AB}/gu,
	    "$1\\VDash{}" ],
	  [ /([^\\]|^)\u{22AC}/gu,
	    "$1\\nvdash{}" ],
	  [ /([^\\]|^)\u{22AD}/gu,
	    "$1\\nvDash{}" ],
	  [ /([^\\]|^)\u{22AE}/gu,
	    "$1\\nVdash{}" ],
	  [ /([^\\]|^)\u{22AF}/gu,
	    "$1\\nVDash{}" ],
	  [ /([^\\]|^)\u{22B2}/gu,
	    "$1\\vartriangleleft{}" ],
	  [ /([^\\]|^)\u{22B3}/gu,
	    "$1\\vartriangleright{}" ],
	  [ /([^\\]|^)\u{22B4}/gu,
	    "$1\\trianglelefteq{}" ],
	  [ /([^\\]|^)\u{22B5}/gu,
	    "$1\\trianglerighteq{}" ],
	  [ /([^\\]|^)\u{22B6}/gu,
	    "$1\\original{}" ],
	  [ /([^\\]|^)\u{22B7}/gu,
	    "$1\\image{}" ],
	  [ /([^\\]|^)\u{22B8}/gu,
	    "$1\\multimap{}" ],
	  [ /([^\\]|^)\u{22B9}/gu,
	    "$1\\hermitconjmatrix{}" ],
	  [ /([^\\]|^)\u{22BA}/gu,
	    "$1\\intercal{}" ],
	  [ /([^\\]|^)\u{22BB}/gu,
	    "$1\\veebar{}" ],
	  [ /([^\\]|^)\u{22BE}/gu,
	    "$1\\rightanglearc{}" ],
	  [ /([^\\]|^)\u{22C0}/gu,
	    "$1\\ElsevierGlyph{22C0}" ],
	  [ /([^\\]|^)\u{22C1}/gu,
	    "$1\\ElsevierGlyph{22C1}" ],
	  [ /([^\\]|^)\u{22C2}/gu,
	    "$1\\bigcap{}" ],
	  [ /([^\\]|^)\u{22C3}/gu,
	    "$1\\bigcup{}" ],
	  [ /([^\\]|^)\u{22C4}/gu,
	    "$1\\diamond{}" ],
	  [ /([^\\]|^)\u{22C5}/gu,
	    "$1\\cdot{}" ],
	  [ /([^\\]|^)\u{22C6}/gu,
	    "$1\\star{}" ],
	  [ /([^\\]|^)\u{22C7}/gu,
	    "$1\\divideontimes{}" ],
	  [ /([^\\]|^)\u{22C8}/gu,
	    "$1\\bowtie{}" ],
	  [ /([^\\]|^)\u{22C9}/gu,
	    "$1\\ltimes{}" ],
	  [ /([^\\]|^)\u{22CA}/gu,
	    "$1\\rtimes{}" ],
	  [ /([^\\]|^)\u{22CB}/gu,
	    "$1\\leftthreetimes{}" ],
	  [ /([^\\]|^)\u{22CC}/gu,
	    "$1\\rightthreetimes{}" ],
	  [ /([^\\]|^)\u{22CD}/gu,
	    "$1\\backsimeq{}" ],
	  [ /([^\\]|^)\u{22CE}/gu,
	    "$1\\curlyvee{}" ],
	  [ /([^\\]|^)\u{22CF}/gu,
	    "$1\\curlywedge{}" ],
	  [ /([^\\]|^)\u{22D0}/gu,
	    "$1\\Subset{}" ],
	  [ /([^\\]|^)\u{22D1}/gu,
	    "$1\\Supset{}" ],
	  [ /([^\\]|^)\u{22D2}/gu,
	    "$1\\Cap{}" ],
	  [ /([^\\]|^)\u{22D3}/gu,
	    "$1\\Cup{}" ],
	  [ /([^\\]|^)\u{22D4}/gu,
	    "$1\\pitchfork{}" ],
	  [ /([^\\]|^)\u{22D6}/gu,
	    "$1\\lessdot{}" ],
	  [ /([^\\]|^)\u{22D7}/gu,
	    "$1\\gtrdot{}" ],
	  [ /([^\\]|^)\u{22D8}/gu,
	    "$1\\verymuchless{}" ],
	  [ /([^\\]|^)\u{22D9}/gu,
	    "$1\\verymuchgreater{}" ],
	  [ /([^\\]|^)\u{22DA}/gu,
	    "$1\\lesseqgtr{}" ],
	  [ /([^\\]|^)\u{22DB}/gu,
	    "$1\\gtreqless{}" ],
	  [ /([^\\]|^)\u{22DE}/gu,
	    "$1\\curlyeqprec{}" ],
	  [ /([^\\]|^)\u{22DF}/gu,
	    "$1\\curlyeqsucc{}" ],
	  [ /([^\\]|^)\u{22E2}/gu,
	    "$1\\not\\sqsubseteq{}" ],
	  [ /([^\\]|^)\u{22E3}/gu,
	    "$1\\not\\sqsupseteq{}" ],
	  [ /([^\\]|^)\u{22E5}/gu,
	    "$1\\Elzsqspne{}" ],
	  [ /([^\\]|^)\u{22E6}/gu,
	    "$1\\lnsim{}" ],
	  [ /([^\\]|^)\u{22E7}/gu,
	    "$1\\gnsim{}" ],
	  [ /([^\\]|^)\u{22E8}/gu,
	    "$1\\precedesnotsimilar{}" ],
	  [ /([^\\]|^)\u{22E9}/gu,
	    "$1\\succnsim{}" ],
	  [ /([^\\]|^)\u{22EA}/gu,
	    "$1\\ntriangleleft{}" ],
	  [ /([^\\]|^)\u{22EB}/gu,
	    "$1\\ntriangleright{}" ],
	  [ /([^\\]|^)\u{22EC}/gu,
	    "$1\\ntrianglelefteq{}" ],
	  [ /([^\\]|^)\u{22ED}/gu,
	    "$1\\ntrianglerighteq{}" ],
	  [ /([^\\]|^)\u{22EE}/gu,
	    "$1\\vdots{}" ],
	  [ /([^\\]|^)\u{22EF}/gu,
	    "$1\\cdots{}" ],
	  [ /([^\\]|^)\u{22F0}/gu,
	    "$1\\upslopeellipsis{}" ],
	  [ /([^\\]|^)\u{22F1}/gu,
	    "$1\\downslopeellipsis{}" ],
	  [ /([^\\]|^)\u{2305}/gu,
	    "$1\\barwedge{}" ],
	  [ /([^\\]|^)\u{2306}/gu,
	    "$1\\perspcorrespond{}" ],
	  [ /([^\\]|^)\u{2308}/gu,
	    "$1\\lceil{}" ],
	  [ /([^\\]|^)\u{2309}/gu,
	    "$1\\rceil{}" ],
	  [ /([^\\]|^)\u{230A}/gu,
	    "$1\\lfloor{}" ],
	  [ /([^\\]|^)\u{230B}/gu,
	    "$1\\rfloor{}" ],
	  [ /([^\\]|^)\u{2315}/gu,
	    "$1\\recorder{}" ],
	  [ /([^\\]|^)\u{2316}/gu,
	    "$1\\mathchar\"2208" ],
	  [ /([^\\]|^)\u{231C}/gu,
	    "$1\\ulcorner{}" ],
	  [ /([^\\]|^)\u{231D}/gu,
	    "$1\\urcorner{}" ],
	  [ /([^\\]|^)\u{231E}/gu,
	    "$1\\llcorner{}" ],
	  [ /([^\\]|^)\u{231F}/gu,
	    "$1\\lrcorner{}" ],
	  [ /([^\\]|^)\u{2322}/gu,
	    "$1\\frown{}" ],
	  [ /([^\\]|^)\u{2323}/gu,
	    "$1\\smile{}" ],
	  [ /([^\\]|^)\u{2329}/gu,
	    "$1\\langle{}" ],
	  [ /([^\\]|^)\u{232A}/gu,
	    "$1\\rangle{}" ],
	  [ /([^\\]|^)\u{233D}/gu,
	    "$1\\ElsevierGlyph{E838}" ],
	  [ /([^\\]|^)\u{23A3}/gu,
	    "$1\\Elzdlcorn{}" ],
	  [ /([^\\]|^)\u{23B0}/gu,
	    "$1\\lmoustache{}" ],
	  [ /([^\\]|^)\u{23B1}/gu,
	    "$1\\rmoustache{}" ],
	  [ /([^\\]|^)\u{2423}/gu,
	    "$1\\textvisiblespace{}" ],
	  [ /([^\\]|^)\u{2460}/gu,
	    "$1\\ding{172}" ],
	  [ /([^\\]|^)\u{2461}/gu,
	    "$1\\ding{173}" ],
	  [ /([^\\]|^)\u{2462}/gu,
	    "$1\\ding{174}" ],
	  [ /([^\\]|^)\u{2463}/gu,
	    "$1\\ding{175}" ],
	  [ /([^\\]|^)\u{2464}/gu,
	    "$1\\ding{176}" ],
	  [ /([^\\]|^)\u{2465}/gu,
	    "$1\\ding{177}" ],
	  [ /([^\\]|^)\u{2466}/gu,
	    "$1\\ding{178}" ],
	  [ /([^\\]|^)\u{2467}/gu,
	    "$1\\ding{179}" ],
	  [ /([^\\]|^)\u{2468}/gu,
	    "$1\\ding{180}" ],
	  [ /([^\\]|^)\u{2469}/gu,
	    "$1\\ding{181}" ],
	  [ /([^\\]|^)\u{24C8}/gu,
	    "$1\\circledS{}" ],
	  [ /([^\\]|^)\u{2506}/gu,
	    "$1\\Elzdshfnc{}" ],
	  [ /([^\\]|^)\u{2519}/gu,
	    "$1\\Elzsqfnw{}" ],
	  [ /([^\\]|^)\u{2571}/gu,
	    "$1\\diagup{}" ],
	  [ /([^\\]|^)\u{25A0}/gu,
	    "$1\\ding{110}" ],
	  [ /([^\\]|^)\u{25A1}/gu,
	    "$1\\square{}" ],
	  [ /([^\\]|^)\u{25AA}/gu,
	    "$1\\blacksquare{}" ],
	  [ /([^\\]|^)\u{25AD}/gu,
	    "$1\\fbox{~~}" ],
	  [ /([^\\]|^)\u{25AF}/gu,
	    "$1\\Elzvrecto{}" ],
	  [ /([^\\]|^)\u{25B1}/gu,
	    "$1\\ElsevierGlyph{E381}" ],
	  [ /([^\\]|^)\u{25B2}/gu,
	    "$1\\ding{115}" ],
	  [ /([^\\]|^)\u{25B3}/gu,
	    "$1\\bigtriangleup{}" ],
	  [ /([^\\]|^)\u{25B4}/gu,
	    "$1\\blacktriangle{}" ],
	  [ /([^\\]|^)\u{25B5}/gu,
	    "$1\\vartriangle{}" ],
	  [ /([^\\]|^)\u{25B8}/gu,
	    "$1\\blacktriangleright{}" ],
	  [ /([^\\]|^)\u{25B9}/gu,
	    "$1\\triangleright{}" ],
	  [ /([^\\]|^)\u{25BC}/gu,
	    "$1\\ding{116}" ],
	  [ /([^\\]|^)\u{25BD}/gu,
	    "$1\\bigtriangledown{}" ],
	  [ /([^\\]|^)\u{25BE}/gu,
	    "$1\\blacktriangledown{}" ],
	  [ /([^\\]|^)\u{25BF}/gu,
	    "$1\\triangledown{}" ],
	  [ /([^\\]|^)\u{25C2}/gu,
	    "$1\\blacktriangleleft{}" ],
	  [ /([^\\]|^)\u{25C3}/gu,
	    "$1\\triangleleft{}" ],
	  [ /([^\\]|^)\u{25C6}/gu,
	    "$1\\ding{117}" ],
	  [ /([^\\]|^)\u{25CA}/gu,
	    "$1\\lozenge{}" ],
	  [ /([^\\]|^)\u{25CB}/gu,
	    "$1\\bigcirc{}" ],
	  [ /([^\\]|^)\u{25CF}/gu,
	    "$1\\ding{108}" ],
	  [ /([^\\]|^)\u{25D0}/gu,
	    "$1\\Elzcirfl{}" ],
	  [ /([^\\]|^)\u{25D1}/gu,
	    "$1\\Elzcirfr{}" ],
	  [ /([^\\]|^)\u{25D2}/gu,
	    "$1\\Elzcirfb{}" ],
	  [ /([^\\]|^)\u{25D7}/gu,
	    "$1\\ding{119}" ],
	  [ /([^\\]|^)\u{25D8}/gu,
	    "$1\\Elzrvbull{}" ],
	  [ /([^\\]|^)\u{25E7}/gu,
	    "$1\\Elzsqfl{}" ],
	  [ /([^\\]|^)\u{25E8}/gu,
	    "$1\\Elzsqfr{}" ],
	  [ /([^\\]|^)\u{25EA}/gu,
	    "$1\\Elzsqfse{}" ],
	  [ /([^\\]|^)\u{25EF}/gu,
	    "$1\\bigcirc{}" ],
	  [ /([^\\]|^)\u{2605}/gu,
	    "$1\\ding{72}" ],
	  [ /([^\\]|^)\u{2606}/gu,
	    "$1\\ding{73}" ],
	  [ /([^\\]|^)\u{260E}/gu,
	    "$1\\ding{37}" ],
	  [ /([^\\]|^)\u{261B}/gu,
	    "$1\\ding{42}" ],
	  [ /([^\\]|^)\u{261E}/gu,
	    "$1\\ding{43}" ],
	  [ /([^\\]|^)\u{263E}/gu,
	    "$1\\rightmoon{}" ],
	  [ /([^\\]|^)\u{263F}/gu,
	    "$1\\mercury{}" ],
	  [ /([^\\]|^)\u{2640}/gu,
	    "$1\\venus{}" ],
	  [ /([^\\]|^)\u{2642}/gu,
	    "$1\\male{}" ],
	  [ /([^\\]|^)\u{2643}/gu,
	    "$1\\jupiter{}" ],
	  [ /([^\\]|^)\u{2644}/gu,
	    "$1\\saturn{}" ],
	  [ /([^\\]|^)\u{2645}/gu,
	    "$1\\uranus{}" ],
	  [ /([^\\]|^)\u{2646}/gu,
	    "$1\\neptune{}" ],
	  [ /([^\\]|^)\u{2647}/gu,
	    "$1\\pluto{}" ],
	  [ /([^\\]|^)\u{2648}/gu,
	    "$1\\aries{}" ],
	  [ /([^\\]|^)\u{2649}/gu,
	    "$1\\taurus{}" ],
	  [ /([^\\]|^)\u{264A}/gu,
	    "$1\\gemini{}" ],
	  [ /([^\\]|^)\u{264B}/gu,
	    "$1\\cancer{}" ],
	  [ /([^\\]|^)\u{264C}/gu,
	    "$1\\leo{}" ],
	  [ /([^\\]|^)\u{264D}/gu,
	    "$1\\virgo{}" ],
	  [ /([^\\]|^)\u{264E}/gu,
	    "$1\\libra{}" ],
	  [ /([^\\]|^)\u{264F}/gu,
	    "$1\\scorpio{}" ],
	  [ /([^\\]|^)\u{2650}/gu,
	    "$1\\sagittarius{}" ],
	  [ /([^\\]|^)\u{2651}/gu,
	    "$1\\capricornus{}" ],
	  [ /([^\\]|^)\u{2652}/gu,
	    "$1\\aquarius{}" ],
	  [ /([^\\]|^)\u{2653}/gu,
	    "$1\\pisces{}" ],
	  [ /([^\\]|^)\u{2660}/gu,
	    "$1\\ding{171}" ],
	  [ /([^\\]|^)\u{2662}/gu,
	    "$1\\diamond{}" ],
	  [ /([^\\]|^)\u{2663}/gu,
	    "$1\\ding{168}" ],
	  [ /([^\\]|^)\u{2665}/gu,
	    "$1\\ding{170}" ],
	  [ /([^\\]|^)\u{2666}/gu,
	    "$1\\ding{169}" ],
	  [ /([^\\]|^)\u{2669}/gu,
	    "$1\\quarternote{}" ],
	  [ /([^\\]|^)\u{266A}/gu,
	    "$1\\eighthnote{}" ],
	  [ /([^\\]|^)\u{266D}/gu,
	    "$1\\flat{}" ],
	  [ /([^\\]|^)\u{266E}/gu,
	    "$1\\natural{}" ],
	  [ /([^\\]|^)\u{266F}/gu,
	    "$1\\sharp{}" ],
	  [ /([^\\]|^)\u{2701}/gu,
	    "$1\\ding{33}" ],
	  [ /([^\\]|^)\u{2702}/gu,
	    "$1\\ding{34}" ],
	  [ /([^\\]|^)\u{2703}/gu,
	    "$1\\ding{35}" ],
	  [ /([^\\]|^)\u{2704}/gu,
	    "$1\\ding{36}" ],
	  [ /([^\\]|^)\u{2706}/gu,
	    "$1\\ding{38}" ],
	  [ /([^\\]|^)\u{2707}/gu,
	    "$1\\ding{39}" ],
	  [ /([^\\]|^)\u{2708}/gu,
	    "$1\\ding{40}" ],
	  [ /([^\\]|^)\u{2709}/gu,
	    "$1\\ding{41}" ],
	  [ /([^\\]|^)\u{270C}/gu,
	    "$1\\ding{44}" ],
	  [ /([^\\]|^)\u{270D}/gu,
	    "$1\\ding{45}" ],
	  [ /([^\\]|^)\u{270E}/gu,
	    "$1\\ding{46}" ],
	  [ /([^\\]|^)\u{270F}/gu,
	    "$1\\ding{47}" ],
	  [ /([^\\]|^)\u{2710}/gu,
	    "$1\\ding{48}" ],
	  [ /([^\\]|^)\u{2711}/gu,
	    "$1\\ding{49}" ],
	  [ /([^\\]|^)\u{2712}/gu,
	    "$1\\ding{50}" ],
	  [ /([^\\]|^)\u{2713}/gu,
	    "$1\\ding{51}" ],
	  [ /([^\\]|^)\u{2714}/gu,
	    "$1\\ding{52}" ],
	  [ /([^\\]|^)\u{2715}/gu,
	    "$1\\ding{53}" ],
	  [ /([^\\]|^)\u{2716}/gu,
	    "$1\\ding{54}" ],
	  [ /([^\\]|^)\u{2717}/gu,
	    "$1\\ding{55}" ],
	  [ /([^\\]|^)\u{2718}/gu,
	    "$1\\ding{56}" ],
	  [ /([^\\]|^)\u{2719}/gu,
	    "$1\\ding{57}" ],
	  [ /([^\\]|^)\u{271A}/gu,
	    "$1\\ding{58}" ],
	  [ /([^\\]|^)\u{271B}/gu,
	    "$1\\ding{59}" ],
	  [ /([^\\]|^)\u{271C}/gu,
	    "$1\\ding{60}" ],
	  [ /([^\\]|^)\u{271D}/gu,
	    "$1\\ding{61}" ],
	  [ /([^\\]|^)\u{271E}/gu,
	    "$1\\ding{62}" ],
	  [ /([^\\]|^)\u{271F}/gu,
	    "$1\\ding{63}" ],
	  [ /([^\\]|^)\u{2720}/gu,
	    "$1\\ding{64}" ],
	  [ /([^\\]|^)\u{2721}/gu,
	    "$1\\ding{65}" ],
	  [ /([^\\]|^)\u{2722}/gu,
	    "$1\\ding{66}" ],
	  [ /([^\\]|^)\u{2723}/gu,
	    "$1\\ding{67}" ],
	  [ /([^\\]|^)\u{2724}/gu,
	    "$1\\ding{68}" ],
	  [ /([^\\]|^)\u{2725}/gu,
	    "$1\\ding{69}" ],
	  [ /([^\\]|^)\u{2726}/gu,
	    "$1\\ding{70}" ],
	  [ /([^\\]|^)\u{2727}/gu,
	    "$1\\ding{71}" ],
	  [ /([^\\]|^)\u{2729}/gu,
	    "$1\\ding{73}" ],
	  [ /([^\\]|^)\u{272A}/gu,
	    "$1\\ding{74}" ],
	  [ /([^\\]|^)\u{272B}/gu,
	    "$1\\ding{75}" ],
	  [ /([^\\]|^)\u{272C}/gu,
	    "$1\\ding{76}" ],
	  [ /([^\\]|^)\u{272D}/gu,
	    "$1\\ding{77}" ],
	  [ /([^\\]|^)\u{272E}/gu,
	    "$1\\ding{78}" ],
	  [ /([^\\]|^)\u{272F}/gu,
	    "$1\\ding{79}" ],
	  [ /([^\\]|^)\u{2730}/gu,
	    "$1\\ding{80}" ],
	  [ /([^\\]|^)\u{2731}/gu,
	    "$1\\ding{81}" ],
	  [ /([^\\]|^)\u{2732}/gu,
	    "$1\\ding{82}" ],
	  [ /([^\\]|^)\u{2733}/gu,
	    "$1\\ding{83}" ],
	  [ /([^\\]|^)\u{2734}/gu,
	    "$1\\ding{84}" ],
	  [ /([^\\]|^)\u{2735}/gu,
	    "$1\\ding{85}" ],
	  [ /([^\\]|^)\u{2736}/gu,
	    "$1\\ding{86}" ],
	  [ /([^\\]|^)\u{2737}/gu,
	    "$1\\ding{87}" ],
	  [ /([^\\]|^)\u{2738}/gu,
	    "$1\\ding{88}" ],
	  [ /([^\\]|^)\u{2739}/gu,
	    "$1\\ding{89}" ],
	  [ /([^\\]|^)\u{273A}/gu,
	    "$1\\ding{90}" ],
	  [ /([^\\]|^)\u{273B}/gu,
	    "$1\\ding{91}" ],
	  [ /([^\\]|^)\u{273C}/gu,
	    "$1\\ding{92}" ],
	  [ /([^\\]|^)\u{273D}/gu,
	    "$1\\ding{93}" ],
	  [ /([^\\]|^)\u{273E}/gu,
	    "$1\\ding{94}" ],
	  [ /([^\\]|^)\u{273F}/gu,
	    "$1\\ding{95}" ],
	  [ /([^\\]|^)\u{2740}/gu,
	    "$1\\ding{96}" ],
	  [ /([^\\]|^)\u{2741}/gu,
	    "$1\\ding{97}" ],
	  [ /([^\\]|^)\u{2742}/gu,
	    "$1\\ding{98}" ],
	  [ /([^\\]|^)\u{2743}/gu,
	    "$1\\ding{99}" ],
	  [ /([^\\]|^)\u{2744}/gu,
	    "$1\\ding{100}" ],
	  [ /([^\\]|^)\u{2745}/gu,
	    "$1\\ding{101}" ],
	  [ /([^\\]|^)\u{2746}/gu,
	    "$1\\ding{102}" ],
	  [ /([^\\]|^)\u{2747}/gu,
	    "$1\\ding{103}" ],
	  [ /([^\\]|^)\u{2748}/gu,
	    "$1\\ding{104}" ],
	  [ /([^\\]|^)\u{2749}/gu,
	    "$1\\ding{105}" ],
	  [ /([^\\]|^)\u{274A}/gu,
	    "$1\\ding{106}" ],
	  [ /([^\\]|^)\u{274B}/gu,
	    "$1\\ding{107}" ],
	  [ /([^\\]|^)\u{274D}/gu,
	    "$1\\ding{109}" ],
	  [ /([^\\]|^)\u{274F}/gu,
	    "$1\\ding{111}" ],
	  [ /([^\\]|^)\u{2750}/gu,
	    "$1\\ding{112}" ],
	  [ /([^\\]|^)\u{2751}/gu,
	    "$1\\ding{113}" ],
	  [ /([^\\]|^)\u{2752}/gu,
	    "$1\\ding{114}" ],
	  [ /([^\\]|^)\u{2756}/gu,
	    "$1\\ding{118}" ],
	  [ /([^\\]|^)\u{2758}/gu,
	    "$1\\ding{120}" ],
	  [ /([^\\]|^)\u{2759}/gu,
	    "$1\\ding{121}" ],
	  [ /([^\\]|^)\u{275A}/gu,
	    "$1\\ding{122}" ],
	  [ /([^\\]|^)\u{275B}/gu,
	    "$1\\ding{123}" ],
	  [ /([^\\]|^)\u{275C}/gu,
	    "$1\\ding{124}" ],
	  [ /([^\\]|^)\u{275D}/gu,
	    "$1\\ding{125}" ],
	  [ /([^\\]|^)\u{275E}/gu,
	    "$1\\ding{126}" ],
	  [ /([^\\]|^)\u{2761}/gu,
	    "$1\\ding{161}" ],
	  [ /([^\\]|^)\u{2762}/gu,
	    "$1\\ding{162}" ],
	  [ /([^\\]|^)\u{2763}/gu,
	    "$1\\ding{163}" ],
	  [ /([^\\]|^)\u{2764}/gu,
	    "$1\\ding{164}" ],
	  [ /([^\\]|^)\u{2765}/gu,
	    "$1\\ding{165}" ],
	  [ /([^\\]|^)\u{2766}/gu,
	    "$1\\ding{166}" ],
	  [ /([^\\]|^)\u{2767}/gu,
	    "$1\\ding{167}" ],
	  [ /([^\\]|^)\u{2776}/gu,
	    "$1\\ding{182}" ],
	  [ /([^\\]|^)\u{2777}/gu,
	    "$1\\ding{183}" ],
	  [ /([^\\]|^)\u{2778}/gu,
	    "$1\\ding{184}" ],
	  [ /([^\\]|^)\u{2779}/gu,
	    "$1\\ding{185}" ],
	  [ /([^\\]|^)\u{277A}/gu,
	    "$1\\ding{186}" ],
	  [ /([^\\]|^)\u{277B}/gu,
	    "$1\\ding{187}" ],
	  [ /([^\\]|^)\u{277C}/gu,
	    "$1\\ding{188}" ],
	  [ /([^\\]|^)\u{277D}/gu,
	    "$1\\ding{189}" ],
	  [ /([^\\]|^)\u{277E}/gu,
	    "$1\\ding{190}" ],
	  [ /([^\\]|^)\u{277F}/gu,
	    "$1\\ding{191}" ],
	  [ /([^\\]|^)\u{2780}/gu,
	    "$1\\ding{192}" ],
	  [ /([^\\]|^)\u{2781}/gu,
	    "$1\\ding{193}" ],
	  [ /([^\\]|^)\u{2782}/gu,
	    "$1\\ding{194}" ],
	  [ /([^\\]|^)\u{2783}/gu,
	    "$1\\ding{195}" ],
	  [ /([^\\]|^)\u{2784}/gu,
	    "$1\\ding{196}" ],
	  [ /([^\\]|^)\u{2785}/gu,
	    "$1\\ding{197}" ],
	  [ /([^\\]|^)\u{2786}/gu,
	    "$1\\ding{198}" ],
	  [ /([^\\]|^)\u{2787}/gu,
	    "$1\\ding{199}" ],
	  [ /([^\\]|^)\u{2788}/gu,
	    "$1\\ding{200}" ],
	  [ /([^\\]|^)\u{2789}/gu,
	    "$1\\ding{201}" ],
	  [ /([^\\]|^)\u{278A}/gu,
	    "$1\\ding{202}" ],
	  [ /([^\\]|^)\u{278B}/gu,
	    "$1\\ding{203}" ],
	  [ /([^\\]|^)\u{278C}/gu,
	    "$1\\ding{204}" ],
	  [ /([^\\]|^)\u{278D}/gu,
	    "$1\\ding{205}" ],
	  [ /([^\\]|^)\u{278E}/gu,
	    "$1\\ding{206}" ],
	  [ /([^\\]|^)\u{278F}/gu,
	    "$1\\ding{207}" ],
	  [ /([^\\]|^)\u{2790}/gu,
	    "$1\\ding{208}" ],
	  [ /([^\\]|^)\u{2791}/gu,
	    "$1\\ding{209}" ],
	  [ /([^\\]|^)\u{2792}/gu,
	    "$1\\ding{210}" ],
	  [ /([^\\]|^)\u{2793}/gu,
	    "$1\\ding{211}" ],
	  [ /([^\\]|^)\u{2794}/gu,
	    "$1\\ding{212}" ],
	  [ /([^\\]|^)\u{2798}/gu,
	    "$1\\ding{216}" ],
	  [ /([^\\]|^)\u{2799}/gu,
	    "$1\\ding{217}" ],
	  [ /([^\\]|^)\u{279A}/gu,
	    "$1\\ding{218}" ],
	  [ /([^\\]|^)\u{279B}/gu,
	    "$1\\ding{219}" ],
	  [ /([^\\]|^)\u{279C}/gu,
	    "$1\\ding{220}" ],
	  [ /([^\\]|^)\u{279D}/gu,
	    "$1\\ding{221}" ],
	  [ /([^\\]|^)\u{279E}/gu,
	    "$1\\ding{222}" ],
	  [ /([^\\]|^)\u{279F}/gu,
	    "$1\\ding{223}" ],
	  [ /([^\\]|^)\u{27A0}/gu,
	    "$1\\ding{224}" ],
	  [ /([^\\]|^)\u{27A1}/gu,
	    "$1\\ding{225}" ],
	  [ /([^\\]|^)\u{27A2}/gu,
	    "$1\\ding{226}" ],
	  [ /([^\\]|^)\u{27A3}/gu,
	    "$1\\ding{227}" ],
	  [ /([^\\]|^)\u{27A4}/gu,
	    "$1\\ding{228}" ],
	  [ /([^\\]|^)\u{27A5}/gu,
	    "$1\\ding{229}" ],
	  [ /([^\\]|^)\u{27A6}/gu,
	    "$1\\ding{230}" ],
	  [ /([^\\]|^)\u{27A7}/gu,
	    "$1\\ding{231}" ],
	  [ /([^\\]|^)\u{27A8}/gu,
	    "$1\\ding{232}" ],
	  [ /([^\\]|^)\u{27A9}/gu,
	    "$1\\ding{233}" ],
	  [ /([^\\]|^)\u{27AA}/gu,
	    "$1\\ding{234}" ],
	  [ /([^\\]|^)\u{27AB}/gu,
	    "$1\\ding{235}" ],
	  [ /([^\\]|^)\u{27AC}/gu,
	    "$1\\ding{236}" ],
	  [ /([^\\]|^)\u{27AD}/gu,
	    "$1\\ding{237}" ],
	  [ /([^\\]|^)\u{27AE}/gu,
	    "$1\\ding{238}" ],
	  [ /([^\\]|^)\u{27AF}/gu,
	    "$1\\ding{239}" ],
	  [ /([^\\]|^)\u{27B1}/gu,
	    "$1\\ding{241}" ],
	  [ /([^\\]|^)\u{27B2}/gu,
	    "$1\\ding{242}" ],
	  [ /([^\\]|^)\u{27B3}/gu,
	    "$1\\ding{243}" ],
	  [ /([^\\]|^)\u{27B4}/gu,
	    "$1\\ding{244}" ],
	  [ /([^\\]|^)\u{27B5}/gu,
	    "$1\\ding{245}" ],
	  [ /([^\\]|^)\u{27B6}/gu,
	    "$1\\ding{246}" ],
	  [ /([^\\]|^)\u{27B7}/gu,
	    "$1\\ding{247}" ],
	  [ /([^\\]|^)\u{27B8}/gu,
	    "$1\\ding{248}" ],
	  [ /([^\\]|^)\u{27B9}/gu,
	    "$1\\ding{249}" ],
	  [ /([^\\]|^)\u{27BA}/gu,
	    "$1\\ding{250}" ],
	  [ /([^\\]|^)\u{27BB}/gu,
	    "$1\\ding{251}" ],
	  [ /([^\\]|^)\u{27BC}/gu,
	    "$1\\ding{252}" ],
	  [ /([^\\]|^)\u{27BD}/gu,
	    "$1\\ding{253}" ],
	  [ /([^\\]|^)\u{27BE}/gu,
	    "$1\\ding{254}" ],
	  [ /([^\\]|^)\u{27F5}/gu,
	    "$1\\longleftarrow{}" ],
	  [ /([^\\]|^)\u{27F6}/gu,
	    "$1\\longrightarrow{}" ],
	  [ /([^\\]|^)\u{27F7}/gu,
	    "$1\\longleftrightarrow{}" ],
	  [ /([^\\]|^)\u{27F8}/gu,
	    "$1\\Longleftarrow{}" ],
	  [ /([^\\]|^)\u{27F9}/gu,
	    "$1\\Longrightarrow{}" ],
	  [ /([^\\]|^)\u{27FA}/gu,
	    "$1\\Longleftrightarrow{}" ],
	  [ /([^\\]|^)\u{27FC}/gu,
	    "$1\\longmapsto{}" ],
	  [ /([^\\]|^)\u{27FF}/gu,
	    "$1\\sim\\joinrel\\leadsto" ],
	  [ /([^\\]|^)\u{2905}/gu,
	    "$1\\ElsevierGlyph{E212}" ],
	  [ /([^\\]|^)\u{2912}/gu,
	    "$1\\UpArrowBar{}" ],
	  [ /([^\\]|^)\u{2913}/gu,
	    "$1\\DownArrowBar{}" ],
	  [ /([^\\]|^)\u{2923}/gu,
	    "$1\\ElsevierGlyph{E20C}" ],
	  [ /([^\\]|^)\u{2924}/gu,
	    "$1\\ElsevierGlyph{E20D}" ],
	  [ /([^\\]|^)\u{2925}/gu,
	    "$1\\ElsevierGlyph{E20B}" ],
	  [ /([^\\]|^)\u{2926}/gu,
	    "$1\\ElsevierGlyph{E20A}" ],
	  [ /([^\\]|^)\u{2927}/gu,
	    "$1\\ElsevierGlyph{E211}" ],
	  [ /([^\\]|^)\u{2928}/gu,
	    "$1\\ElsevierGlyph{E20E}" ],
	  [ /([^\\]|^)\u{2929}/gu,
	    "$1\\ElsevierGlyph{E20F}" ],
	  [ /([^\\]|^)\u{292A}/gu,
	    "$1\\ElsevierGlyph{E210}" ],
	  [ /([^\\]|^)\u{2933}/gu,
	    "$1\\ElsevierGlyph{E21C}" ],
	  [ /([^\\]|^)\u{2936}/gu,
	    "$1\\ElsevierGlyph{E21A}" ],
	  [ /([^\\]|^)\u{2937}/gu,
	    "$1\\ElsevierGlyph{E219}" ],
	  [ /([^\\]|^)\u{2940}/gu,
	    "$1\\Elolarr{}" ],
	  [ /([^\\]|^)\u{2941}/gu,
	    "$1\\Elorarr{}" ],
	  [ /([^\\]|^)\u{2942}/gu,
	    "$1\\ElzRlarr{}" ],
	  [ /([^\\]|^)\u{2944}/gu,
	    "$1\\ElzrLarr{}" ],
	  [ /([^\\]|^)\u{2947}/gu,
	    "$1\\Elzrarrx{}" ],
	  [ /([^\\]|^)\u{294E}/gu,
	    "$1\\LeftRightVector{}" ],
	  [ /([^\\]|^)\u{294F}/gu,
	    "$1\\RightUpDownVector{}" ],
	  [ /([^\\]|^)\u{2950}/gu,
	    "$1\\DownLeftRightVector{}" ],
	  [ /([^\\]|^)\u{2951}/gu,
	    "$1\\LeftUpDownVector{}" ],
	  [ /([^\\]|^)\u{2952}/gu,
	    "$1\\LeftVectorBar{}" ],
	  [ /([^\\]|^)\u{2953}/gu,
	    "$1\\RightVectorBar{}" ],
	  [ /([^\\]|^)\u{2954}/gu,
	    "$1\\RightUpVectorBar{}" ],
	  [ /([^\\]|^)\u{2955}/gu,
	    "$1\\RightDownVectorBar{}" ],
	  [ /([^\\]|^)\u{2956}/gu,
	    "$1\\DownLeftVectorBar{}" ],
	  [ /([^\\]|^)\u{2957}/gu,
	    "$1\\DownRightVectorBar{}" ],
	  [ /([^\\]|^)\u{2958}/gu,
	    "$1\\LeftUpVectorBar{}" ],
	  [ /([^\\]|^)\u{2959}/gu,
	    "$1\\LeftDownVectorBar{}" ],
	  [ /([^\\]|^)\u{295A}/gu,
	    "$1\\LeftTeeVector{}" ],
	  [ /([^\\]|^)\u{295B}/gu,
	    "$1\\RightTeeVector{}" ],
	  [ /([^\\]|^)\u{295C}/gu,
	    "$1\\RightUpTeeVector{}" ],
	  [ /([^\\]|^)\u{295D}/gu,
	    "$1\\RightDownTeeVector{}" ],
	  [ /([^\\]|^)\u{295E}/gu,
	    "$1\\DownLeftTeeVector{}" ],
	  [ /([^\\]|^)\u{295F}/gu,
	    "$1\\DownRightTeeVector{}" ],
	  [ /([^\\]|^)\u{2960}/gu,
	    "$1\\LeftUpTeeVector{}" ],
	  [ /([^\\]|^)\u{2961}/gu,
	    "$1\\LeftDownTeeVector{}" ],
	  [ /([^\\]|^)\u{296E}/gu,
	    "$1\\UpEquilibrium{}" ],
	  [ /([^\\]|^)\u{296F}/gu,
	    "$1\\ReverseUpEquilibrium{}" ],
	  [ /([^\\]|^)\u{2970}/gu,
	    "$1\\RoundImplies{}" ],
	  [ /([^\\]|^)\u{297C}/gu,
	    "$1\\ElsevierGlyph{E214}" ],
	  [ /([^\\]|^)\u{297D}/gu,
	    "$1\\ElsevierGlyph{E215}" ],
	  [ /([^\\]|^)\u{2980}/gu,
	    "$1\\Elztfnc{}" ],
	  [ /([^\\]|^)\u{2985}/gu,
	    "$1\\ElsevierGlyph{3018}" ],
	  [ /([^\\]|^)\u{2986}/gu,
	    "$1\\Elroang{}" ],
	  [ /([^\\]|^)\u{2993}/gu,
	    "$1&lt;\\kern-0.58em(" ],
	  [ /([^\\]|^)\u{2994}/gu,
	    "$1\\ElsevierGlyph{E291}" ],
	  [ /([^\\]|^)\u{2999}/gu,
	    "$1\\Elzddfnc{}" ],
	  [ /([^\\]|^)\u{299C}/gu,
	    "$1\\Angle{}" ],
	  [ /([^\\]|^)\u{29A0}/gu,
	    "$1\\Elzlpargt{}" ],
	  [ /([^\\]|^)\u{29B5}/gu,
	    "$1\\ElsevierGlyph{E260}" ],
	  [ /([^\\]|^)\u{29B6}/gu,
	    "$1\\ElsevierGlyph{E61B}" ],
	  [ /([^\\]|^)\u{29CA}/gu,
	    "$1\\ElzLap{}" ],
	  [ /([^\\]|^)\u{29CB}/gu,
	    "$1\\Elzdefas{}" ],
	  [ /([^\\]|^)\u{29CF}/gu,
	    "$1\\LeftTriangleBar{}" ],
	  [ /([^\\]|^)\u{29D0}/gu,
	    "$1\\RightTriangleBar{}" ],
	  [ /([^\\]|^)\u{29DC}/gu,
	    "$1\\ElsevierGlyph{E372}" ],
	  [ /([^\\]|^)\u{29EB}/gu,
	    "$1\\blacklozenge{}" ],
	  [ /([^\\]|^)\u{29F4}/gu,
	    "$1\\RuleDelayed{}" ],
	  [ /([^\\]|^)\u{2A04}/gu,
	    "$1\\Elxuplus{}" ],
	  [ /([^\\]|^)\u{2A05}/gu,
	    "$1\\ElzThr{}" ],
	  [ /([^\\]|^)\u{2A06}/gu,
	    "$1\\Elxsqcup{}" ],
	  [ /([^\\]|^)\u{2A07}/gu,
	    "$1\\ElzInf{}" ],
	  [ /([^\\]|^)\u{2A08}/gu,
	    "$1\\ElzSup{}" ],
	  [ /([^\\]|^)\u{2A0D}/gu,
	    "$1\\ElzCint{}" ],
	  [ /([^\\]|^)\u{2A0F}/gu,
	    "$1\\clockoint{}" ],
	  [ /([^\\]|^)\u{2A10}/gu,
	    "$1\\ElsevierGlyph{E395}" ],
	  [ /([^\\]|^)\u{2A16}/gu,
	    "$1\\sqrint{}" ],
	  [ /([^\\]|^)\u{2A25}/gu,
	    "$1\\ElsevierGlyph{E25A}" ],
	  [ /([^\\]|^)\u{2A2A}/gu,
	    "$1\\ElsevierGlyph{E25B}" ],
	  [ /([^\\]|^)\u{2A2D}/gu,
	    "$1\\ElsevierGlyph{E25C}" ],
	  [ /([^\\]|^)\u{2A2E}/gu,
	    "$1\\ElsevierGlyph{E25D}" ],
	  [ /([^\\]|^)\u{2A2F}/gu,
	    "$1\\ElzTimes{}" ],
	  [ /([^\\]|^)\u{2A34}/gu,
	    "$1\\ElsevierGlyph{E25E}" ],
	  [ /([^\\]|^)\u{2A35}/gu,
	    "$1\\ElsevierGlyph{E25E}" ],
	  [ /([^\\]|^)\u{2A3C}/gu,
	    "$1\\ElsevierGlyph{E259}" ],
	  [ /([^\\]|^)\u{2A3F}/gu,
	    "$1\\amalg{}" ],
	  [ /([^\\]|^)\u{2A53}/gu,
	    "$1\\ElzAnd{}" ],
	  [ /([^\\]|^)\u{2A54}/gu,
	    "$1\\ElzOr{}" ],
	  [ /([^\\]|^)\u{2A55}/gu,
	    "$1\\ElsevierGlyph{E36E}" ],
	  [ /([^\\]|^)\u{2A56}/gu,
	    "$1\\ElOr{}" ],
	  [ /([^\\]|^)\u{2A5E}/gu,
	    "$1\\perspcorrespond{}" ],
	  [ /([^\\]|^)\u{2A5F}/gu,
	    "$1\\Elzminhat{}" ],
	  [ /([^\\]|^)\u{2A63}/gu,
	    "$1\\ElsevierGlyph{225A}" ],
	  [ /([^\\]|^)\u{2A6E}/gu,
	    "$1\\stackrel{*}{=}" ],
	  [ /([^\\]|^)\u{2A75}/gu,
	    "$1\\Equal{}" ],
	  [ /([^\\]|^)\u{2A7D}/gu,
	    "$1\\leqslant{}" ],
	  [ /([^\\]|^)\u{2A7E}/gu,
	    "$1\\geqslant{}" ],
	  [ /([^\\]|^)\u{2A85}/gu,
	    "$1\\lessapprox{}" ],
	  [ /([^\\]|^)\u{2A86}/gu,
	    "$1\\gtrapprox{}" ],
	  [ /([^\\]|^)\u{2A87}/gu,
	    "$1\\lneq{}" ],
	  [ /([^\\]|^)\u{2A88}/gu,
	    "$1\\gneq{}" ],
	  [ /([^\\]|^)\u{2A89}/gu,
	    "$1\\lnapprox{}" ],
	  [ /([^\\]|^)\u{2A8A}/gu,
	    "$1\\gnapprox{}" ],
	  [ /([^\\]|^)\u{2A8B}/gu,
	    "$1\\lesseqqgtr{}" ],
	  [ /([^\\]|^)\u{2A8C}/gu,
	    "$1\\gtreqqless{}" ],
	  [ /([^\\]|^)\u{2A95}/gu,
	    "$1\\eqslantless{}" ],
	  [ /([^\\]|^)\u{2A96}/gu,
	    "$1\\eqslantgtr{}" ],
	  [ /([^\\]|^)\u{2A9D}/gu,
	    "$1\\Pisymbol{ppi020}{117}" ],
	  [ /([^\\]|^)\u{2A9E}/gu,
	    "$1\\Pisymbol{ppi020}{105}" ],
	  [ /([^\\]|^)\u{2AA1}/gu,
	    "$1\\NestedLessLess{}" ],
	  [ /([^\\]|^)\u{2AA2}/gu,
	    "$1\\NestedGreaterGreater{}" ],
	  [ /([^\\]|^)\u{2AAF}/gu,
	    "$1\\preceq{}" ],
	  [ /([^\\]|^)\u{2AB0}/gu,
	    "$1\\succeq{}" ],
	  [ /([^\\]|^)\u{2AB5}/gu,
	    "$1\\precneqq{}" ],
	  [ /([^\\]|^)\u{2AB6}/gu,
	    "$1\\succneqq{}" ],
	  [ /([^\\]|^)\u{2AB7}/gu,
	    "$1\\precapprox{}" ],
	  [ /([^\\]|^)\u{2AB8}/gu,
	    "$1\\succapprox{}" ],
	  [ /([^\\]|^)\u{2AB9}/gu,
	    "$1\\precnapprox{}" ],
	  [ /([^\\]|^)\u{2ABA}/gu,
	    "$1\\succnapprox{}" ],
	  [ /([^\\]|^)\u{2AC5}/gu,
	    "$1\\subseteqq{}" ],
	  [ /([^\\]|^)\u{2AC6}/gu,
	    "$1\\supseteqq{}" ],
	  [ /([^\\]|^)\u{2ACB}/gu,
	    "$1\\subsetneqq{}" ],
	  [ /([^\\]|^)\u{2ACC}/gu,
	    "$1\\supsetneqq{}" ],
	  [ /([^\\]|^)\u{2AEB}/gu,
	    "$1\\ElsevierGlyph{E30D}" ],
	  [ /([^\\]|^)\u{2AF6}/gu,
	    "$1\\Elztdcol{}" ],
	  [ /([^\\]|^)\u{2AFD}/gu,
	    "$1{{/}\\!\\!{/}}" ],
	  [ /([^\\]|^)\u{300A}/gu,
	    "$1\\ElsevierGlyph{300A}" ],
	  [ /([^\\]|^)\u{300B}/gu,
	    "$1\\ElsevierGlyph{300B}" ],
	  [ /([^\\]|^)\u{3018}/gu,
	    "$1\\ElsevierGlyph{3018}" ],
	  [ /([^\\]|^)\u{3019}/gu,
	    "$1\\ElsevierGlyph{3019}" ],
	  [ /([^\\]|^)\u{301A}/gu,
	    "$1\\openbracketleft{}" ],
	  [ /([^\\]|^)\u{301B}/gu,
	    "$1\\openbracketright{}" ],
	  [ /([^\\]|^)\u{FB00}/gu,
	    "$1ff" ],
	  [ /([^\\]|^)\u{FB01}/gu,
	    "$1fi" ],
	  [ /([^\\]|^)\u{FB02}/gu,
	    "$1fl" ],
	  [ /([^\\]|^)\u{FB03}/gu,
	    "$1ffi" ],
	  [ /([^\\]|^)\u{FB04}/gu,
	    "$1ffl" ],
	  [ /([^\\]|^)\u{D400}/gu,
	    "$1\\mathbf{A}" ],
	  [ /([^\\]|^)\u{D401}/gu,
	    "$1\\mathbf{B}" ],
	  [ /([^\\]|^)\u{D402}/gu,
	    "$1\\mathbf{C}" ],
	  [ /([^\\]|^)\u{D403}/gu,
	    "$1\\mathbf{D}" ],
	  [ /([^\\]|^)\u{D404}/gu,
	    "$1\\mathbf{E}" ],
	  [ /([^\\]|^)\u{D405}/gu,
	    "$1\\mathbf{F}" ],
	  [ /([^\\]|^)\u{D406}/gu,
	    "$1\\mathbf{G}" ],
	  [ /([^\\]|^)\u{D407}/gu,
	    "$1\\mathbf{H}" ],
	  [ /([^\\]|^)\u{D408}/gu,
	    "$1\\mathbf{I}" ],
	  [ /([^\\]|^)\u{D409}/gu,
	    "$1\\mathbf{J}" ],
	  [ /([^\\]|^)\u{D40A}/gu,
	    "$1\\mathbf{K}" ],
	  [ /([^\\]|^)\u{D40B}/gu,
	    "$1\\mathbf{L}" ],
	  [ /([^\\]|^)\u{D40C}/gu,
	    "$1\\mathbf{M}" ],
	  [ /([^\\]|^)\u{D40D}/gu,
	    "$1\\mathbf{N}" ],
	  [ /([^\\]|^)\u{D40E}/gu,
	    "$1\\mathbf{O}" ],
	  [ /([^\\]|^)\u{D40F}/gu,
	    "$1\\mathbf{P}" ],
	  [ /([^\\]|^)\u{D410}/gu,
	    "$1\\mathbf{Q}" ],
	  [ /([^\\]|^)\u{D411}/gu,
	    "$1\\mathbf{R}" ],
	  [ /([^\\]|^)\u{D412}/gu,
	    "$1\\mathbf{S}" ],
	  [ /([^\\]|^)\u{D413}/gu,
	    "$1\\mathbf{T}" ],
	  [ /([^\\]|^)\u{D414}/gu,
	    "$1\\mathbf{U}" ],
	  [ /([^\\]|^)\u{D415}/gu,
	    "$1\\mathbf{V}" ],
	  [ /([^\\]|^)\u{D416}/gu,
	    "$1\\mathbf{W}" ],
	  [ /([^\\]|^)\u{D417}/gu,
	    "$1\\mathbf{X}" ],
	  [ /([^\\]|^)\u{D418}/gu,
	    "$1\\mathbf{Y}" ],
	  [ /([^\\]|^)\u{D419}/gu,
	    "$1\\mathbf{Z}" ],
	  [ /([^\\]|^)\u{D41A}/gu,
	    "$1\\mathbf{a}" ],
	  [ /([^\\]|^)\u{D41B}/gu,
	    "$1\\mathbf{b}" ],
	  [ /([^\\]|^)\u{D41C}/gu,
	    "$1\\mathbf{c}" ],
	  [ /([^\\]|^)\u{D41D}/gu,
	    "$1\\mathbf{d}" ],
	  [ /([^\\]|^)\u{D41E}/gu,
	    "$1\\mathbf{e}" ],
	  [ /([^\\]|^)\u{D41F}/gu,
	    "$1\\mathbf{f}" ],
	  [ /([^\\]|^)\u{D420}/gu,
	    "$1\\mathbf{g}" ],
	  [ /([^\\]|^)\u{D421}/gu,
	    "$1\\mathbf{h}" ],
	  [ /([^\\]|^)\u{D422}/gu,
	    "$1\\mathbf{i}" ],
	  [ /([^\\]|^)\u{D423}/gu,
	    "$1\\mathbf{j}" ],
	  [ /([^\\]|^)\u{D424}/gu,
	    "$1\\mathbf{k}" ],
	  [ /([^\\]|^)\u{D425}/gu,
	    "$1\\mathbf{l}" ],
	  [ /([^\\]|^)\u{D426}/gu,
	    "$1\\mathbf{m}" ],
	  [ /([^\\]|^)\u{D427}/gu,
	    "$1\\mathbf{n}" ],
	  [ /([^\\]|^)\u{D428}/gu,
	    "$1\\mathbf{o}" ],
	  [ /([^\\]|^)\u{D429}/gu,
	    "$1\\mathbf{p}" ],
	  [ /([^\\]|^)\u{D42A}/gu,
	    "$1\\mathbf{q}" ],
	  [ /([^\\]|^)\u{D42B}/gu,
	    "$1\\mathbf{r}" ],
	  [ /([^\\]|^)\u{D42C}/gu,
	    "$1\\mathbf{s}" ],
	  [ /([^\\]|^)\u{D42D}/gu,
	    "$1\\mathbf{t}" ],
	  [ /([^\\]|^)\u{D42E}/gu,
	    "$1\\mathbf{u}" ],
	  [ /([^\\]|^)\u{D42F}/gu,
	    "$1\\mathbf{v}" ],
	  [ /([^\\]|^)\u{D430}/gu,
	    "$1\\mathbf{w}" ],
	  [ /([^\\]|^)\u{D431}/gu,
	    "$1\\mathbf{x}" ],
	  [ /([^\\]|^)\u{D432}/gu,
	    "$1\\mathbf{y}" ],
	  [ /([^\\]|^)\u{D433}/gu,
	    "$1\\mathbf{z}" ],
	  [ /([^\\]|^)\u{D434}/gu,
	    "$1\\mathsl{A}" ],
	  [ /([^\\]|^)\u{D435}/gu,
	    "$1\\mathsl{B}" ],
	  [ /([^\\]|^)\u{D436}/gu,
	    "$1\\mathsl{C}" ],
	  [ /([^\\]|^)\u{D437}/gu,
	    "$1\\mathsl{D}" ],
	  [ /([^\\]|^)\u{D438}/gu,
	    "$1\\mathsl{E}" ],
	  [ /([^\\]|^)\u{D439}/gu,
	    "$1\\mathsl{F}" ],
	  [ /([^\\]|^)\u{D43A}/gu,
	    "$1\\mathsl{G}" ],
	  [ /([^\\]|^)\u{D43B}/gu,
	    "$1\\mathsl{H}" ],
	  [ /([^\\]|^)\u{D43C}/gu,
	    "$1\\mathsl{I}" ],
	  [ /([^\\]|^)\u{D43D}/gu,
	    "$1\\mathsl{J}" ],
	  [ /([^\\]|^)\u{D43E}/gu,
	    "$1\\mathsl{K}" ],
	  [ /([^\\]|^)\u{D43F}/gu,
	    "$1\\mathsl{L}" ],
	  [ /([^\\]|^)\u{D440}/gu,
	    "$1\\mathsl{M}" ],
	  [ /([^\\]|^)\u{D441}/gu,
	    "$1\\mathsl{N}" ],
	  [ /([^\\]|^)\u{D442}/gu,
	    "$1\\mathsl{O}" ],
	  [ /([^\\]|^)\u{D443}/gu,
	    "$1\\mathsl{P}" ],
	  [ /([^\\]|^)\u{D444}/gu,
	    "$1\\mathsl{Q}" ],
	  [ /([^\\]|^)\u{D445}/gu,
	    "$1\\mathsl{R}" ],
	  [ /([^\\]|^)\u{D446}/gu,
	    "$1\\mathsl{S}" ],
	  [ /([^\\]|^)\u{D447}/gu,
	    "$1\\mathsl{T}" ],
	  [ /([^\\]|^)\u{D448}/gu,
	    "$1\\mathsl{U}" ],
	  [ /([^\\]|^)\u{D449}/gu,
	    "$1\\mathsl{V}" ],
	  [ /([^\\]|^)\u{D44A}/gu,
	    "$1\\mathsl{W}" ],
	  [ /([^\\]|^)\u{D44B}/gu,
	    "$1\\mathsl{X}" ],
	  [ /([^\\]|^)\u{D44C}/gu,
	    "$1\\mathsl{Y}" ],
	  [ /([^\\]|^)\u{D44D}/gu,
	    "$1\\mathsl{Z}" ],
	  [ /([^\\]|^)\u{D44E}/gu,
	    "$1\\mathsl{a}" ],
	  [ /([^\\]|^)\u{D44F}/gu,
	    "$1\\mathsl{b}" ],
	  [ /([^\\]|^)\u{D450}/gu,
	    "$1\\mathsl{c}" ],
	  [ /([^\\]|^)\u{D451}/gu,
	    "$1\\mathsl{d}" ],
	  [ /([^\\]|^)\u{D452}/gu,
	    "$1\\mathsl{e}" ],
	  [ /([^\\]|^)\u{D453}/gu,
	    "$1\\mathsl{f}" ],
	  [ /([^\\]|^)\u{D454}/gu,
	    "$1\\mathsl{g}" ],
	  [ /([^\\]|^)\u{D456}/gu,
	    "$1\\mathsl{i}" ],
	  [ /([^\\]|^)\u{D457}/gu,
	    "$1\\mathsl{j}" ],
	  [ /([^\\]|^)\u{D458}/gu,
	    "$1\\mathsl{k}" ],
	  [ /([^\\]|^)\u{D459}/gu,
	    "$1\\mathsl{l}" ],
	  [ /([^\\]|^)\u{D45A}/gu,
	    "$1\\mathsl{m}" ],
	  [ /([^\\]|^)\u{D45B}/gu,
	    "$1\\mathsl{n}" ],
	  [ /([^\\]|^)\u{D45C}/gu,
	    "$1\\mathsl{o}" ],
	  [ /([^\\]|^)\u{D45D}/gu,
	    "$1\\mathsl{p}" ],
	  [ /([^\\]|^)\u{D45E}/gu,
	    "$1\\mathsl{q}" ],
	  [ /([^\\]|^)\u{D45F}/gu,
	    "$1\\mathsl{r}" ],
	  [ /([^\\]|^)\u{D460}/gu,
	    "$1\\mathsl{s}" ],
	  [ /([^\\]|^)\u{D461}/gu,
	    "$1\\mathsl{t}" ],
	  [ /([^\\]|^)\u{D462}/gu,
	    "$1\\mathsl{u}" ],
	  [ /([^\\]|^)\u{D463}/gu,
	    "$1\\mathsl{v}" ],
	  [ /([^\\]|^)\u{D464}/gu,
	    "$1\\mathsl{w}" ],
	  [ /([^\\]|^)\u{D465}/gu,
	    "$1\\mathsl{x}" ],
	  [ /([^\\]|^)\u{D466}/gu,
	    "$1\\mathsl{y}" ],
	  [ /([^\\]|^)\u{D467}/gu,
	    "$1\\mathsl{z}" ],
	  [ /([^\\]|^)\u{D468}/gu,
	    "$1\\mathbit{A}" ],
	  [ /([^\\]|^)\u{D469}/gu,
	    "$1\\mathbit{B}" ],
	  [ /([^\\]|^)\u{D46A}/gu,
	    "$1\\mathbit{C}" ],
	  [ /([^\\]|^)\u{D46B}/gu,
	    "$1\\mathbit{D}" ],
	  [ /([^\\]|^)\u{D46C}/gu,
	    "$1\\mathbit{E}" ],
	  [ /([^\\]|^)\u{D46D}/gu,
	    "$1\\mathbit{F}" ],
	  [ /([^\\]|^)\u{D46E}/gu,
	    "$1\\mathbit{G}" ],
	  [ /([^\\]|^)\u{D46F}/gu,
	    "$1\\mathbit{H}" ],
	  [ /([^\\]|^)\u{D470}/gu,
	    "$1\\mathbit{I}" ],
	  [ /([^\\]|^)\u{D471}/gu,
	    "$1\\mathbit{J}" ],
	  [ /([^\\]|^)\u{D472}/gu,
	    "$1\\mathbit{K}" ],
	  [ /([^\\]|^)\u{D473}/gu,
	    "$1\\mathbit{L}" ],
	  [ /([^\\]|^)\u{D474}/gu,
	    "$1\\mathbit{M}" ],
	  [ /([^\\]|^)\u{D475}/gu,
	    "$1\\mathbit{N}" ],
	  [ /([^\\]|^)\u{D476}/gu,
	    "$1\\mathbit{O}" ],
	  [ /([^\\]|^)\u{D477}/gu,
	    "$1\\mathbit{P}" ],
	  [ /([^\\]|^)\u{D478}/gu,
	    "$1\\mathbit{Q}" ],
	  [ /([^\\]|^)\u{D479}/gu,
	    "$1\\mathbit{R}" ],
	  [ /([^\\]|^)\u{D47A}/gu,
	    "$1\\mathbit{S}" ],
	  [ /([^\\]|^)\u{D47B}/gu,
	    "$1\\mathbit{T}" ],
	  [ /([^\\]|^)\u{D47C}/gu,
	    "$1\\mathbit{U}" ],
	  [ /([^\\]|^)\u{D47D}/gu,
	    "$1\\mathbit{V}" ],
	  [ /([^\\]|^)\u{D47E}/gu,
	    "$1\\mathbit{W}" ],
	  [ /([^\\]|^)\u{D47F}/gu,
	    "$1\\mathbit{X}" ],
	  [ /([^\\]|^)\u{D480}/gu,
	    "$1\\mathbit{Y}" ],
	  [ /([^\\]|^)\u{D481}/gu,
	    "$1\\mathbit{Z}" ],
	  [ /([^\\]|^)\u{D482}/gu,
	    "$1\\mathbit{a}" ],
	  [ /([^\\]|^)\u{D483}/gu,
	    "$1\\mathbit{b}" ],
	  [ /([^\\]|^)\u{D484}/gu,
	    "$1\\mathbit{c}" ],
	  [ /([^\\]|^)\u{D485}/gu,
	    "$1\\mathbit{d}" ],
	  [ /([^\\]|^)\u{D486}/gu,
	    "$1\\mathbit{e}" ],
	  [ /([^\\]|^)\u{D487}/gu,
	    "$1\\mathbit{f}" ],
	  [ /([^\\]|^)\u{D488}/gu,
	    "$1\\mathbit{g}" ],
	  [ /([^\\]|^)\u{D489}/gu,
	    "$1\\mathbit{h}" ],
	  [ /([^\\]|^)\u{D48A}/gu,
	    "$1\\mathbit{i}" ],
	  [ /([^\\]|^)\u{D48B}/gu,
	    "$1\\mathbit{j}" ],
	  [ /([^\\]|^)\u{D48C}/gu,
	    "$1\\mathbit{k}" ],
	  [ /([^\\]|^)\u{D48D}/gu,
	    "$1\\mathbit{l}" ],
	  [ /([^\\]|^)\u{D48E}/gu,
	    "$1\\mathbit{m}" ],
	  [ /([^\\]|^)\u{D48F}/gu,
	    "$1\\mathbit{n}" ],
	  [ /([^\\]|^)\u{D490}/gu,
	    "$1\\mathbit{o}" ],
	  [ /([^\\]|^)\u{D491}/gu,
	    "$1\\mathbit{p}" ],
	  [ /([^\\]|^)\u{D492}/gu,
	    "$1\\mathbit{q}" ],
	  [ /([^\\]|^)\u{D493}/gu,
	    "$1\\mathbit{r}" ],
	  [ /([^\\]|^)\u{D494}/gu,
	    "$1\\mathbit{s}" ],
	  [ /([^\\]|^)\u{D495}/gu,
	    "$1\\mathbit{t}" ],
	  [ /([^\\]|^)\u{D496}/gu,
	    "$1\\mathbit{u}" ],
	  [ /([^\\]|^)\u{D497}/gu,
	    "$1\\mathbit{v}" ],
	  [ /([^\\]|^)\u{D498}/gu,
	    "$1\\mathbit{w}" ],
	  [ /([^\\]|^)\u{D499}/gu,
	    "$1\\mathbit{x}" ],
	  [ /([^\\]|^)\u{D49A}/gu,
	    "$1\\mathbit{y}" ],
	  [ /([^\\]|^)\u{D49B}/gu,
	    "$1\\mathbit{z}" ],
	  [ /([^\\]|^)\u{D49C}/gu,
	    "$1\\mathscr{A}" ],
	  [ /([^\\]|^)\u{D49E}/gu,
	    "$1\\mathscr{C}" ],
	  [ /([^\\]|^)\u{D49F}/gu,
	    "$1\\mathscr{D}" ],
	  [ /([^\\]|^)\u{D4A2}/gu,
	    "$1\\mathscr{G}" ],
	  [ /([^\\]|^)\u{D4A5}/gu,
	    "$1\\mathscr{J}" ],
	  [ /([^\\]|^)\u{D4A6}/gu,
	    "$1\\mathscr{K}" ],
	  [ /([^\\]|^)\u{D4A9}/gu,
	    "$1\\mathscr{N}" ],
	  [ /([^\\]|^)\u{D4AA}/gu,
	    "$1\\mathscr{O}" ],
	  [ /([^\\]|^)\u{D4AB}/gu,
	    "$1\\mathscr{P}" ],
	  [ /([^\\]|^)\u{D4AC}/gu,
	    "$1\\mathscr{Q}" ],
	  [ /([^\\]|^)\u{D4AE}/gu,
	    "$1\\mathscr{S}" ],
	  [ /([^\\]|^)\u{D4AF}/gu,
	    "$1\\mathscr{T}" ],
	  [ /([^\\]|^)\u{D4B0}/gu,
	    "$1\\mathscr{U}" ],
	  [ /([^\\]|^)\u{D4B1}/gu,
	    "$1\\mathscr{V}" ],
	  [ /([^\\]|^)\u{D4B2}/gu,
	    "$1\\mathscr{W}" ],
	  [ /([^\\]|^)\u{D4B3}/gu,
	    "$1\\mathscr{X}" ],
	  [ /([^\\]|^)\u{D4B4}/gu,
	    "$1\\mathscr{Y}" ],
	  [ /([^\\]|^)\u{D4B5}/gu,
	    "$1\\mathscr{Z}" ],
	  [ /([^\\]|^)\u{D4B6}/gu,
	    "$1\\mathscr{a}" ],
	  [ /([^\\]|^)\u{D4B7}/gu,
	    "$1\\mathscr{b}" ],
	  [ /([^\\]|^)\u{D4B8}/gu,
	    "$1\\mathscr{c}" ],
	  [ /([^\\]|^)\u{D4B9}/gu,
	    "$1\\mathscr{d}" ],
	  [ /([^\\]|^)\u{D4BB}/gu,
	    "$1\\mathscr{f}" ],
	  [ /([^\\]|^)\u{D4BD}/gu,
	    "$1\\mathscr{h}" ],
	  [ /([^\\]|^)\u{D4BE}/gu,
	    "$1\\mathscr{i}" ],
	  [ /([^\\]|^)\u{D4BF}/gu,
	    "$1\\mathscr{j}" ],
	  [ /([^\\]|^)\u{D4C0}/gu,
	    "$1\\mathscr{k}" ],
	  [ /([^\\]|^)\u{D4C1}/gu,
	    "$1\\mathscr{l}" ],
	  [ /([^\\]|^)\u{D4C2}/gu,
	    "$1\\mathscr{m}" ],
	  [ /([^\\]|^)\u{D4C3}/gu,
	    "$1\\mathscr{n}" ],
	  [ /([^\\]|^)\u{D4C5}/gu,
	    "$1\\mathscr{p}" ],
	  [ /([^\\]|^)\u{D4C6}/gu,
	    "$1\\mathscr{q}" ],
	  [ /([^\\]|^)\u{D4C7}/gu,
	    "$1\\mathscr{r}" ],
	  [ /([^\\]|^)\u{D4C8}/gu,
	    "$1\\mathscr{s}" ],
	  [ /([^\\]|^)\u{D4C9}/gu,
	    "$1\\mathscr{t}" ],
	  [ /([^\\]|^)\u{D4CA}/gu,
	    "$1\\mathscr{u}" ],
	  [ /([^\\]|^)\u{D4CB}/gu,
	    "$1\\mathscr{v}" ],
	  [ /([^\\]|^)\u{D4CC}/gu,
	    "$1\\mathscr{w}" ],
	  [ /([^\\]|^)\u{D4CD}/gu,
	    "$1\\mathscr{x}" ],
	  [ /([^\\]|^)\u{D4CE}/gu,
	    "$1\\mathscr{y}" ],
	  [ /([^\\]|^)\u{D4CF}/gu,
	    "$1\\mathscr{z}" ],
	  [ /([^\\]|^)\u{D4D0}/gu,
	    "$1\\mathmit{A}" ],
	  [ /([^\\]|^)\u{D4D1}/gu,
	    "$1\\mathmit{B}" ],
	  [ /([^\\]|^)\u{D4D2}/gu,
	    "$1\\mathmit{C}" ],
	  [ /([^\\]|^)\u{D4D3}/gu,
	    "$1\\mathmit{D}" ],
	  [ /([^\\]|^)\u{D4D4}/gu,
	    "$1\\mathmit{E}" ],
	  [ /([^\\]|^)\u{D4D5}/gu,
	    "$1\\mathmit{F}" ],
	  [ /([^\\]|^)\u{D4D6}/gu,
	    "$1\\mathmit{G}" ],
	  [ /([^\\]|^)\u{D4D7}/gu,
	    "$1\\mathmit{H}" ],
	  [ /([^\\]|^)\u{D4D8}/gu,
	    "$1\\mathmit{I}" ],
	  [ /([^\\]|^)\u{D4D9}/gu,
	    "$1\\mathmit{J}" ],
	  [ /([^\\]|^)\u{D4DA}/gu,
	    "$1\\mathmit{K}" ],
	  [ /([^\\]|^)\u{D4DB}/gu,
	    "$1\\mathmit{L}" ],
	  [ /([^\\]|^)\u{D4DC}/gu,
	    "$1\\mathmit{M}" ],
	  [ /([^\\]|^)\u{D4DD}/gu,
	    "$1\\mathmit{N}" ],
	  [ /([^\\]|^)\u{D4DE}/gu,
	    "$1\\mathmit{O}" ],
	  [ /([^\\]|^)\u{D4DF}/gu,
	    "$1\\mathmit{P}" ],
	  [ /([^\\]|^)\u{D4E0}/gu,
	    "$1\\mathmit{Q}" ],
	  [ /([^\\]|^)\u{D4E1}/gu,
	    "$1\\mathmit{R}" ],
	  [ /([^\\]|^)\u{D4E2}/gu,
	    "$1\\mathmit{S}" ],
	  [ /([^\\]|^)\u{D4E3}/gu,
	    "$1\\mathmit{T}" ],
	  [ /([^\\]|^)\u{D4E4}/gu,
	    "$1\\mathmit{U}" ],
	  [ /([^\\]|^)\u{D4E5}/gu,
	    "$1\\mathmit{V}" ],
	  [ /([^\\]|^)\u{D4E6}/gu,
	    "$1\\mathmit{W}" ],
	  [ /([^\\]|^)\u{D4E7}/gu,
	    "$1\\mathmit{X}" ],
	  [ /([^\\]|^)\u{D4E8}/gu,
	    "$1\\mathmit{Y}" ],
	  [ /([^\\]|^)\u{D4E9}/gu,
	    "$1\\mathmit{Z}" ],
	  [ /([^\\]|^)\u{D4EA}/gu,
	    "$1\\mathmit{a}" ],
	  [ /([^\\]|^)\u{D4EB}/gu,
	    "$1\\mathmit{b}" ],
	  [ /([^\\]|^)\u{D4EC}/gu,
	    "$1\\mathmit{c}" ],
	  [ /([^\\]|^)\u{D4ED}/gu,
	    "$1\\mathmit{d}" ],
	  [ /([^\\]|^)\u{D4EE}/gu,
	    "$1\\mathmit{e}" ],
	  [ /([^\\]|^)\u{D4EF}/gu,
	    "$1\\mathmit{f}" ],
	  [ /([^\\]|^)\u{D4F0}/gu,
	    "$1\\mathmit{g}" ],
	  [ /([^\\]|^)\u{D4F1}/gu,
	    "$1\\mathmit{h}" ],
	  [ /([^\\]|^)\u{D4F2}/gu,
	    "$1\\mathmit{i}" ],
	  [ /([^\\]|^)\u{D4F3}/gu,
	    "$1\\mathmit{j}" ],
	  [ /([^\\]|^)\u{D4F4}/gu,
	    "$1\\mathmit{k}" ],
	  [ /([^\\]|^)\u{D4F5}/gu,
	    "$1\\mathmit{l}" ],
	  [ /([^\\]|^)\u{D4F6}/gu,
	    "$1\\mathmit{m}" ],
	  [ /([^\\]|^)\u{D4F7}/gu,
	    "$1\\mathmit{n}" ],
	  [ /([^\\]|^)\u{D4F8}/gu,
	    "$1\\mathmit{o}" ],
	  [ /([^\\]|^)\u{D4F9}/gu,
	    "$1\\mathmit{p}" ],
	  [ /([^\\]|^)\u{D4FA}/gu,
	    "$1\\mathmit{q}" ],
	  [ /([^\\]|^)\u{D4FB}/gu,
	    "$1\\mathmit{r}" ],
	  [ /([^\\]|^)\u{D4FC}/gu,
	    "$1\\mathmit{s}" ],
	  [ /([^\\]|^)\u{D4FD}/gu,
	    "$1\\mathmit{t}" ],
	  [ /([^\\]|^)\u{D4FE}/gu,
	    "$1\\mathmit{u}" ],
	  [ /([^\\]|^)\u{D4FF}/gu,
	    "$1\\mathmit{v}" ],
	  [ /([^\\]|^)\u{D500}/gu,
	    "$1\\mathmit{w}" ],
	  [ /([^\\]|^)\u{D501}/gu,
	    "$1\\mathmit{x}" ],
	  [ /([^\\]|^)\u{D502}/gu,
	    "$1\\mathmit{y}" ],
	  [ /([^\\]|^)\u{D503}/gu,
	    "$1\\mathmit{z}" ],
	  [ /([^\\]|^)\u{D504}/gu,
	    "$1\\mathfrak{A}" ],
	  [ /([^\\]|^)\u{D505}/gu,
	    "$1\\mathfrak{B}" ],
	  [ /([^\\]|^)\u{D507}/gu,
	    "$1\\mathfrak{D}" ],
	  [ /([^\\]|^)\u{D508}/gu,
	    "$1\\mathfrak{E}" ],
	  [ /([^\\]|^)\u{D509}/gu,
	    "$1\\mathfrak{F}" ],
	  [ /([^\\]|^)\u{D50A}/gu,
	    "$1\\mathfrak{G}" ],
	  [ /([^\\]|^)\u{D50D}/gu,
	    "$1\\mathfrak{J}" ],
	  [ /([^\\]|^)\u{D50E}/gu,
	    "$1\\mathfrak{K}" ],
	  [ /([^\\]|^)\u{D50F}/gu,
	    "$1\\mathfrak{L}" ],
	  [ /([^\\]|^)\u{D510}/gu,
	    "$1\\mathfrak{M}" ],
	  [ /([^\\]|^)\u{D511}/gu,
	    "$1\\mathfrak{N}" ],
	  [ /([^\\]|^)\u{D512}/gu,
	    "$1\\mathfrak{O}" ],
	  [ /([^\\]|^)\u{D513}/gu,
	    "$1\\mathfrak{P}" ],
	  [ /([^\\]|^)\u{D514}/gu,
	    "$1\\mathfrak{Q}" ],
	  [ /([^\\]|^)\u{D516}/gu,
	    "$1\\mathfrak{S}" ],
	  [ /([^\\]|^)\u{D517}/gu,
	    "$1\\mathfrak{T}" ],
	  [ /([^\\]|^)\u{D518}/gu,
	    "$1\\mathfrak{U}" ],
	  [ /([^\\]|^)\u{D519}/gu,
	    "$1\\mathfrak{V}" ],
	  [ /([^\\]|^)\u{D51A}/gu,
	    "$1\\mathfrak{W}" ],
	  [ /([^\\]|^)\u{D51B}/gu,
	    "$1\\mathfrak{X}" ],
	  [ /([^\\]|^)\u{D51C}/gu,
	    "$1\\mathfrak{Y}" ],
	  [ /([^\\]|^)\u{D51E}/gu,
	    "$1\\mathfrak{a}" ],
	  [ /([^\\]|^)\u{D51F}/gu,
	    "$1\\mathfrak{b}" ],
	  [ /([^\\]|^)\u{D520}/gu,
	    "$1\\mathfrak{c}" ],
	  [ /([^\\]|^)\u{D521}/gu,
	    "$1\\mathfrak{d}" ],
	  [ /([^\\]|^)\u{D522}/gu,
	    "$1\\mathfrak{e}" ],
	  [ /([^\\]|^)\u{D523}/gu,
	    "$1\\mathfrak{f}" ],
	  [ /([^\\]|^)\u{D524}/gu,
	    "$1\\mathfrak{g}" ],
	  [ /([^\\]|^)\u{D525}/gu,
	    "$1\\mathfrak{h}" ],
	  [ /([^\\]|^)\u{D526}/gu,
	    "$1\\mathfrak{i}" ],
	  [ /([^\\]|^)\u{D527}/gu,
	    "$1\\mathfrak{j}" ],
	  [ /([^\\]|^)\u{D528}/gu,
	    "$1\\mathfrak{k}" ],
	  [ /([^\\]|^)\u{D529}/gu,
	    "$1\\mathfrak{l}" ],
	  [ /([^\\]|^)\u{D52A}/gu,
	    "$1\\mathfrak{m}" ],
	  [ /([^\\]|^)\u{D52B}/gu,
	    "$1\\mathfrak{n}" ],
	  [ /([^\\]|^)\u{D52C}/gu,
	    "$1\\mathfrak{o}" ],
	  [ /([^\\]|^)\u{D52D}/gu,
	    "$1\\mathfrak{p}" ],
	  [ /([^\\]|^)\u{D52E}/gu,
	    "$1\\mathfrak{q}" ],
	  [ /([^\\]|^)\u{D52F}/gu,
	    "$1\\mathfrak{r}" ],
	  [ /([^\\]|^)\u{D530}/gu,
	    "$1\\mathfrak{s}" ],
	  [ /([^\\]|^)\u{D531}/gu,
	    "$1\\mathfrak{t}" ],
	  [ /([^\\]|^)\u{D532}/gu,
	    "$1\\mathfrak{u}" ],
	  [ /([^\\]|^)\u{D533}/gu,
	    "$1\\mathfrak{v}" ],
	  [ /([^\\]|^)\u{D534}/gu,
	    "$1\\mathfrak{w}" ],
	  [ /([^\\]|^)\u{D535}/gu,
	    "$1\\mathfrak{x}" ],
	  [ /([^\\]|^)\u{D536}/gu,
	    "$1\\mathfrak{y}" ],
	  [ /([^\\]|^)\u{D537}/gu,
	    "$1\\mathfrak{z}" ],
	  [ /([^\\]|^)\u{D538}/gu,
	    "$1\\mathbb{A}" ],
	  [ /([^\\]|^)\u{D539}/gu,
	    "$1\\mathbb{B}" ],
	  [ /([^\\]|^)\u{D53B}/gu,
	    "$1\\mathbb{D}" ],
	  [ /([^\\]|^)\u{D53C}/gu,
	    "$1\\mathbb{E}" ],
	  [ /([^\\]|^)\u{D53D}/gu,
	    "$1\\mathbb{F}" ],
	  [ /([^\\]|^)\u{D53E}/gu,
	    "$1\\mathbb{G}" ],
	  [ /([^\\]|^)\u{D540}/gu,
	    "$1\\mathbb{I}" ],
	  [ /([^\\]|^)\u{D541}/gu,
	    "$1\\mathbb{J}" ],
	  [ /([^\\]|^)\u{D542}/gu,
	    "$1\\mathbb{K}" ],
	  [ /([^\\]|^)\u{D543}/gu,
	    "$1\\mathbb{L}" ],
	  [ /([^\\]|^)\u{D544}/gu,
	    "$1\\mathbb{M}" ],
	  [ /([^\\]|^)\u{D546}/gu,
	    "$1\\mathbb{O}" ],
	  [ /([^\\]|^)\u{D54A}/gu,
	    "$1\\mathbb{S}" ],
	  [ /([^\\]|^)\u{D54B}/gu,
	    "$1\\mathbb{T}" ],
	  [ /([^\\]|^)\u{D54C}/gu,
	    "$1\\mathbb{U}" ],
	  [ /([^\\]|^)\u{D54D}/gu,
	    "$1\\mathbb{V}" ],
	  [ /([^\\]|^)\u{D54E}/gu,
	    "$1\\mathbb{W}" ],
	  [ /([^\\]|^)\u{D54F}/gu,
	    "$1\\mathbb{X}" ],
	  [ /([^\\]|^)\u{D550}/gu,
	    "$1\\mathbb{Y}" ],
	  [ /([^\\]|^)\u{D552}/gu,
	    "$1\\mathbb{a}" ],
	  [ /([^\\]|^)\u{D553}/gu,
	    "$1\\mathbb{b}" ],
	  [ /([^\\]|^)\u{D554}/gu,
	    "$1\\mathbb{c}" ],
	  [ /([^\\]|^)\u{D555}/gu,
	    "$1\\mathbb{d}" ],
	  [ /([^\\]|^)\u{D556}/gu,
	    "$1\\mathbb{e}" ],
	  [ /([^\\]|^)\u{D557}/gu,
	    "$1\\mathbb{f}" ],
	  [ /([^\\]|^)\u{D558}/gu,
	    "$1\\mathbb{g}" ],
	  [ /([^\\]|^)\u{D559}/gu,
	    "$1\\mathbb{h}" ],
	  [ /([^\\]|^)\u{D55A}/gu,
	    "$1\\mathbb{i}" ],
	  [ /([^\\]|^)\u{D55B}/gu,
	    "$1\\mathbb{j}" ],
	  [ /([^\\]|^)\u{D55C}/gu,
	    "$1\\mathbb{k}" ],
	  [ /([^\\]|^)\u{D55D}/gu,
	    "$1\\mathbb{l}" ],
	  [ /([^\\]|^)\u{D55E}/gu,
	    "$1\\mathbb{m}" ],
	  [ /([^\\]|^)\u{D55F}/gu,
	    "$1\\mathbb{n}" ],
	  [ /([^\\]|^)\u{D560}/gu,
	    "$1\\mathbb{o}" ],
	  [ /([^\\]|^)\u{D561}/gu,
	    "$1\\mathbb{p}" ],
	  [ /([^\\]|^)\u{D562}/gu,
	    "$1\\mathbb{q}" ],
	  [ /([^\\]|^)\u{D563}/gu,
	    "$1\\mathbb{r}" ],
	  [ /([^\\]|^)\u{D564}/gu,
	    "$1\\mathbb{s}" ],
	  [ /([^\\]|^)\u{D565}/gu,
	    "$1\\mathbb{t}" ],
	  [ /([^\\]|^)\u{D566}/gu,
	    "$1\\mathbb{u}" ],
	  [ /([^\\]|^)\u{D567}/gu,
	    "$1\\mathbb{v}" ],
	  [ /([^\\]|^)\u{D568}/gu,
	    "$1\\mathbb{w}" ],
	  [ /([^\\]|^)\u{D569}/gu,
	    "$1\\mathbb{x}" ],
	  [ /([^\\]|^)\u{D56A}/gu,
	    "$1\\mathbb{y}" ],
	  [ /([^\\]|^)\u{D56B}/gu,
	    "$1\\mathbb{z}" ],
	  [ /([^\\]|^)\u{D56C}/gu,
	    "$1\\mathslbb{A}" ],
	  [ /([^\\]|^)\u{D56D}/gu,
	    "$1\\mathslbb{B}" ],
	  [ /([^\\]|^)\u{D56E}/gu,
	    "$1\\mathslbb{C}" ],
	  [ /([^\\]|^)\u{D56F}/gu,
	    "$1\\mathslbb{D}" ],
	  [ /([^\\]|^)\u{D570}/gu,
	    "$1\\mathslbb{E}" ],
	  [ /([^\\]|^)\u{D571}/gu,
	    "$1\\mathslbb{F}" ],
	  [ /([^\\]|^)\u{D572}/gu,
	    "$1\\mathslbb{G}" ],
	  [ /([^\\]|^)\u{D573}/gu,
	    "$1\\mathslbb{H}" ],
	  [ /([^\\]|^)\u{D574}/gu,
	    "$1\\mathslbb{I}" ],
	  [ /([^\\]|^)\u{D575}/gu,
	    "$1\\mathslbb{J}" ],
	  [ /([^\\]|^)\u{D576}/gu,
	    "$1\\mathslbb{K}" ],
	  [ /([^\\]|^)\u{D577}/gu,
	    "$1\\mathslbb{L}" ],
	  [ /([^\\]|^)\u{D578}/gu,
	    "$1\\mathslbb{M}" ],
	  [ /([^\\]|^)\u{D579}/gu,
	    "$1\\mathslbb{N}" ],
	  [ /([^\\]|^)\u{D57A}/gu,
	    "$1\\mathslbb{O}" ],
	  [ /([^\\]|^)\u{D57B}/gu,
	    "$1\\mathslbb{P}" ],
	  [ /([^\\]|^)\u{D57C}/gu,
	    "$1\\mathslbb{Q}" ],
	  [ /([^\\]|^)\u{D57D}/gu,
	    "$1\\mathslbb{R}" ],
	  [ /([^\\]|^)\u{D57E}/gu,
	    "$1\\mathslbb{S}" ],
	  [ /([^\\]|^)\u{D57F}/gu,
	    "$1\\mathslbb{T}" ],
	  [ /([^\\]|^)\u{D580}/gu,
	    "$1\\mathslbb{U}" ],
	  [ /([^\\]|^)\u{D581}/gu,
	    "$1\\mathslbb{V}" ],
	  [ /([^\\]|^)\u{D582}/gu,
	    "$1\\mathslbb{W}" ],
	  [ /([^\\]|^)\u{D583}/gu,
	    "$1\\mathslbb{X}" ],
	  [ /([^\\]|^)\u{D584}/gu,
	    "$1\\mathslbb{Y}" ],
	  [ /([^\\]|^)\u{D585}/gu,
	    "$1\\mathslbb{Z}" ],
	  [ /([^\\]|^)\u{D586}/gu,
	    "$1\\mathslbb{a}" ],
	  [ /([^\\]|^)\u{D587}/gu,
	    "$1\\mathslbb{b}" ],
	  [ /([^\\]|^)\u{D588}/gu,
	    "$1\\mathslbb{c}" ],
	  [ /([^\\]|^)\u{D589}/gu,
	    "$1\\mathslbb{d}" ],
	  [ /([^\\]|^)\u{D58A}/gu,
	    "$1\\mathslbb{e}" ],
	  [ /([^\\]|^)\u{D58B}/gu,
	    "$1\\mathslbb{f}" ],
	  [ /([^\\]|^)\u{D58C}/gu,
	    "$1\\mathslbb{g}" ],
	  [ /([^\\]|^)\u{D58D}/gu,
	    "$1\\mathslbb{h}" ],
	  [ /([^\\]|^)\u{D58E}/gu,
	    "$1\\mathslbb{i}" ],
	  [ /([^\\]|^)\u{D58F}/gu,
	    "$1\\mathslbb{j}" ],
	  [ /([^\\]|^)\u{D590}/gu,
	    "$1\\mathslbb{k}" ],
	  [ /([^\\]|^)\u{D591}/gu,
	    "$1\\mathslbb{l}" ],
	  [ /([^\\]|^)\u{D592}/gu,
	    "$1\\mathslbb{m}" ],
	  [ /([^\\]|^)\u{D593}/gu,
	    "$1\\mathslbb{n}" ],
	  [ /([^\\]|^)\u{D594}/gu,
	    "$1\\mathslbb{o}" ],
	  [ /([^\\]|^)\u{D595}/gu,
	    "$1\\mathslbb{p}" ],
	  [ /([^\\]|^)\u{D596}/gu,
	    "$1\\mathslbb{q}" ],
	  [ /([^\\]|^)\u{D597}/gu,
	    "$1\\mathslbb{r}" ],
	  [ /([^\\]|^)\u{D598}/gu,
	    "$1\\mathslbb{s}" ],
	  [ /([^\\]|^)\u{D599}/gu,
	    "$1\\mathslbb{t}" ],
	  [ /([^\\]|^)\u{D59A}/gu,
	    "$1\\mathslbb{u}" ],
	  [ /([^\\]|^)\u{D59B}/gu,
	    "$1\\mathslbb{v}" ],
	  [ /([^\\]|^)\u{D59C}/gu,
	    "$1\\mathslbb{w}" ],
	  [ /([^\\]|^)\u{D59D}/gu,
	    "$1\\mathslbb{x}" ],
	  [ /([^\\]|^)\u{D59E}/gu,
	    "$1\\mathslbb{y}" ],
	  [ /([^\\]|^)\u{D59F}/gu,
	    "$1\\mathslbb{z}" ],
	  [ /([^\\]|^)\u{D5A0}/gu,
	    "$1\\mathsf{A}" ],
	  [ /([^\\]|^)\u{D5A1}/gu,
	    "$1\\mathsf{B}" ],
	  [ /([^\\]|^)\u{D5A2}/gu,
	    "$1\\mathsf{C}" ],
	  [ /([^\\]|^)\u{D5A3}/gu,
	    "$1\\mathsf{D}" ],
	  [ /([^\\]|^)\u{D5A4}/gu,
	    "$1\\mathsf{E}" ],
	  [ /([^\\]|^)\u{D5A5}/gu,
	    "$1\\mathsf{F}" ],
	  [ /([^\\]|^)\u{D5A6}/gu,
	    "$1\\mathsf{G}" ],
	  [ /([^\\]|^)\u{D5A7}/gu,
	    "$1\\mathsf{H}" ],
	  [ /([^\\]|^)\u{D5A8}/gu,
	    "$1\\mathsf{I}" ],
	  [ /([^\\]|^)\u{D5A9}/gu,
	    "$1\\mathsf{J}" ],
	  [ /([^\\]|^)\u{D5AA}/gu,
	    "$1\\mathsf{K}" ],
	  [ /([^\\]|^)\u{D5AB}/gu,
	    "$1\\mathsf{L}" ],
	  [ /([^\\]|^)\u{D5AC}/gu,
	    "$1\\mathsf{M}" ],
	  [ /([^\\]|^)\u{D5AD}/gu,
	    "$1\\mathsf{N}" ],
	  [ /([^\\]|^)\u{D5AE}/gu,
	    "$1\\mathsf{O}" ],
	  [ /([^\\]|^)\u{D5AF}/gu,
	    "$1\\mathsf{P}" ],
	  [ /([^\\]|^)\u{D5B0}/gu,
	    "$1\\mathsf{Q}" ],
	  [ /([^\\]|^)\u{D5B1}/gu,
	    "$1\\mathsf{R}" ],
	  [ /([^\\]|^)\u{D5B2}/gu,
	    "$1\\mathsf{S}" ],
	  [ /([^\\]|^)\u{D5B3}/gu,
	    "$1\\mathsf{T}" ],
	  [ /([^\\]|^)\u{D5B4}/gu,
	    "$1\\mathsf{U}" ],
	  [ /([^\\]|^)\u{D5B5}/gu,
	    "$1\\mathsf{V}" ],
	  [ /([^\\]|^)\u{D5B6}/gu,
	    "$1\\mathsf{W}" ],
	  [ /([^\\]|^)\u{D5B7}/gu,
	    "$1\\mathsf{X}" ],
	  [ /([^\\]|^)\u{D5B8}/gu,
	    "$1\\mathsf{Y}" ],
	  [ /([^\\]|^)\u{D5B9}/gu,
	    "$1\\mathsf{Z}" ],
	  [ /([^\\]|^)\u{D5BA}/gu,
	    "$1\\mathsf{a}" ],
	  [ /([^\\]|^)\u{D5BB}/gu,
	    "$1\\mathsf{b}" ],
	  [ /([^\\]|^)\u{D5BC}/gu,
	    "$1\\mathsf{c}" ],
	  [ /([^\\]|^)\u{D5BD}/gu,
	    "$1\\mathsf{d}" ],
	  [ /([^\\]|^)\u{D5BE}/gu,
	    "$1\\mathsf{e}" ],
	  [ /([^\\]|^)\u{D5BF}/gu,
	    "$1\\mathsf{f}" ],
	  [ /([^\\]|^)\u{D5C0}/gu,
	    "$1\\mathsf{g}" ],
	  [ /([^\\]|^)\u{D5C1}/gu,
	    "$1\\mathsf{h}" ],
	  [ /([^\\]|^)\u{D5C2}/gu,
	    "$1\\mathsf{i}" ],
	  [ /([^\\]|^)\u{D5C3}/gu,
	    "$1\\mathsf{j}" ],
	  [ /([^\\]|^)\u{D5C4}/gu,
	    "$1\\mathsf{k}" ],
	  [ /([^\\]|^)\u{D5C5}/gu,
	    "$1\\mathsf{l}" ],
	  [ /([^\\]|^)\u{D5C6}/gu,
	    "$1\\mathsf{m}" ],
	  [ /([^\\]|^)\u{D5C7}/gu,
	    "$1\\mathsf{n}" ],
	  [ /([^\\]|^)\u{D5C8}/gu,
	    "$1\\mathsf{o}" ],
	  [ /([^\\]|^)\u{D5C9}/gu,
	    "$1\\mathsf{p}" ],
	  [ /([^\\]|^)\u{D5CA}/gu,
	    "$1\\mathsf{q}" ],
	  [ /([^\\]|^)\u{D5CB}/gu,
	    "$1\\mathsf{r}" ],
	  [ /([^\\]|^)\u{D5CC}/gu,
	    "$1\\mathsf{s}" ],
	  [ /([^\\]|^)\u{D5CD}/gu,
	    "$1\\mathsf{t}" ],
	  [ /([^\\]|^)\u{D5CE}/gu,
	    "$1\\mathsf{u}" ],
	  [ /([^\\]|^)\u{D5CF}/gu,
	    "$1\\mathsf{v}" ],
	  [ /([^\\]|^)\u{D5D0}/gu,
	    "$1\\mathsf{w}" ],
	  [ /([^\\]|^)\u{D5D1}/gu,
	    "$1\\mathsf{x}" ],
	  [ /([^\\]|^)\u{D5D2}/gu,
	    "$1\\mathsf{y}" ],
	  [ /([^\\]|^)\u{D5D3}/gu,
	    "$1\\mathsf{z}" ],
	  [ /([^\\]|^)\u{D5D4}/gu,
	    "$1\\mathsfbf{A}" ],
	  [ /([^\\]|^)\u{D5D5}/gu,
	    "$1\\mathsfbf{B}" ],
	  [ /([^\\]|^)\u{D5D6}/gu,
	    "$1\\mathsfbf{C}" ],
	  [ /([^\\]|^)\u{D5D7}/gu,
	    "$1\\mathsfbf{D}" ],
	  [ /([^\\]|^)\u{D5D8}/gu,
	    "$1\\mathsfbf{E}" ],
	  [ /([^\\]|^)\u{D5D9}/gu,
	    "$1\\mathsfbf{F}" ],
	  [ /([^\\]|^)\u{D5DA}/gu,
	    "$1\\mathsfbf{G}" ],
	  [ /([^\\]|^)\u{D5DB}/gu,
	    "$1\\mathsfbf{H}" ],
	  [ /([^\\]|^)\u{D5DC}/gu,
	    "$1\\mathsfbf{I}" ],
	  [ /([^\\]|^)\u{D5DD}/gu,
	    "$1\\mathsfbf{J}" ],
	  [ /([^\\]|^)\u{D5DE}/gu,
	    "$1\\mathsfbf{K}" ],
	  [ /([^\\]|^)\u{D5DF}/gu,
	    "$1\\mathsfbf{L}" ],
	  [ /([^\\]|^)\u{D5E0}/gu,
	    "$1\\mathsfbf{M}" ],
	  [ /([^\\]|^)\u{D5E1}/gu,
	    "$1\\mathsfbf{N}" ],
	  [ /([^\\]|^)\u{D5E2}/gu,
	    "$1\\mathsfbf{O}" ],
	  [ /([^\\]|^)\u{D5E3}/gu,
	    "$1\\mathsfbf{P}" ],
	  [ /([^\\]|^)\u{D5E4}/gu,
	    "$1\\mathsfbf{Q}" ],
	  [ /([^\\]|^)\u{D5E5}/gu,
	    "$1\\mathsfbf{R}" ],
	  [ /([^\\]|^)\u{D5E6}/gu,
	    "$1\\mathsfbf{S}" ],
	  [ /([^\\]|^)\u{D5E7}/gu,
	    "$1\\mathsfbf{T}" ],
	  [ /([^\\]|^)\u{D5E8}/gu,
	    "$1\\mathsfbf{U}" ],
	  [ /([^\\]|^)\u{D5E9}/gu,
	    "$1\\mathsfbf{V}" ],
	  [ /([^\\]|^)\u{D5EA}/gu,
	    "$1\\mathsfbf{W}" ],
	  [ /([^\\]|^)\u{D5EB}/gu,
	    "$1\\mathsfbf{X}" ],
	  [ /([^\\]|^)\u{D5EC}/gu,
	    "$1\\mathsfbf{Y}" ],
	  [ /([^\\]|^)\u{D5ED}/gu,
	    "$1\\mathsfbf{Z}" ],
	  [ /([^\\]|^)\u{D5EE}/gu,
	    "$1\\mathsfbf{a}" ],
	  [ /([^\\]|^)\u{D5EF}/gu,
	    "$1\\mathsfbf{b}" ],
	  [ /([^\\]|^)\u{D5F0}/gu,
	    "$1\\mathsfbf{c}" ],
	  [ /([^\\]|^)\u{D5F1}/gu,
	    "$1\\mathsfbf{d}" ],
	  [ /([^\\]|^)\u{D5F2}/gu,
	    "$1\\mathsfbf{e}" ],
	  [ /([^\\]|^)\u{D5F3}/gu,
	    "$1\\mathsfbf{f}" ],
	  [ /([^\\]|^)\u{D5F4}/gu,
	    "$1\\mathsfbf{g}" ],
	  [ /([^\\]|^)\u{D5F5}/gu,
	    "$1\\mathsfbf{h}" ],
	  [ /([^\\]|^)\u{D5F6}/gu,
	    "$1\\mathsfbf{i}" ],
	  [ /([^\\]|^)\u{D5F7}/gu,
	    "$1\\mathsfbf{j}" ],
	  [ /([^\\]|^)\u{D5F8}/gu,
	    "$1\\mathsfbf{k}" ],
	  [ /([^\\]|^)\u{D5F9}/gu,
	    "$1\\mathsfbf{l}" ],
	  [ /([^\\]|^)\u{D5FA}/gu,
	    "$1\\mathsfbf{m}" ],
	  [ /([^\\]|^)\u{D5FB}/gu,
	    "$1\\mathsfbf{n}" ],
	  [ /([^\\]|^)\u{D5FC}/gu,
	    "$1\\mathsfbf{o}" ],
	  [ /([^\\]|^)\u{D5FD}/gu,
	    "$1\\mathsfbf{p}" ],
	  [ /([^\\]|^)\u{D5FE}/gu,
	    "$1\\mathsfbf{q}" ],
	  [ /([^\\]|^)\u{D5FF}/gu,
	    "$1\\mathsfbf{r}" ],
	  [ /([^\\]|^)\u{D600}/gu,
	    "$1\\mathsfbf{s}" ],
	  [ /([^\\]|^)\u{D601}/gu,
	    "$1\\mathsfbf{t}" ],
	  [ /([^\\]|^)\u{D602}/gu,
	    "$1\\mathsfbf{u}" ],
	  [ /([^\\]|^)\u{D603}/gu,
	    "$1\\mathsfbf{v}" ],
	  [ /([^\\]|^)\u{D604}/gu,
	    "$1\\mathsfbf{w}" ],
	  [ /([^\\]|^)\u{D605}/gu,
	    "$1\\mathsfbf{x}" ],
	  [ /([^\\]|^)\u{D606}/gu,
	    "$1\\mathsfbf{y}" ],
	  [ /([^\\]|^)\u{D607}/gu,
	    "$1\\mathsfbf{z}" ],
	  [ /([^\\]|^)\u{D608}/gu,
	    "$1\\mathsfsl{A}" ],
	  [ /([^\\]|^)\u{D609}/gu,
	    "$1\\mathsfsl{B}" ],
	  [ /([^\\]|^)\u{D60A}/gu,
	    "$1\\mathsfsl{C}" ],
	  [ /([^\\]|^)\u{D60B}/gu,
	    "$1\\mathsfsl{D}" ],
	  [ /([^\\]|^)\u{D60C}/gu,
	    "$1\\mathsfsl{E}" ],
	  [ /([^\\]|^)\u{D60D}/gu,
	    "$1\\mathsfsl{F}" ],
	  [ /([^\\]|^)\u{D60E}/gu,
	    "$1\\mathsfsl{G}" ],
	  [ /([^\\]|^)\u{D60F}/gu,
	    "$1\\mathsfsl{H}" ],
	  [ /([^\\]|^)\u{D610}/gu,
	    "$1\\mathsfsl{I}" ],
	  [ /([^\\]|^)\u{D611}/gu,
	    "$1\\mathsfsl{J}" ],
	  [ /([^\\]|^)\u{D612}/gu,
	    "$1\\mathsfsl{K}" ],
	  [ /([^\\]|^)\u{D613}/gu,
	    "$1\\mathsfsl{L}" ],
	  [ /([^\\]|^)\u{D614}/gu,
	    "$1\\mathsfsl{M}" ],
	  [ /([^\\]|^)\u{D615}/gu,
	    "$1\\mathsfsl{N}" ],
	  [ /([^\\]|^)\u{D616}/gu,
	    "$1\\mathsfsl{O}" ],
	  [ /([^\\]|^)\u{D617}/gu,
	    "$1\\mathsfsl{P}" ],
	  [ /([^\\]|^)\u{D618}/gu,
	    "$1\\mathsfsl{Q}" ],
	  [ /([^\\]|^)\u{D619}/gu,
	    "$1\\mathsfsl{R}" ],
	  [ /([^\\]|^)\u{D61A}/gu,
	    "$1\\mathsfsl{S}" ],
	  [ /([^\\]|^)\u{D61B}/gu,
	    "$1\\mathsfsl{T}" ],
	  [ /([^\\]|^)\u{D61C}/gu,
	    "$1\\mathsfsl{U}" ],
	  [ /([^\\]|^)\u{D61D}/gu,
	    "$1\\mathsfsl{V}" ],
	  [ /([^\\]|^)\u{D61E}/gu,
	    "$1\\mathsfsl{W}" ],
	  [ /([^\\]|^)\u{D61F}/gu,
	    "$1\\mathsfsl{X}" ],
	  [ /([^\\]|^)\u{D620}/gu,
	    "$1\\mathsfsl{Y}" ],
	  [ /([^\\]|^)\u{D621}/gu,
	    "$1\\mathsfsl{Z}" ],
	  [ /([^\\]|^)\u{D622}/gu,
	    "$1\\mathsfsl{a}" ],
	  [ /([^\\]|^)\u{D623}/gu,
	    "$1\\mathsfsl{b}" ],
	  [ /([^\\]|^)\u{D624}/gu,
	    "$1\\mathsfsl{c}" ],
	  [ /([^\\]|^)\u{D625}/gu,
	    "$1\\mathsfsl{d}" ],
	  [ /([^\\]|^)\u{D626}/gu,
	    "$1\\mathsfsl{e}" ],
	  [ /([^\\]|^)\u{D627}/gu,
	    "$1\\mathsfsl{f}" ],
	  [ /([^\\]|^)\u{D628}/gu,
	    "$1\\mathsfsl{g}" ],
	  [ /([^\\]|^)\u{D629}/gu,
	    "$1\\mathsfsl{h}" ],
	  [ /([^\\]|^)\u{D62A}/gu,
	    "$1\\mathsfsl{i}" ],
	  [ /([^\\]|^)\u{D62B}/gu,
	    "$1\\mathsfsl{j}" ],
	  [ /([^\\]|^)\u{D62C}/gu,
	    "$1\\mathsfsl{k}" ],
	  [ /([^\\]|^)\u{D62D}/gu,
	    "$1\\mathsfsl{l}" ],
	  [ /([^\\]|^)\u{D62E}/gu,
	    "$1\\mathsfsl{m}" ],
	  [ /([^\\]|^)\u{D62F}/gu,
	    "$1\\mathsfsl{n}" ],
	  [ /([^\\]|^)\u{D630}/gu,
	    "$1\\mathsfsl{o}" ],
	  [ /([^\\]|^)\u{D631}/gu,
	    "$1\\mathsfsl{p}" ],
	  [ /([^\\]|^)\u{D632}/gu,
	    "$1\\mathsfsl{q}" ],
	  [ /([^\\]|^)\u{D633}/gu,
	    "$1\\mathsfsl{r}" ],
	  [ /([^\\]|^)\u{D634}/gu,
	    "$1\\mathsfsl{s}" ],
	  [ /([^\\]|^)\u{D635}/gu,
	    "$1\\mathsfsl{t}" ],
	  [ /([^\\]|^)\u{D636}/gu,
	    "$1\\mathsfsl{u}" ],
	  [ /([^\\]|^)\u{D637}/gu,
	    "$1\\mathsfsl{v}" ],
	  [ /([^\\]|^)\u{D638}/gu,
	    "$1\\mathsfsl{w}" ],
	  [ /([^\\]|^)\u{D639}/gu,
	    "$1\\mathsfsl{x}" ],
	  [ /([^\\]|^)\u{D63A}/gu,
	    "$1\\mathsfsl{y}" ],
	  [ /([^\\]|^)\u{D63B}/gu,
	    "$1\\mathsfsl{z}" ],
	  [ /([^\\]|^)\u{D63C}/gu,
	    "$1\\mathsfbfsl{A}" ],
	  [ /([^\\]|^)\u{D63D}/gu,
	    "$1\\mathsfbfsl{B}" ],
	  [ /([^\\]|^)\u{D63E}/gu,
	    "$1\\mathsfbfsl{C}" ],
	  [ /([^\\]|^)\u{D63F}/gu,
	    "$1\\mathsfbfsl{D}" ],
	  [ /([^\\]|^)\u{D640}/gu,
	    "$1\\mathsfbfsl{E}" ],
	  [ /([^\\]|^)\u{D641}/gu,
	    "$1\\mathsfbfsl{F}" ],
	  [ /([^\\]|^)\u{D642}/gu,
	    "$1\\mathsfbfsl{G}" ],
	  [ /([^\\]|^)\u{D643}/gu,
	    "$1\\mathsfbfsl{H}" ],
	  [ /([^\\]|^)\u{D644}/gu,
	    "$1\\mathsfbfsl{I}" ],
	  [ /([^\\]|^)\u{D645}/gu,
	    "$1\\mathsfbfsl{J}" ],
	  [ /([^\\]|^)\u{D646}/gu,
	    "$1\\mathsfbfsl{K}" ],
	  [ /([^\\]|^)\u{D647}/gu,
	    "$1\\mathsfbfsl{L}" ],
	  [ /([^\\]|^)\u{D648}/gu,
	    "$1\\mathsfbfsl{M}" ],
	  [ /([^\\]|^)\u{D649}/gu,
	    "$1\\mathsfbfsl{N}" ],
	  [ /([^\\]|^)\u{D64A}/gu,
	    "$1\\mathsfbfsl{O}" ],
	  [ /([^\\]|^)\u{D64B}/gu,
	    "$1\\mathsfbfsl{P}" ],
	  [ /([^\\]|^)\u{D64C}/gu,
	    "$1\\mathsfbfsl{Q}" ],
	  [ /([^\\]|^)\u{D64D}/gu,
	    "$1\\mathsfbfsl{R}" ],
	  [ /([^\\]|^)\u{D64E}/gu,
	    "$1\\mathsfbfsl{S}" ],
	  [ /([^\\]|^)\u{D64F}/gu,
	    "$1\\mathsfbfsl{T}" ],
	  [ /([^\\]|^)\u{D650}/gu,
	    "$1\\mathsfbfsl{U}" ],
	  [ /([^\\]|^)\u{D651}/gu,
	    "$1\\mathsfbfsl{V}" ],
	  [ /([^\\]|^)\u{D652}/gu,
	    "$1\\mathsfbfsl{W}" ],
	  [ /([^\\]|^)\u{D653}/gu,
	    "$1\\mathsfbfsl{X}" ],
	  [ /([^\\]|^)\u{D654}/gu,
	    "$1\\mathsfbfsl{Y}" ],
	  [ /([^\\]|^)\u{D655}/gu,
	    "$1\\mathsfbfsl{Z}" ],
	  [ /([^\\]|^)\u{D656}/gu,
	    "$1\\mathsfbfsl{a}" ],
	  [ /([^\\]|^)\u{D657}/gu,
	    "$1\\mathsfbfsl{b}" ],
	  [ /([^\\]|^)\u{D658}/gu,
	    "$1\\mathsfbfsl{c}" ],
	  [ /([^\\]|^)\u{D659}/gu,
	    "$1\\mathsfbfsl{d}" ],
	  [ /([^\\]|^)\u{D65A}/gu,
	    "$1\\mathsfbfsl{e}" ],
	  [ /([^\\]|^)\u{D65B}/gu,
	    "$1\\mathsfbfsl{f}" ],
	  [ /([^\\]|^)\u{D65C}/gu,
	    "$1\\mathsfbfsl{g}" ],
	  [ /([^\\]|^)\u{D65D}/gu,
	    "$1\\mathsfbfsl{h}" ],
	  [ /([^\\]|^)\u{D65E}/gu,
	    "$1\\mathsfbfsl{i}" ],
	  [ /([^\\]|^)\u{D65F}/gu,
	    "$1\\mathsfbfsl{j}" ],
	  [ /([^\\]|^)\u{D660}/gu,
	    "$1\\mathsfbfsl{k}" ],
	  [ /([^\\]|^)\u{D661}/gu,
	    "$1\\mathsfbfsl{l}" ],
	  [ /([^\\]|^)\u{D662}/gu,
	    "$1\\mathsfbfsl{m}" ],
	  [ /([^\\]|^)\u{D663}/gu,
	    "$1\\mathsfbfsl{n}" ],
	  [ /([^\\]|^)\u{D664}/gu,
	    "$1\\mathsfbfsl{o}" ],
	  [ /([^\\]|^)\u{D665}/gu,
	    "$1\\mathsfbfsl{p}" ],
	  [ /([^\\]|^)\u{D666}/gu,
	    "$1\\mathsfbfsl{q}" ],
	  [ /([^\\]|^)\u{D667}/gu,
	    "$1\\mathsfbfsl{r}" ],
	  [ /([^\\]|^)\u{D668}/gu,
	    "$1\\mathsfbfsl{s}" ],
	  [ /([^\\]|^)\u{D669}/gu,
	    "$1\\mathsfbfsl{t}" ],
	  [ /([^\\]|^)\u{D66A}/gu,
	    "$1\\mathsfbfsl{u}" ],
	  [ /([^\\]|^)\u{D66B}/gu,
	    "$1\\mathsfbfsl{v}" ],
	  [ /([^\\]|^)\u{D66C}/gu,
	    "$1\\mathsfbfsl{w}" ],
	  [ /([^\\]|^)\u{D66D}/gu,
	    "$1\\mathsfbfsl{x}" ],
	  [ /([^\\]|^)\u{D66E}/gu,
	    "$1\\mathsfbfsl{y}" ],
	  [ /([^\\]|^)\u{D66F}/gu,
	    "$1\\mathsfbfsl{z}" ],
	  [ /([^\\]|^)\u{D670}/gu,
	    "$1\\mathtt{A}" ],
	  [ /([^\\]|^)\u{D671}/gu,
	    "$1\\mathtt{B}" ],
	  [ /([^\\]|^)\u{D672}/gu,
	    "$1\\mathtt{C}" ],
	  [ /([^\\]|^)\u{D673}/gu,
	    "$1\\mathtt{D}" ],
	  [ /([^\\]|^)\u{D674}/gu,
	    "$1\\mathtt{E}" ],
	  [ /([^\\]|^)\u{D675}/gu,
	    "$1\\mathtt{F}" ],
	  [ /([^\\]|^)\u{D676}/gu,
	    "$1\\mathtt{G}" ],
	  [ /([^\\]|^)\u{D677}/gu,
	    "$1\\mathtt{H}" ],
	  [ /([^\\]|^)\u{D678}/gu,
	    "$1\\mathtt{I}" ],
	  [ /([^\\]|^)\u{D679}/gu,
	    "$1\\mathtt{J}" ],
	  [ /([^\\]|^)\u{D67A}/gu,
	    "$1\\mathtt{K}" ],
	  [ /([^\\]|^)\u{D67B}/gu,
	    "$1\\mathtt{L}" ],
	  [ /([^\\]|^)\u{D67C}/gu,
	    "$1\\mathtt{M}" ],
	  [ /([^\\]|^)\u{D67D}/gu,
	    "$1\\mathtt{N}" ],
	  [ /([^\\]|^)\u{D67E}/gu,
	    "$1\\mathtt{O}" ],
	  [ /([^\\]|^)\u{D67F}/gu,
	    "$1\\mathtt{P}" ],
	  [ /([^\\]|^)\u{D680}/gu,
	    "$1\\mathtt{Q}" ],
	  [ /([^\\]|^)\u{D681}/gu,
	    "$1\\mathtt{R}" ],
	  [ /([^\\]|^)\u{D682}/gu,
	    "$1\\mathtt{S}" ],
	  [ /([^\\]|^)\u{D683}/gu,
	    "$1\\mathtt{T}" ],
	  [ /([^\\]|^)\u{D684}/gu,
	    "$1\\mathtt{U}" ],
	  [ /([^\\]|^)\u{D685}/gu,
	    "$1\\mathtt{V}" ],
	  [ /([^\\]|^)\u{D686}/gu,
	    "$1\\mathtt{W}" ],
	  [ /([^\\]|^)\u{D687}/gu,
	    "$1\\mathtt{X}" ],
	  [ /([^\\]|^)\u{D688}/gu,
	    "$1\\mathtt{Y}" ],
	  [ /([^\\]|^)\u{D689}/gu,
	    "$1\\mathtt{Z}" ],
	  [ /([^\\]|^)\u{D68A}/gu,
	    "$1\\mathtt{a}" ],
	  [ /([^\\]|^)\u{D68B}/gu,
	    "$1\\mathtt{b}" ],
	  [ /([^\\]|^)\u{D68C}/gu,
	    "$1\\mathtt{c}" ],
	  [ /([^\\]|^)\u{D68D}/gu,
	    "$1\\mathtt{d}" ],
	  [ /([^\\]|^)\u{D68E}/gu,
	    "$1\\mathtt{e}" ],
	  [ /([^\\]|^)\u{D68F}/gu,
	    "$1\\mathtt{f}" ],
	  [ /([^\\]|^)\u{D690}/gu,
	    "$1\\mathtt{g}" ],
	  [ /([^\\]|^)\u{D691}/gu,
	    "$1\\mathtt{h}" ],
	  [ /([^\\]|^)\u{D692}/gu,
	    "$1\\mathtt{i}" ],
	  [ /([^\\]|^)\u{D693}/gu,
	    "$1\\mathtt{j}" ],
	  [ /([^\\]|^)\u{D694}/gu,
	    "$1\\mathtt{k}" ],
	  [ /([^\\]|^)\u{D695}/gu,
	    "$1\\mathtt{l}" ],
	  [ /([^\\]|^)\u{D696}/gu,
	    "$1\\mathtt{m}" ],
	  [ /([^\\]|^)\u{D697}/gu,
	    "$1\\mathtt{n}" ],
	  [ /([^\\]|^)\u{D698}/gu,
	    "$1\\mathtt{o}" ],
	  [ /([^\\]|^)\u{D699}/gu,
	    "$1\\mathtt{p}" ],
	  [ /([^\\]|^)\u{D69A}/gu,
	    "$1\\mathtt{q}" ],
	  [ /([^\\]|^)\u{D69B}/gu,
	    "$1\\mathtt{r}" ],
	  [ /([^\\]|^)\u{D69C}/gu,
	    "$1\\mathtt{s}" ],
	  [ /([^\\]|^)\u{D69D}/gu,
	    "$1\\mathtt{t}" ],
	  [ /([^\\]|^)\u{D69E}/gu,
	    "$1\\mathtt{u}" ],
	  [ /([^\\]|^)\u{D69F}/gu,
	    "$1\\mathtt{v}" ],
	  [ /([^\\]|^)\u{D6A0}/gu,
	    "$1\\mathtt{w}" ],
	  [ /([^\\]|^)\u{D6A1}/gu,
	    "$1\\mathtt{x}" ],
	  [ /([^\\]|^)\u{D6A2}/gu,
	    "$1\\mathtt{y}" ],
	  [ /([^\\]|^)\u{D6A3}/gu,
	    "$1\\mathtt{z}" ],
	  [ /([^\\]|^)\u{D6A8}/gu,
	    "$1\\mathbf{\\Alpha}" ],
	  [ /([^\\]|^)\u{D6A9}/gu,
	    "$1\\mathbf{\\Beta}" ],
	  [ /([^\\]|^)\u{D6AA}/gu,
	    "$1\\mathbf{\\Gamma}" ],
	  [ /([^\\]|^)\u{D6AB}/gu,
	    "$1\\mathbf{\\Delta}" ],
	  [ /([^\\]|^)\u{D6AC}/gu,
	    "$1\\mathbf{\\Epsilon}" ],
	  [ /([^\\]|^)\u{D6AD}/gu,
	    "$1\\mathbf{\\Zeta}" ],
	  [ /([^\\]|^)\u{D6AE}/gu,
	    "$1\\mathbf{\\Eta}" ],
	  [ /([^\\]|^)\u{D6AF}/gu,
	    "$1\\mathbf{\\Theta}" ],
	  [ /([^\\]|^)\u{D6B0}/gu,
	    "$1\\mathbf{\\Iota}" ],
	  [ /([^\\]|^)\u{D6B1}/gu,
	    "$1\\mathbf{\\Kappa}" ],
	  [ /([^\\]|^)\u{D6B2}/gu,
	    "$1\\mathbf{\\Lambda}" ],
	  [ /([^\\]|^)\u{D6B5}/gu,
	    "$1\\mathbf{\\Xi}" ],
	  [ /([^\\]|^)\u{D6B7}/gu,
	    "$1\\mathbf{\\Pi}" ],
	  [ /([^\\]|^)\u{D6B8}/gu,
	    "$1\\mathbf{\\Rho}" ],
	  [ /([^\\]|^)\u{D6B9}/gu,
	    "$1\\mathbf{\\vartheta}" ],
	  [ /([^\\]|^)\u{D6BA}/gu,
	    "$1\\mathbf{\\Sigma}" ],
	  [ /([^\\]|^)\u{D6BB}/gu,
	    "$1\\mathbf{\\Tau}" ],
	  [ /([^\\]|^)\u{D6BC}/gu,
	    "$1\\mathbf{\\Upsilon}" ],
	  [ /([^\\]|^)\u{D6BD}/gu,
	    "$1\\mathbf{\\Phi}" ],
	  [ /([^\\]|^)\u{D6BE}/gu,
	    "$1\\mathbf{\\Chi}" ],
	  [ /([^\\]|^)\u{D6BF}/gu,
	    "$1\\mathbf{\\Psi}" ],
	  [ /([^\\]|^)\u{D6C0}/gu,
	    "$1\\mathbf{\\Omega}" ],
	  [ /([^\\]|^)\u{D6C1}/gu,
	    "$1\\mathbf{\\nabla}" ],
	  [ /([^\\]|^)\u{D6C2}/gu,
	    "$1\\mathbf{\\Alpha}" ],
	  [ /([^\\]|^)\u{D6C3}/gu,
	    "$1\\mathbf{\\Beta}" ],
	  [ /([^\\]|^)\u{D6C4}/gu,
	    "$1\\mathbf{\\Gamma}" ],
	  [ /([^\\]|^)\u{D6C5}/gu,
	    "$1\\mathbf{\\Delta}" ],
	  [ /([^\\]|^)\u{D6C6}/gu,
	    "$1\\mathbf{\\Epsilon}" ],
	  [ /([^\\]|^)\u{D6C7}/gu,
	    "$1\\mathbf{\\Zeta}" ],
	  [ /([^\\]|^)\u{D6C8}/gu,
	    "$1\\mathbf{\\Eta}" ],
	  [ /([^\\]|^)\u{D6C9}/gu,
	    "$1\\mathbf{\\theta}" ],
	  [ /([^\\]|^)\u{D6CA}/gu,
	    "$1\\mathbf{\\Iota}" ],
	  [ /([^\\]|^)\u{D6CB}/gu,
	    "$1\\mathbf{\\Kappa}" ],
	  [ /([^\\]|^)\u{D6CC}/gu,
	    "$1\\mathbf{\\Lambda}" ],
	  [ /([^\\]|^)\u{D6CF}/gu,
	    "$1\\mathbf{\\Xi}" ],
	  [ /([^\\]|^)\u{D6D1}/gu,
	    "$1\\mathbf{\\Pi}" ],
	  [ /([^\\]|^)\u{D6D2}/gu,
	    "$1\\mathbf{\\Rho}" ],
	  [ /([^\\]|^)\u{D6D3}/gu,
	    "$1\\mathbf{\\varsigma}" ],
	  [ /([^\\]|^)\u{D6D4}/gu,
	    "$1\\mathbf{\\Sigma}" ],
	  [ /([^\\]|^)\u{D6D5}/gu,
	    "$1\\mathbf{\\Tau}" ],
	  [ /([^\\]|^)\u{D6D6}/gu,
	    "$1\\mathbf{\\Upsilon}" ],
	  [ /([^\\]|^)\u{D6D7}/gu,
	    "$1\\mathbf{\\Phi}" ],
	  [ /([^\\]|^)\u{D6D8}/gu,
	    "$1\\mathbf{\\Chi}" ],
	  [ /([^\\]|^)\u{D6D9}/gu,
	    "$1\\mathbf{\\Psi}" ],
	  [ /([^\\]|^)\u{D6DA}/gu,
	    "$1\\mathbf{\\Omega}" ],
	  [ /([^\\]|^)\u{D6DB}/gu,
	    "$1\\partial{}" ],
	  [ /([^\\]|^)\u{D6DC}/gu,
	    "$1\\in" ],
	  [ /([^\\]|^)\u{D6DD}/gu,
	    "$1\\mathbf{\\vartheta}" ],
	  [ /([^\\]|^)\u{D6DE}/gu,
	    "$1\\mathbf{\\varkappa}" ],
	  [ /([^\\]|^)\u{D6DF}/gu,
	    "$1\\mathbf{\\phi}" ],
	  [ /([^\\]|^)\u{D6E0}/gu,
	    "$1\\mathbf{\\varrho}" ],
	  [ /([^\\]|^)\u{D6E1}/gu,
	    "$1\\mathbf{\\varpi}" ],
	  [ /([^\\]|^)\u{D6E2}/gu,
	    "$1\\mathsl{\\Alpha}" ],
	  [ /([^\\]|^)\u{D6E3}/gu,
	    "$1\\mathsl{\\Beta}" ],
	  [ /([^\\]|^)\u{D6E4}/gu,
	    "$1\\mathsl{\\Gamma}" ],
	  [ /([^\\]|^)\u{D6E5}/gu,
	    "$1\\mathsl{\\Delta}" ],
	  [ /([^\\]|^)\u{D6E6}/gu,
	    "$1\\mathsl{\\Epsilon}" ],
	  [ /([^\\]|^)\u{D6E7}/gu,
	    "$1\\mathsl{\\Zeta}" ],
	  [ /([^\\]|^)\u{D6E8}/gu,
	    "$1\\mathsl{\\Eta}" ],
	  [ /([^\\]|^)\u{D6E9}/gu,
	    "$1\\mathsl{\\Theta}" ],
	  [ /([^\\]|^)\u{D6EA}/gu,
	    "$1\\mathsl{\\Iota}" ],
	  [ /([^\\]|^)\u{D6EB}/gu,
	    "$1\\mathsl{\\Kappa}" ],
	  [ /([^\\]|^)\u{D6EC}/gu,
	    "$1\\mathsl{\\Lambda}" ],
	  [ /([^\\]|^)\u{D6EF}/gu,
	    "$1\\mathsl{\\Xi}" ],
	  [ /([^\\]|^)\u{D6F1}/gu,
	    "$1\\mathsl{\\Pi}" ],
	  [ /([^\\]|^)\u{D6F2}/gu,
	    "$1\\mathsl{\\Rho}" ],
	  [ /([^\\]|^)\u{D6F3}/gu,
	    "$1\\mathsl{\\vartheta}" ],
	  [ /([^\\]|^)\u{D6F4}/gu,
	    "$1\\mathsl{\\Sigma}" ],
	  [ /([^\\]|^)\u{D6F5}/gu,
	    "$1\\mathsl{\\Tau}" ],
	  [ /([^\\]|^)\u{D6F6}/gu,
	    "$1\\mathsl{\\Upsilon}" ],
	  [ /([^\\]|^)\u{D6F7}/gu,
	    "$1\\mathsl{\\Phi}" ],
	  [ /([^\\]|^)\u{D6F8}/gu,
	    "$1\\mathsl{\\Chi}" ],
	  [ /([^\\]|^)\u{D6F9}/gu,
	    "$1\\mathsl{\\Psi}" ],
	  [ /([^\\]|^)\u{D6FA}/gu,
	    "$1\\mathsl{\\Omega}" ],
	  [ /([^\\]|^)\u{D6FB}/gu,
	    "$1\\mathsl{\\nabla}" ],
	  [ /([^\\]|^)\u{D6FC}/gu,
	    "$1\\mathsl{\\Alpha}" ],
	  [ /([^\\]|^)\u{D6FD}/gu,
	    "$1\\mathsl{\\Beta}" ],
	  [ /([^\\]|^)\u{D6FE}/gu,
	    "$1\\mathsl{\\Gamma}" ],
	  [ /([^\\]|^)\u{D6FF}/gu,
	    "$1\\mathsl{\\Delta}" ],
	  [ /([^\\]|^)\u{D700}/gu,
	    "$1\\mathsl{\\Epsilon}" ],
	  [ /([^\\]|^)\u{D701}/gu,
	    "$1\\mathsl{\\Zeta}" ],
	  [ /([^\\]|^)\u{D702}/gu,
	    "$1\\mathsl{\\Eta}" ],
	  [ /([^\\]|^)\u{D703}/gu,
	    "$1\\mathsl{\\Theta}" ],
	  [ /([^\\]|^)\u{D704}/gu,
	    "$1\\mathsl{\\Iota}" ],
	  [ /([^\\]|^)\u{D705}/gu,
	    "$1\\mathsl{\\Kappa}" ],
	  [ /([^\\]|^)\u{D706}/gu,
	    "$1\\mathsl{\\Lambda}" ],
	  [ /([^\\]|^)\u{D709}/gu,
	    "$1\\mathsl{\\Xi}" ],
	  [ /([^\\]|^)\u{D70B}/gu,
	    "$1\\mathsl{\\Pi}" ],
	  [ /([^\\]|^)\u{D70C}/gu,
	    "$1\\mathsl{\\Rho}" ],
	  [ /([^\\]|^)\u{D70D}/gu,
	    "$1\\mathsl{\\varsigma}" ],
	  [ /([^\\]|^)\u{D70E}/gu,
	    "$1\\mathsl{\\Sigma}" ],
	  [ /([^\\]|^)\u{D70F}/gu,
	    "$1\\mathsl{\\Tau}" ],
	  [ /([^\\]|^)\u{D710}/gu,
	    "$1\\mathsl{\\Upsilon}" ],
	  [ /([^\\]|^)\u{D711}/gu,
	    "$1\\mathsl{\\Phi}" ],
	  [ /([^\\]|^)\u{D712}/gu,
	    "$1\\mathsl{\\Chi}" ],
	  [ /([^\\]|^)\u{D713}/gu,
	    "$1\\mathsl{\\Psi}" ],
	  [ /([^\\]|^)\u{D714}/gu,
	    "$1\\mathsl{\\Omega}" ],
	  [ /([^\\]|^)\u{D715}/gu,
	    "$1\\partial{}" ],
	  [ /([^\\]|^)\u{D716}/gu,
	    "$1\\in" ],
	  [ /([^\\]|^)\u{D717}/gu,
	    "$1\\mathsl{\\vartheta}" ],
	  [ /([^\\]|^)\u{D718}/gu,
	    "$1\\mathsl{\\varkappa}" ],
	  [ /([^\\]|^)\u{D719}/gu,
	    "$1\\mathsl{\\phi}" ],
	  [ /([^\\]|^)\u{D71A}/gu,
	    "$1\\mathsl{\\varrho}" ],
	  [ /([^\\]|^)\u{D71B}/gu,
	    "$1\\mathsl{\\varpi}" ],
	  [ /([^\\]|^)\u{D71C}/gu,
	    "$1\\mathbit{\\Alpha}" ],
	  [ /([^\\]|^)\u{D71D}/gu,
	    "$1\\mathbit{\\Beta}" ],
	  [ /([^\\]|^)\u{D71E}/gu,
	    "$1\\mathbit{\\Gamma}" ],
	  [ /([^\\]|^)\u{D71F}/gu,
	    "$1\\mathbit{\\Delta}" ],
	  [ /([^\\]|^)\u{D720}/gu,
	    "$1\\mathbit{\\Epsilon}" ],
	  [ /([^\\]|^)\u{D721}/gu,
	    "$1\\mathbit{\\Zeta}" ],
	  [ /([^\\]|^)\u{D722}/gu,
	    "$1\\mathbit{\\Eta}" ],
	  [ /([^\\]|^)\u{D723}/gu,
	    "$1\\mathbit{\\Theta}" ],
	  [ /([^\\]|^)\u{D724}/gu,
	    "$1\\mathbit{\\Iota}" ],
	  [ /([^\\]|^)\u{D725}/gu,
	    "$1\\mathbit{\\Kappa}" ],
	  [ /([^\\]|^)\u{D726}/gu,
	    "$1\\mathbit{\\Lambda}" ],
	  [ /([^\\]|^)\u{D729}/gu,
	    "$1\\mathbit{\\Xi}" ],
	  [ /([^\\]|^)\u{D72B}/gu,
	    "$1\\mathbit{\\Pi}" ],
	  [ /([^\\]|^)\u{D72C}/gu,
	    "$1\\mathbit{\\Rho}" ],
	  [ /([^\\]|^)\u{D72D}/gu,
	    "$1\\mathbit{O}" ],
	  [ /([^\\]|^)\u{D72E}/gu,
	    "$1\\mathbit{\\Sigma}" ],
	  [ /([^\\]|^)\u{D72F}/gu,
	    "$1\\mathbit{\\Tau}" ],
	  [ /([^\\]|^)\u{D730}/gu,
	    "$1\\mathbit{\\Upsilon}" ],
	  [ /([^\\]|^)\u{D731}/gu,
	    "$1\\mathbit{\\Phi}" ],
	  [ /([^\\]|^)\u{D732}/gu,
	    "$1\\mathbit{\\Chi}" ],
	  [ /([^\\]|^)\u{D733}/gu,
	    "$1\\mathbit{\\Psi}" ],
	  [ /([^\\]|^)\u{D734}/gu,
	    "$1\\mathbit{\\Omega}" ],
	  [ /([^\\]|^)\u{D735}/gu,
	    "$1\\mathbit{\\nabla}" ],
	  [ /([^\\]|^)\u{D736}/gu,
	    "$1\\mathbit{\\Alpha}" ],
	  [ /([^\\]|^)\u{D737}/gu,
	    "$1\\mathbit{\\Beta}" ],
	  [ /([^\\]|^)\u{D738}/gu,
	    "$1\\mathbit{\\Gamma}" ],
	  [ /([^\\]|^)\u{D739}/gu,
	    "$1\\mathbit{\\Delta}" ],
	  [ /([^\\]|^)\u{D73A}/gu,
	    "$1\\mathbit{\\Epsilon}" ],
	  [ /([^\\]|^)\u{D73B}/gu,
	    "$1\\mathbit{\\Zeta}" ],
	  [ /([^\\]|^)\u{D73C}/gu,
	    "$1\\mathbit{\\Eta}" ],
	  [ /([^\\]|^)\u{D73D}/gu,
	    "$1\\mathbit{\\Theta}" ],
	  [ /([^\\]|^)\u{D73E}/gu,
	    "$1\\mathbit{\\Iota}" ],
	  [ /([^\\]|^)\u{D73F}/gu,
	    "$1\\mathbit{\\Kappa}" ],
	  [ /([^\\]|^)\u{D740}/gu,
	    "$1\\mathbit{\\Lambda}" ],
	  [ /([^\\]|^)\u{D743}/gu,
	    "$1\\mathbit{\\Xi}" ],
	  [ /([^\\]|^)\u{D745}/gu,
	    "$1\\mathbit{\\Pi}" ],
	  [ /([^\\]|^)\u{D746}/gu,
	    "$1\\mathbit{\\Rho}" ],
	  [ /([^\\]|^)\u{D747}/gu,
	    "$1\\mathbit{\\varsigma}" ],
	  [ /([^\\]|^)\u{D748}/gu,
	    "$1\\mathbit{\\Sigma}" ],
	  [ /([^\\]|^)\u{D749}/gu,
	    "$1\\mathbit{\\Tau}" ],
	  [ /([^\\]|^)\u{D74A}/gu,
	    "$1\\mathbit{\\Upsilon}" ],
	  [ /([^\\]|^)\u{D74B}/gu,
	    "$1\\mathbit{\\Phi}" ],
	  [ /([^\\]|^)\u{D74C}/gu,
	    "$1\\mathbit{\\Chi}" ],
	  [ /([^\\]|^)\u{D74D}/gu,
	    "$1\\mathbit{\\Psi}" ],
	  [ /([^\\]|^)\u{D74E}/gu,
	    "$1\\mathbit{\\Omega}" ],
	  [ /([^\\]|^)\u{D74F}/gu,
	    "$1\\partial{}" ],
	  [ /([^\\]|^)\u{D750}/gu,
	    "$1\\in" ],
	  [ /([^\\]|^)\u{D751}/gu,
	    "$1\\mathbit{\\vartheta}" ],
	  [ /([^\\]|^)\u{D752}/gu,
	    "$1\\mathbit{\\varkappa}" ],
	  [ /([^\\]|^)\u{D753}/gu,
	    "$1\\mathbit{\\phi}" ],
	  [ /([^\\]|^)\u{D754}/gu,
	    "$1\\mathbit{\\varrho}" ],
	  [ /([^\\]|^)\u{D755}/gu,
	    "$1\\mathbit{\\varpi}" ],
	  [ /([^\\]|^)\u{D756}/gu,
	    "$1\\mathsfbf{\\Alpha}" ],
	  [ /([^\\]|^)\u{D757}/gu,
	    "$1\\mathsfbf{\\Beta}" ],
	  [ /([^\\]|^)\u{D758}/gu,
	    "$1\\mathsfbf{\\Gamma}" ],
	  [ /([^\\]|^)\u{D759}/gu,
	    "$1\\mathsfbf{\\Delta}" ],
	  [ /([^\\]|^)\u{D75A}/gu,
	    "$1\\mathsfbf{\\Epsilon}" ],
	  [ /([^\\]|^)\u{D75B}/gu,
	    "$1\\mathsfbf{\\Zeta}" ],
	  [ /([^\\]|^)\u{D75C}/gu,
	    "$1\\mathsfbf{\\Eta}" ],
	  [ /([^\\]|^)\u{D75D}/gu,
	    "$1\\mathsfbf{\\Theta}" ],
	  [ /([^\\]|^)\u{D75E}/gu,
	    "$1\\mathsfbf{\\Iota}" ],
	  [ /([^\\]|^)\u{D75F}/gu,
	    "$1\\mathsfbf{\\Kappa}" ],
	  [ /([^\\]|^)\u{D760}/gu,
	    "$1\\mathsfbf{\\Lambda}" ],
	  [ /([^\\]|^)\u{D763}/gu,
	    "$1\\mathsfbf{\\Xi}" ],
	  [ /([^\\]|^)\u{D765}/gu,
	    "$1\\mathsfbf{\\Pi}" ],
	  [ /([^\\]|^)\u{D766}/gu,
	    "$1\\mathsfbf{\\Rho}" ],
	  [ /([^\\]|^)\u{D767}/gu,
	    "$1\\mathsfbf{\\vartheta}" ],
	  [ /([^\\]|^)\u{D768}/gu,
	    "$1\\mathsfbf{\\Sigma}" ],
	  [ /([^\\]|^)\u{D769}/gu,
	    "$1\\mathsfbf{\\Tau}" ],
	  [ /([^\\]|^)\u{D76A}/gu,
	    "$1\\mathsfbf{\\Upsilon}" ],
	  [ /([^\\]|^)\u{D76B}/gu,
	    "$1\\mathsfbf{\\Phi}" ],
	  [ /([^\\]|^)\u{D76C}/gu,
	    "$1\\mathsfbf{\\Chi}" ],
	  [ /([^\\]|^)\u{D76D}/gu,
	    "$1\\mathsfbf{\\Psi}" ],
	  [ /([^\\]|^)\u{D76E}/gu,
	    "$1\\mathsfbf{\\Omega}" ],
	  [ /([^\\]|^)\u{D76F}/gu,
	    "$1\\mathsfbf{\\nabla}" ],
	  [ /([^\\]|^)\u{D770}/gu,
	    "$1\\mathsfbf{\\Alpha}" ],
	  [ /([^\\]|^)\u{D771}/gu,
	    "$1\\mathsfbf{\\Beta}" ],
	  [ /([^\\]|^)\u{D772}/gu,
	    "$1\\mathsfbf{\\Gamma}" ],
	  [ /([^\\]|^)\u{D773}/gu,
	    "$1\\mathsfbf{\\Delta}" ],
	  [ /([^\\]|^)\u{D774}/gu,
	    "$1\\mathsfbf{\\Epsilon}" ],
	  [ /([^\\]|^)\u{D775}/gu,
	    "$1\\mathsfbf{\\Zeta}" ],
	  [ /([^\\]|^)\u{D776}/gu,
	    "$1\\mathsfbf{\\Eta}" ],
	  [ /([^\\]|^)\u{D777}/gu,
	    "$1\\mathsfbf{\\Theta}" ],
	  [ /([^\\]|^)\u{D778}/gu,
	    "$1\\mathsfbf{\\Iota}" ],
	  [ /([^\\]|^)\u{D779}/gu,
	    "$1\\mathsfbf{\\Kappa}" ],
	  [ /([^\\]|^)\u{D77A}/gu,
	    "$1\\mathsfbf{\\Lambda}" ],
	  [ /([^\\]|^)\u{D77D}/gu,
	    "$1\\mathsfbf{\\Xi}" ],
	  [ /([^\\]|^)\u{D77F}/gu,
	    "$1\\mathsfbf{\\Pi}" ],
	  [ /([^\\]|^)\u{D780}/gu,
	    "$1\\mathsfbf{\\Rho}" ],
	  [ /([^\\]|^)\u{D781}/gu,
	    "$1\\mathsfbf{\\varsigma}" ],
	  [ /([^\\]|^)\u{D782}/gu,
	    "$1\\mathsfbf{\\Sigma}" ],
	  [ /([^\\]|^)\u{D783}/gu,
	    "$1\\mathsfbf{\\Tau}" ],
	  [ /([^\\]|^)\u{D784}/gu,
	    "$1\\mathsfbf{\\Upsilon}" ],
	  [ /([^\\]|^)\u{D785}/gu,
	    "$1\\mathsfbf{\\Phi}" ],
	  [ /([^\\]|^)\u{D786}/gu,
	    "$1\\mathsfbf{\\Chi}" ],
	  [ /([^\\]|^)\u{D787}/gu,
	    "$1\\mathsfbf{\\Psi}" ],
	  [ /([^\\]|^)\u{D788}/gu,
	    "$1\\mathsfbf{\\Omega}" ],
	  [ /([^\\]|^)\u{D789}/gu,
	    "$1\\partial{}" ],
	  [ /([^\\]|^)\u{D78A}/gu,
	    "$1\\in" ],
	  [ /([^\\]|^)\u{D78B}/gu,
	    "$1\\mathsfbf{\\vartheta}" ],
	  [ /([^\\]|^)\u{D78C}/gu,
	    "$1\\mathsfbf{\\varkappa}" ],
	  [ /([^\\]|^)\u{D78D}/gu,
	    "$1\\mathsfbf{\\phi}" ],
	  [ /([^\\]|^)\u{D78E}/gu,
	    "$1\\mathsfbf{\\varrho}" ],
	  [ /([^\\]|^)\u{D78F}/gu,
	    "$1\\mathsfbf{\\varpi}" ],
	  [ /([^\\]|^)\u{D790}/gu,
	    "$1\\mathsfbfsl{\\Alpha}" ],
	  [ /([^\\]|^)\u{D791}/gu,
	    "$1\\mathsfbfsl{\\Beta}" ],
	  [ /([^\\]|^)\u{D792}/gu,
	    "$1\\mathsfbfsl{\\Gamma}" ],
	  [ /([^\\]|^)\u{D793}/gu,
	    "$1\\mathsfbfsl{\\Delta}" ],
	  [ /([^\\]|^)\u{D794}/gu,
	    "$1\\mathsfbfsl{\\Epsilon}" ],
	  [ /([^\\]|^)\u{D795}/gu,
	    "$1\\mathsfbfsl{\\Zeta}" ],
	  [ /([^\\]|^)\u{D796}/gu,
	    "$1\\mathsfbfsl{\\Eta}" ],
	  [ /([^\\]|^)\u{D797}/gu,
	    "$1\\mathsfbfsl{\\vartheta}" ],
	  [ /([^\\]|^)\u{D798}/gu,
	    "$1\\mathsfbfsl{\\Iota}" ],
	  [ /([^\\]|^)\u{D799}/gu,
	    "$1\\mathsfbfsl{\\Kappa}" ],
	  [ /([^\\]|^)\u{D79A}/gu,
	    "$1\\mathsfbfsl{\\Lambda}" ],
	  [ /([^\\]|^)\u{D79D}/gu,
	    "$1\\mathsfbfsl{\\Xi}" ],
	  [ /([^\\]|^)\u{D79F}/gu,
	    "$1\\mathsfbfsl{\\Pi}" ],
	  [ /([^\\]|^)\u{D7A0}/gu,
	    "$1\\mathsfbfsl{\\Rho}" ],
	  [ /([^\\]|^)\u{D7A1}/gu,
	    "$1\\mathsfbfsl{\\vartheta}" ],
	  [ /([^\\]|^)\u{D7A2}/gu,
	    "$1\\mathsfbfsl{\\Sigma}" ],
	  [ /([^\\]|^)\u{D7A3}/gu,
	    "$1\\mathsfbfsl{\\Tau}" ],
	  [ /([^\\]|^)\u{D7A4}/gu,
	    "$1\\mathsfbfsl{\\Upsilon}" ],
	  [ /([^\\]|^)\u{D7A5}/gu,
	    "$1\\mathsfbfsl{\\Phi}" ],
	  [ /([^\\]|^)\u{D7A6}/gu,
	    "$1\\mathsfbfsl{\\Chi}" ],
	  [ /([^\\]|^)\u{D7A7}/gu,
	    "$1\\mathsfbfsl{\\Psi}" ],
	  [ /([^\\]|^)\u{D7A8}/gu,
	    "$1\\mathsfbfsl{\\Omega}" ],
	  [ /([^\\]|^)\u{D7A9}/gu,
	    "$1\\mathsfbfsl{\\nabla}" ],
	  [ /([^\\]|^)\u{D7AA}/gu,
	    "$1\\mathsfbfsl{\\Alpha}" ],
	  [ /([^\\]|^)\u{D7AB}/gu,
	    "$1\\mathsfbfsl{\\Beta}" ],
	  [ /([^\\]|^)\u{D7AC}/gu,
	    "$1\\mathsfbfsl{\\Gamma}" ],
	  [ /([^\\]|^)\u{D7AD}/gu,
	    "$1\\mathsfbfsl{\\Delta}" ],
	  [ /([^\\]|^)\u{D7AE}/gu,
	    "$1\\mathsfbfsl{\\Epsilon}" ],
	  [ /([^\\]|^)\u{D7AF}/gu,
	    "$1\\mathsfbfsl{\\Zeta}" ],
	  [ /([^\\]|^)\u{D7B0}/gu,
	    "$1\\mathsfbfsl{\\Eta}" ],
	  [ /([^\\]|^)\u{D7B1}/gu,
	    "$1\\mathsfbfsl{\\vartheta}" ],
	  [ /([^\\]|^)\u{D7B2}/gu,
	    "$1\\mathsfbfsl{\\Iota}" ],
	  [ /([^\\]|^)\u{D7B3}/gu,
	    "$1\\mathsfbfsl{\\Kappa}" ],
	  [ /([^\\]|^)\u{D7B4}/gu,
	    "$1\\mathsfbfsl{\\Lambda}" ],
	  [ /([^\\]|^)\u{D7B7}/gu,
	    "$1\\mathsfbfsl{\\Xi}" ],
	  [ /([^\\]|^)\u{D7B9}/gu,
	    "$1\\mathsfbfsl{\\Pi}" ],
	  [ /([^\\]|^)\u{D7BA}/gu,
	    "$1\\mathsfbfsl{\\Rho}" ],
	  [ /([^\\]|^)\u{D7BB}/gu,
	    "$1\\mathsfbfsl{\\varsigma}" ],
	  [ /([^\\]|^)\u{D7BC}/gu,
	    "$1\\mathsfbfsl{\\Sigma}" ],
	  [ /([^\\]|^)\u{D7BD}/gu,
	    "$1\\mathsfbfsl{\\Tau}" ],
	  [ /([^\\]|^)\u{D7BE}/gu,
	    "$1\\mathsfbfsl{\\Upsilon}" ],
	  [ /([^\\]|^)\u{D7BF}/gu,
	    "$1\\mathsfbfsl{\\Phi}" ],
	  [ /([^\\]|^)\u{D7C0}/gu,
	    "$1\\mathsfbfsl{\\Chi}" ],
	  [ /([^\\]|^)\u{D7C1}/gu,
	    "$1\\mathsfbfsl{\\Psi}" ],
	  [ /([^\\]|^)\u{D7C2}/gu,
	    "$1\\mathsfbfsl{\\Omega}" ],
	  [ /([^\\]|^)\u{D7C3}/gu,
	    "$1\\partial{}" ],
	  [ /([^\\]|^)\u{D7C4}/gu,
	    "$1\\in" ],
	  [ /([^\\]|^)\u{D7C5}/gu,
	    "$1\\mathsfbfsl{\\vartheta}" ],
	  [ /([^\\]|^)\u{D7C6}/gu,
	    "$1\\mathsfbfsl{\\varkappa}" ],
	  [ /([^\\]|^)\u{D7C7}/gu,
	    "$1\\mathsfbfsl{\\phi}" ],
	  [ /([^\\]|^)\u{D7C8}/gu,
	    "$1\\mathsfbfsl{\\varrho}" ],
	  [ /([^\\]|^)\u{D7C9}/gu,
	    "$1\\mathsfbfsl{\\varpi}" ],
	  [ /([^\\]|^)\u{D7CE}/gu,
	    "$1\\mathbf{0}" ],
	  [ /([^\\]|^)\u{D7CF}/gu,
	    "$1\\mathbf{1}" ],
	  [ /([^\\]|^)\u{D7D0}/gu,
	    "$1\\mathbf{2}" ],
	  [ /([^\\]|^)\u{D7D1}/gu,
	    "$1\\mathbf{3}" ],
	  [ /([^\\]|^)\u{D7D2}/gu,
	    "$1\\mathbf{4}" ],
	  [ /([^\\]|^)\u{D7D3}/gu,
	    "$1\\mathbf{5}" ],
	  [ /([^\\]|^)\u{D7D4}/gu,
	    "$1\\mathbf{6}" ],
	  [ /([^\\]|^)\u{D7D5}/gu,
	    "$1\\mathbf{7}" ],
	  [ /([^\\]|^)\u{D7D6}/gu,
	    "$1\\mathbf{8}" ],
	  [ /([^\\]|^)\u{D7D7}/gu,
	    "$1\\mathbf{9}" ],
	  [ /([^\\]|^)\u{D7D8}/gu,
	    "$1\\mathbb{0}" ],
	  [ /([^\\]|^)\u{D7D9}/gu,
	    "$1\\mathbb{1}" ],
	  [ /([^\\]|^)\u{D7DA}/gu,
	    "$1\\mathbb{2}" ],
	  [ /([^\\]|^)\u{D7DB}/gu,
	    "$1\\mathbb{3}" ],
	  [ /([^\\]|^)\u{D7DC}/gu,
	    "$1\\mathbb{4}" ],
	  [ /([^\\]|^)\u{D7DD}/gu,
	    "$1\\mathbb{5}" ],
	  [ /([^\\]|^)\u{D7DE}/gu,
	    "$1\\mathbb{6}" ],
	  [ /([^\\]|^)\u{D7DF}/gu,
	    "$1\\mathbb{7}" ],
	  [ /([^\\]|^)\u{D7E0}/gu,
	    "$1\\mathbb{8}" ],
	  [ /([^\\]|^)\u{D7E1}/gu,
	    "$1\\mathbb{9}" ],
	  [ /([^\\]|^)\u{D7E2}/gu,
	    "$1\\mathsf{0}" ],
	  [ /([^\\]|^)\u{D7E3}/gu,
	    "$1\\mathsf{1}" ],
	  [ /([^\\]|^)\u{D7E4}/gu,
	    "$1\\mathsf{2}" ],
	  [ /([^\\]|^)\u{D7E5}/gu,
	    "$1\\mathsf{3}" ],
	  [ /([^\\]|^)\u{D7E6}/gu,
	    "$1\\mathsf{4}" ],
	  [ /([^\\]|^)\u{D7E7}/gu,
	    "$1\\mathsf{5}" ],
	  [ /([^\\]|^)\u{D7E8}/gu,
	    "$1\\mathsf{6}" ],
	  [ /([^\\]|^)\u{D7E9}/gu,
	    "$1\\mathsf{7}" ],
	  [ /([^\\]|^)\u{D7EA}/gu,
	    "$1\\mathsf{8}" ],
	  [ /([^\\]|^)\u{D7EB}/gu,
	    "$1\\mathsf{9}" ],
	  [ /([^\\]|^)\u{D7EC}/gu,
	    "$1\\mathsfbf{0}" ],
	  [ /([^\\]|^)\u{D7ED}/gu,
	    "$1\\mathsfbf{1}" ],
	  [ /([^\\]|^)\u{D7EE}/gu,
	    "$1\\mathsfbf{2}" ],
	  [ /([^\\]|^)\u{D7EF}/gu,
	    "$1\\mathsfbf{3}" ],
	  [ /([^\\]|^)\u{D7F0}/gu,
	    "$1\\mathsfbf{4}" ],
	  [ /([^\\]|^)\u{D7F1}/gu,
	    "$1\\mathsfbf{5}" ],
	  [ /([^\\]|^)\u{D7F2}/gu,
	    "$1\\mathsfbf{6}" ],
	  [ /([^\\]|^)\u{D7F3}/gu,
	    "$1\\mathsfbf{7}" ],
	  [ /([^\\]|^)\u{D7F4}/gu,
	    "$1\\mathsfbf{8}" ],
	  [ /([^\\]|^)\u{D7F5}/gu,
	    "$1\\mathsfbf{9}" ],
	  [ /([^\\]|^)\u{D7F6}/gu,
	    "$1\\mathtt{0}" ],
	  [ /([^\\]|^)\u{D7F7}/gu,
	    "$1\\mathtt{1}" ],
	  [ /([^\\]|^)\u{D7F8}/gu,
	    "$1\\mathtt{2}" ],
	  [ /([^\\]|^)\u{D7F9}/gu,
	    "$1\\mathtt{3}" ],
	  [ /([^\\]|^)\u{D7FA}/gu,
	    "$1\\mathtt{4}" ],
	  [ /([^\\]|^)\u{D7FB}/gu,
	    "$1\\mathtt{5}" ],
	  [ /([^\\]|^)\u{D7FC}/gu,
	    "$1\\mathtt{6}" ],
	  [ /([^\\]|^)\u{D7FD}/gu,
	    "$1\\mathtt{7}" ],
	  [ /([^\\]|^)\u{D7FE}/gu,
	    "$1\\mathtt{8}" ],
	  [ /([^\\]|^)\u{D7FF}/gu,
	    "$1\\mathtt{9}" ] ];

	/* jshint node: true, esversion: 6, unused: true */

	const defaultFieldOrder = [
		'title', 'shorttitle', 'author', 'year', 'month', 'day', 'journal',
		'booktitle', 'location', 'on',  'publisher', 'address', 'series',
		'volume', 'number', 'pages', 'doi', 'isbn', 'issn', 'url', 
		'urldate', 'copyright', 'category', 'note', 'metadata'
	];

	const options = { 
		omit: {
			name: 'Remove specified fields',
			description: 'Provide a list of fields which should be removed from every bibliography entry.',
			type: 'array',
			value: []
		},
		curly: {
			name: 'Enclose values in curly braces',
			description: 'Setting this to true will cause all property values to be enclosed in braces. Quoted values will be converted to braces.',
			type: 'boolean',
			value: false
		},
		numeric: {
			name: 'Use numeric values where possible',
			description: 'Setting this to true will strip quotes and braces from numeric/month values. For example, {1998} will become 1998.',
			type: 'boolean',
			value: false
		},
		space: { 
			name: 'Indent with spaces',
			description: 'Providing a number causes all fields to be prefixed with the corresponding number of spaces. This is ignored if tab is true.',
			type: 'number',
			value: 2
		},
		tab: { 
			name: 'Indent with tabs',
			description: 'If this is set then all fields will be prefixed with a tab.',
			type: 'boolean',
			value: false
		},
		align: {
			name: 'Align values',
			description: 'Insert whitespace between fields and values so that values are visually aligned.',
			type: 'number',
			value: 14
		},
		sort: {
			name: 'Sort bibliography entries',
			description: 'Sort entries alphabetically by id (or other provided fields).',
			type: 'array',
			value: false
		},
		merge: { 
			name: 'Merge duplicate entries',
			description: 'Two entries are considered duplicates in the following cases: (a) their DOIs are identical, (b) their abstracts are identical, or (c) their authors and titles are both identical. The firstmost entry is kept and any extra properties from duplicate entries are incorporated.',
			type: 'boolean',
			value: false
		},
		stripEnclosingBraces: {
			name: 'Strip double-braced values.',
			description: 'Where an entire value is enclosed in double braces, remove the extra braces. For example, convert {{Journal of Tea}} to {Journal of Tea}.',
			type: 'boolean',
			value: false
		},
		dropAllCaps: { 
			name: 'Drop all caps',
			description: 'Where values are all caps, make them title case. For example, convert {JOURNAL OF TEA} to {Journal of Tea}.',
			type: 'boolean',
			value: false
		},
		escape: {
			name: 'Escape special characters',
			description: 'Escape special characters, such as umlaut. This ensures correct typesetting with latex.',
			type: 'boolean',
			value: true
		},
		sortFields: {
			name: 'Sort fields',
			description: `Sort the fields within entries. The default sort order is ${defaultFieldOrder.join(', ')}. Alternatively you can specify space delimited properties.`,
			type: 'array',
			value: false
		},
		stripComments: {
			name: 'Remove comments',
			description: 'Remove all comments from the bibtex source.',
			type: 'boolean',
			value: false
		},
		encodeUrls: {
			name: 'Encode URLs',
			description: 'Replace invalid URL characters with percent encoded values.',
			type: 'boolean',
			value: false
		},
		tidyComments: {
			name: 'Tidy comments',
			description: 'Remove whitespace surrounding comments.',
			type: 'boolean',
			value: true
		}
	};

	const defaults = {};
	for (let k of Object.keys(options)) {
		defaults[k] = options[k].value;
	}

	const months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun',
	                'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];

	const escapeSpecialCharacters = str => {
		for (let [regexp, latex] of unicode) {
			str = str.replace(regexp, latex);
		}
		return str;
	};

	const titleCase = str => str.replace(/\w\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());

	const stripWhitespace = str => String(str).replace(/\W/g, '').toLowerCase();

	const get = (item, name) => {
		let field = item.fields.find(f => f.name.toUpperCase() === name.toUpperCase());
		return field ? field : null;
	};

	const getValue = (item, name) => {
		let field = get(item, name);
		return field ? field.value : null;
	};

	const tidy = (input, options = {}) => {
		options = { ...defaults, ...options }; // make a copy of options with defaults

		if (options.sort === true) {
			options.sort = ['key'];
		}
		if (options.space === true) {
			options.space = 2;
		}
		if (options.sortProperties) {
			options.sortFields = options.sortProperties;
		}
		if (options.sortFields === true) {
			options.sortFields = defaultFieldOrder;
		}
		if (options.omit === false || (!(options.omit instanceof Array))) {
			options.omit = [];
		}
		if (options.align === false) {
			options.align = 1;
		}

		let items = parser.parse(input),
			hashes = [],
			keys = [],
			warnings = [],
			preceedingMeta = []; // comments, preambles, and strings which should be kept with an entry
		for (let item of items) {
			if (item.itemtype !== 'entry') {// if string, preamble, or comment, then use sortIndex of previous entry
				preceedingMeta.push(item);
			} else {

				if (!item.key) {
					warnings.push({ code: 'MISSING_KEY', message: `${item.key} does not have an entry key.`, entry: item });
				} else if (keys.includes(item.key)) {
					warnings.push({ code: 'DUPLICATE_KEY', message: `${item.key} is a duplicate entry key.`, entry: item });
				}
				keys.push(item.key);

				if (options.merge) {
					let hash = {
							entry: item,
							doi: get(item, 'doi') ? stripWhitespace(getValue(item, 'doi')) : null,
							abstract: get(item, 'abstract') ? stripWhitespace(getValue(item, 'abstract')).slice(0, 100) : null,
							authorTitle: (get(item, 'author') ? String(getValue(item, 'author')).match(/([^\s]+)\s*(,|and |et |$)/)[1] : '') + ':' + // surname (comes before comma or 'and')
								(stripWhitespace(getValue(item, 'title')) || '').slice(0, 50)
						},
						duplicate = hashes.find(h => {
							return hash.doi ? hash.doi === h.doi :
								hash.abstract ? hash.abstract === h.abstract :
								hash.authorTitle === h.authorTitle;
						});
					if (duplicate) {
						warnings.push({ code:'DUPLICATE_ENTRY', message: `${item.key} appears to be a duplicate of ${duplicate.entry.key} and was removed.`, entry: item, duplicateOf: duplicate.entry });
						duplicate.entry.fields.push(...item.fields);
						item.duplicate = true;
					} else {
						hashes.push(hash);
					}
				}

				if (options.sort) {
					let sortIndex = options.sort
						.map(k => String(item[k] || getValue(item, k) || '\ufff0').toLowerCase()) // if no value, then use \ufff0 so entry will be last
						.join(' ');
					for (let i in preceedingMeta) {
						preceedingMeta[i].sortIndex = `${sortIndex} ${i}`;
					}
					item.sortIndex = `${sortIndex} ${preceedingMeta.length}`;
					preceedingMeta = [];
				}
			}
		}

		if (options.sort) { // an array of keys to sort by
			items = items.sort((a, b) => a.sortIndex < b.sortIndex ? -1 : a.sortIndex > b.sortIndex ? 1 : 0);
		}

		let bibtex = '',
			indent = options.tab ? '\t' : Array(options.space).fill(' ').join('');
		for (let item of items) {
			if (item.duplicate) { continue; }
			if (item.itemtype === 'string') {
				bibtex += `@string{${item.name} = ${item.raw}}\n`; // keep strings as they were
			} else if (item.itemtype === 'preamble') {
				bibtex += `@preamble{${item.raw}}\n`; // keep preambles as they were
			} else if (item.itemtype === 'comment') {
				let comment = options.tidyComments ? item.comment.trim() : item.comment.replace(/^[ \t]*\n|\n[ \t]*$/g, '');
				if (comment && !options.stripComments) {
					bibtex += `${comment}\n`;
				}
			} else { // entry
				let props = item.fields
					.map(field => field.name.toLowerCase())
					.filter(k => !options.omit.includes(k));

				props = Array.from(new Set(props)); // remove duplicate properties

				if (options.sortFields) {
					props = props.sort((a, b) => {
						let indexA = options.sortFields.indexOf(a),
							indexB = options.sortFields.indexOf(b);
						return indexA > -1 && indexB > -1 ? indexA - indexB : indexA > -1 ? -1 : indexB > -1 ? 1 : 0;
					});
				}
				props = props.map(k => {
					let v = get(item, k),
						output;
					if (v.datatype === 'concatinate') {
						output = v.value.map(({ value, datatype }) => renderValue(value, datatype)).join(' # ');
					} else {
						let val = String(v.value).replace(/\s*\n\s*/g, ' ').trim(); // remove whitespace
						if (options.stripEnclosingBraces) {
							val = val.replace(/^\{(.*)\}$/g, '$1');
						}
						if (options.dropAllCaps && val.match(/^[^a-z]+$/)) {
							val = titleCase(val);
						}
						if (options.escape) {
							val = escapeSpecialCharacters(val);
						}
						if (k === 'url' && options.encodeUrls) {
							val = val.replace(/\\_/g, '%5F');
						}
						if (k === 'pages') {
							val = val.replace(/(\d)\s*-\s*(\d)/, '$1--$2'); // replace single dash with double dash in page range
						}
						output = renderValue(val, v.datatype, options.curly);
						if (options.numeric) {
							if (val.match(/^[0-9]+$/)) {
								output = String(Number(val)).toLowerCase();
							} else if (k === 'month' && months.includes(val.slice(0, 3).toLowerCase())) {
								output = val.slice(0, 3).toLowerCase();
							}
						}
					}
					return `${indent}${k.padEnd(options.align - 1)} = ${output}`;
				});

				bibtex += `@${item.type.toLowerCase()}{${item.key ? `${item.key},` : ''}\n${props.join(',\n')}\n}\n`;
			}
		}

		let entries = items.filter(item => item.itemtype === 'entry');

		return { bibtex, warnings, entries };
	};

	const renderValue = (value, datatype, forceBrace) => {
		return datatype === 'braced' || forceBrace ? `{${value}}` :
			datatype === 'quoted' ? `"${value}"` : value;
	};

	var index = { tidy, options };

	return index;

})));
